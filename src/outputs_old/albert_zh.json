{"type":{"0":"R","1":"C","2":"R","3":"C","4":"C","5":"R","6":"R","7":"R","8":"W","9":"R","10":"R","11":"R","12":"R","13":"R","14":"R","15":"R","16":"R","17":"R","18":"R","19":"R","20":"R","21":"R","22":"R","23":"R","24":"R","25":"R","26":"R","27":"R","28":"R","29":"R","30":"R","31":"R","32":"R","33":"R","34":"R","35":"R","36":"R","37":"R","38":"R","39":"R","40":"R","41":"R","42":"R","43":"R","44":"R","45":"R","46":"R","47":"R","48":"R","49":"R","50":"R","51":"R","52":"R","53":"R","54":"R","55":"R","56":"R","57":"R","58":"R","59":"R","60":"R","61":"R","62":"R","63":"R","64":"R","65":"R","66":"R","67":"R","68":"R","69":"R","70":"R","71":"R","72":"R","73":"R","74":"R","75":"R","76":"R","77":"R","78":"R","79":"R","80":"R","81":"R","82":"R","83":"R","84":"R","85":"R","86":"R","87":"R","88":"R","89":"R","90":"R","91":"R","92":"R","93":"R","94":"R","95":"R","96":"R","97":"R","98":"R","99":"R","100":"R","101":"R","102":"R","103":"R","104":"R","105":"R","106":"R","107":"R","108":"R","109":"R","110":"R","111":"R","112":"R","113":"R","114":"R","115":"R","116":"R","117":"R","118":"R","119":"R","120":"R","121":"R","122":"R","123":"R","124":"R","125":"R","126":"R","127":"R","128":"R","129":"R","130":"R","131":"R","132":"R","133":"R","134":"R","135":"R","136":"R","137":"R","138":"R","139":"R","140":"R","141":"R","142":"R","143":"R","144":"R","145":"R","146":"R","147":"R","148":"R","149":"R","150":"R","151":"R","152":"R","153":"R","154":"R","155":"R","156":"R","157":"R","158":"R","159":"R","160":"R","161":"R","162":"R","163":"R","164":"R","165":"R","166":"R","167":"R","168":"R","169":"R","170":"R","171":"R","172":"R","173":"R","174":"R","175":"R","176":"R","177":"R","178":"R","179":"R","180":"R","181":"R","182":"R","183":"R","184":"R","185":"R","186":"R","187":"R","188":"R","189":"R","190":"R","191":"R","192":"R","193":"R","194":"R","195":"R","196":"R","197":"R","198":"R","199":"R","200":"R","201":"R","202":"R","203":"R","204":"R","205":"R","206":"R","207":"R","208":"R","209":"R","210":"R","211":"R"},"module":{"0":"classifier_utils","1":"create_pretraining_data","2":"create_pretraining_data","3":"create_pretraining_data","4":"create_pretraining_data","5":"create_pretraining_data","6":"create_pretraining_data_google","7":"create_pretraining_data_google","8":"run_classifier_clue","9":"tokenization","10":"tokenization","11":"tokenization_google","12":"tokenization_google","13":"tokenization_google","14":"tokenization_google","15":"tokenization_google","16":"tokenization_google","17":"tokenization_google","18":"tokenization_google","19":"tokenization_google","20":"tokenization_google","21":"tokenization_google","22":"tokenization_google","23":"tokenization_google","24":"tokenization_google","25":"tokenization_google","26":"tokenization_google","27":"tokenization_google","28":"tokenization_google","29":"tokenization_google","30":"tokenization_google","31":"tokenization_google","32":"tokenization_google","33":"tokenization_google","34":"tokenization_google","35":"tokenization_google","36":"tokenization_google","37":"tokenization_google","38":"tokenization_google","39":"tokenization_google","40":"tokenization_google","41":"tokenization_google","42":"tokenization_google","43":"tokenization_google","44":"tokenization_google","45":"tokenization_google","46":"tokenization_google","47":"tokenization_google","48":"tokenization_google","49":"tokenization_google","50":"tokenization_google","51":"tokenization_google","52":"tokenization_google","53":"tokenization_google","54":"tokenization_google","55":"tokenization_google","56":"tokenization_google","57":"tokenization_google","58":"tokenization_google","59":"tokenization_google","60":"tokenization_google","61":"tokenization_google","62":"tokenization_google","63":"tokenization_google","64":"tokenization_google","65":"tokenization_google","66":"tokenization_google","67":"tokenization_google","68":"tokenization_google","69":"tokenization_google","70":"tokenization_google","71":"tokenization_google","72":"tokenization_google","73":"tokenization_google","74":"tokenization_google","75":"tokenization_google","76":"tokenization_google","77":"tokenization_google","78":"tokenization_google","79":"tokenization_google","80":"tokenization_google","81":"tokenization_google","82":"tokenization_google","83":"tokenization_google","84":"tokenization_google","85":"tokenization_google","86":"tokenization_google","87":"tokenization_google","88":"tokenization_google","89":"tokenization_google","90":"tokenization_google","91":"tokenization_google","92":"tokenization_google","93":"tokenization_google","94":"tokenization_google","95":"tokenization_google","96":"tokenization_google","97":"tokenization_google","98":"tokenization_google","99":"tokenization_google","100":"tokenization_google","101":"tokenization_google","102":"tokenization_google","103":"tokenization_google","104":"tokenization_google","105":"tokenization_google","106":"tokenization_google","107":"tokenization_google","108":"tokenization_google","109":"tokenization_google","110":"tokenization_google","111":"tokenization_google","112":"tokenization_google","113":"tokenization_google","114":"tokenization_google","115":"tokenization_google","116":"tokenization_google","117":"tokenization_google","118":"tokenization_google","119":"tokenization_google","120":"tokenization_google","121":"tokenization_google","122":"tokenization_google","123":"tokenization_google","124":"tokenization_google","125":"tokenization_google","126":"tokenization_google","127":"tokenization_google","128":"tokenization_google","129":"tokenization_google","130":"tokenization_google","131":"tokenization_google","132":"tokenization_google","133":"tokenization_google","134":"tokenization_google","135":"tokenization_google","136":"tokenization_google","137":"tokenization_google","138":"tokenization_google","139":"tokenization_google","140":"tokenization_google","141":"tokenization_google","142":"tokenization_google","143":"tokenization_google","144":"tokenization_google","145":"tokenization_google","146":"tokenization_google","147":"tokenization_google","148":"tokenization_google","149":"tokenization_google","150":"tokenization_google","151":"tokenization_google","152":"tokenization_google","153":"tokenization_google","154":"tokenization_google","155":"tokenization_google","156":"tokenization_google","157":"tokenization_google","158":"tokenization_google","159":"tokenization_google","160":"tokenization_google","161":"tokenization_google","162":"tokenization_google","163":"tokenization_google","164":"tokenization_google","165":"tokenization_google","166":"tokenization_google","167":"tokenization_google","168":"tokenization_google","169":"tokenization_google","170":"tokenization_google","171":"tokenization_google","172":"tokenization_google","173":"tokenization_google","174":"tokenization_google","175":"tokenization_google","176":"tokenization_google","177":"tokenization_google","178":"tokenization_google","179":"tokenization_google","180":"tokenization_google","181":"tokenization_google","182":"tokenization_google","183":"tokenization_google","184":"tokenization_google","185":"tokenization_google","186":"tokenization_google","187":"tokenization_google","188":"tokenization_google","189":"tokenization_google","190":"tokenization_google","191":"tokenization_google","192":"tokenization_google","193":"tokenization_google","194":"tokenization_google","195":"tokenization_google","196":"tokenization_google","197":"tokenization_google","198":"tokenization_google","199":"tokenization_google","200":"tokenization_google","201":"tokenization_google","202":"tokenization_google","203":"tokenization_google","204":"tokenization_google","205":"tokenization_google","206":"tokenization_google","207":"tokenization_google","208":"tokenization_google","209":"tokenization_google","210":"tokenization_google","211":"tokenization_google"},"obj":{"0":"TnewsProcessor.get_labels","1":"create_instances_from_document_albert","2":"create_masked_lm_predictions","3":"create_masked_lm_predictions","4":"create_masked_lm_predictions","5":"create_masked_lm_predictions_original","6":"create_masked_lm_predictions","7":"create_masked_lm_predictions","8":"","9":"_is_whitespace","10":"_is_control","11":"_is_whitespace","12":"_is_control","13":"","14":"","15":"","16":"","17":"","18":"","19":"","20":"","21":"","22":"","23":"","24":"","25":"","26":"","27":"","28":"","29":"","30":"","31":"","32":"","33":"","34":"","35":"","36":"","37":"","38":"","39":"","40":"","41":"","42":"","43":"","44":"","45":"","46":"","47":"","48":"","49":"","50":"","51":"","52":"","53":"","54":"","55":"","56":"","57":"","58":"","59":"","60":"","61":"","62":"","63":"","64":"","65":"","66":"","67":"","68":"","69":"","70":"","71":"","72":"","73":"","74":"","75":"","76":"","77":"","78":"","79":"","80":"","81":"","82":"","83":"","84":"","85":"","86":"","87":"","88":"","89":"","90":"","91":"","92":"","93":"","94":"","95":"","96":"","97":"","98":"","99":"","100":"","101":"","102":"","103":"","104":"","105":"","106":"","107":"","108":"","109":"","110":"","111":"","112":"","113":"","114":"","115":"","116":"","117":"","118":"","119":"","120":"","121":"","122":"","123":"","124":"","125":"","126":"","127":"","128":"","129":"","130":"","131":"","132":"","133":"","134":"","135":"","136":"","137":"","138":"","139":"","140":"","141":"","142":"","143":"","144":"","145":"","146":"","147":"","148":"","149":"","150":"","151":"","152":"","153":"","154":"","155":"","156":"","157":"","158":"","159":"","160":"","161":"","162":"","163":"","164":"","165":"","166":"","167":"","168":"","169":"","170":"","171":"","172":"","173":"","174":"","175":"","176":"","177":"","178":"","179":"","180":"","181":"","182":"","183":"","184":"","185":"","186":"","187":"","188":"","189":"","190":"","191":"","192":"","193":"","194":"","195":"","196":"","197":"","198":"","199":"","200":"","201":"","202":"","203":"","204":"","205":"","206":"","207":"","208":"","209":"","210":"","211":""},"lnum":{"0":236,"1":295,"2":504,"3":523,"4":557,"5":587,"6":439,"7":428,"8":34,"9":368,"10":380,"11":463,"12":475,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1},"col":{"0":9,"1":7,"2":7,"3":5,"4":13,"5":7,"6":7,"7":0,"8":0,"9":5,"10":5,"11":5,"12":5,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0},"filename":{"0":"classifier_utils.py","1":"create_pretraining_data.py","2":"create_pretraining_data.py","3":"create_pretraining_data.py","4":"create_pretraining_data.py","5":"create_pretraining_data.py","6":"create_pretraining_data_google.py","7":"create_pretraining_data_google.py","8":"run_classifier_clue.py","9":"tokenization.py","10":"tokenization.py","11":"tokenization_google.py","12":"tokenization_google.py","13":"tokenization_google.py","14":"tokenization_google.py","15":"tokenization_google.py","16":"tokenization_google.py","17":"tokenization_google.py","18":"tokenization_google.py","19":"tokenization_google.py","20":"tokenization_google.py","21":"tokenization_google.py","22":"tokenization_google.py","23":"tokenization_google.py","24":"tokenization_google.py","25":"tokenization_google.py","26":"tokenization_google.py","27":"tokenization_google.py","28":"tokenization_google.py","29":"tokenization_google.py","30":"tokenization_google.py","31":"tokenization_google.py","32":"tokenization_google.py","33":"tokenization_google.py","34":"tokenization_google.py","35":"tokenization_google.py","36":"tokenization_google.py","37":"tokenization_google.py","38":"tokenization_google.py","39":"tokenization_google.py","40":"tokenization_google.py","41":"tokenization_google.py","42":"tokenization_google.py","43":"tokenization_google.py","44":"tokenization_google.py","45":"tokenization_google.py","46":"tokenization_google.py","47":"tokenization_google.py","48":"tokenization_google.py","49":"tokenization_google.py","50":"tokenization_google.py","51":"tokenization_google.py","52":"tokenization_google.py","53":"tokenization_google.py","54":"tokenization_google.py","55":"tokenization_google.py","56":"tokenization_google.py","57":"tokenization_google.py","58":"tokenization_google.py","59":"tokenization_google.py","60":"tokenization_google.py","61":"tokenization_google.py","62":"tokenization_google.py","63":"tokenization_google.py","64":"tokenization_google.py","65":"tokenization_google.py","66":"tokenization_google.py","67":"tokenization_google.py","68":"tokenization_google.py","69":"tokenization_google.py","70":"tokenization_google.py","71":"tokenization_google.py","72":"tokenization_google.py","73":"tokenization_google.py","74":"tokenization_google.py","75":"tokenization_google.py","76":"tokenization_google.py","77":"tokenization_google.py","78":"tokenization_google.py","79":"tokenization_google.py","80":"tokenization_google.py","81":"tokenization_google.py","82":"tokenization_google.py","83":"tokenization_google.py","84":"tokenization_google.py","85":"tokenization_google.py","86":"tokenization_google.py","87":"tokenization_google.py","88":"tokenization_google.py","89":"tokenization_google.py","90":"tokenization_google.py","91":"tokenization_google.py","92":"tokenization_google.py","93":"tokenization_google.py","94":"tokenization_google.py","95":"tokenization_google.py","96":"tokenization_google.py","97":"tokenization_google.py","98":"tokenization_google.py","99":"tokenization_google.py","100":"tokenization_google.py","101":"tokenization_google.py","102":"tokenization_google.py","103":"tokenization_google.py","104":"tokenization_google.py","105":"tokenization_google.py","106":"tokenization_google.py","107":"tokenization_google.py","108":"tokenization_google.py","109":"tokenization_google.py","110":"tokenization_google.py","111":"tokenization_google.py","112":"tokenization_google.py","113":"tokenization_google.py","114":"tokenization_google.py","115":"tokenization_google.py","116":"tokenization_google.py","117":"tokenization_google.py","118":"tokenization_google.py","119":"tokenization_google.py","120":"tokenization_google.py","121":"tokenization_google.py","122":"tokenization_google.py","123":"tokenization_google.py","124":"tokenization_google.py","125":"tokenization_google.py","126":"tokenization_google.py","127":"tokenization_google.py","128":"tokenization_google.py","129":"tokenization_google.py","130":"tokenization_google.py","131":"tokenization_google.py","132":"tokenization_google.py","133":"tokenization_google.py","134":"tokenization_google.py","135":"tokenization_google.py","136":"tokenization_google.py","137":"tokenization_google.py","138":"tokenization_google.py","139":"tokenization_google.py","140":"tokenization_google.py","141":"tokenization_google.py","142":"tokenization_google.py","143":"tokenization_google.py","144":"tokenization_google.py","145":"tokenization_google.py","146":"tokenization_google.py","147":"tokenization_google.py","148":"tokenization_google.py","149":"tokenization_google.py","150":"tokenization_google.py","151":"tokenization_google.py","152":"tokenization_google.py","153":"tokenization_google.py","154":"tokenization_google.py","155":"tokenization_google.py","156":"tokenization_google.py","157":"tokenization_google.py","158":"tokenization_google.py","159":"tokenization_google.py","160":"tokenization_google.py","161":"tokenization_google.py","162":"tokenization_google.py","163":"tokenization_google.py","164":"tokenization_google.py","165":"tokenization_google.py","166":"tokenization_google.py","167":"tokenization_google.py","168":"tokenization_google.py","169":"tokenization_google.py","170":"tokenization_google.py","171":"tokenization_google.py","172":"tokenization_google.py","173":"tokenization_google.py","174":"tokenization_google.py","175":"tokenization_google.py","176":"tokenization_google.py","177":"tokenization_google.py","178":"tokenization_google.py","179":"tokenization_google.py","180":"tokenization_google.py","181":"tokenization_google.py","182":"tokenization_google.py","183":"tokenization_google.py","184":"tokenization_google.py","185":"tokenization_google.py","186":"tokenization_google.py","187":"tokenization_google.py","188":"tokenization_google.py","189":"tokenization_google.py","190":"tokenization_google.py","191":"tokenization_google.py","192":"tokenization_google.py","193":"tokenization_google.py","194":"tokenization_google.py","195":"tokenization_google.py","196":"tokenization_google.py","197":"tokenization_google.py","198":"tokenization_google.py","199":"tokenization_google.py","200":"tokenization_google.py","201":"tokenization_google.py","202":"tokenization_google.py","203":"tokenization_google.py","204":"tokenization_google.py","205":"tokenization_google.py","206":"tokenization_google.py","207":"tokenization_google.py","208":"tokenization_google.py","209":"tokenization_google.py","210":"tokenization_google.py","211":"tokenization_google.py"},"symbol":{"0":"consider-using-in","1":"singleton-comparison","2":"consider-using-in","3":"singleton-comparison","4":"singleton-comparison","5":"consider-using-in","6":"consider-using-in","7":"too-many-branches","8":"wildcard-import","9":"consider-using-in","10":"consider-using-in","11":"consider-using-in","12":"consider-using-in","13":"duplicate-code","14":"duplicate-code","15":"duplicate-code","16":"duplicate-code","17":"duplicate-code","18":"duplicate-code","19":"duplicate-code","20":"duplicate-code","21":"duplicate-code","22":"duplicate-code","23":"duplicate-code","24":"duplicate-code","25":"duplicate-code","26":"duplicate-code","27":"duplicate-code","28":"duplicate-code","29":"duplicate-code","30":"duplicate-code","31":"duplicate-code","32":"duplicate-code","33":"duplicate-code","34":"duplicate-code","35":"duplicate-code","36":"duplicate-code","37":"duplicate-code","38":"duplicate-code","39":"duplicate-code","40":"duplicate-code","41":"duplicate-code","42":"duplicate-code","43":"duplicate-code","44":"duplicate-code","45":"duplicate-code","46":"duplicate-code","47":"duplicate-code","48":"duplicate-code","49":"duplicate-code","50":"duplicate-code","51":"duplicate-code","52":"duplicate-code","53":"duplicate-code","54":"duplicate-code","55":"duplicate-code","56":"duplicate-code","57":"duplicate-code","58":"duplicate-code","59":"duplicate-code","60":"duplicate-code","61":"duplicate-code","62":"duplicate-code","63":"duplicate-code","64":"duplicate-code","65":"duplicate-code","66":"duplicate-code","67":"duplicate-code","68":"duplicate-code","69":"duplicate-code","70":"duplicate-code","71":"duplicate-code","72":"duplicate-code","73":"duplicate-code","74":"duplicate-code","75":"duplicate-code","76":"duplicate-code","77":"duplicate-code","78":"duplicate-code","79":"duplicate-code","80":"duplicate-code","81":"duplicate-code","82":"duplicate-code","83":"duplicate-code","84":"duplicate-code","85":"duplicate-code","86":"duplicate-code","87":"duplicate-code","88":"duplicate-code","89":"duplicate-code","90":"duplicate-code","91":"duplicate-code","92":"duplicate-code","93":"duplicate-code","94":"duplicate-code","95":"duplicate-code","96":"duplicate-code","97":"duplicate-code","98":"duplicate-code","99":"duplicate-code","100":"duplicate-code","101":"duplicate-code","102":"duplicate-code","103":"duplicate-code","104":"duplicate-code","105":"duplicate-code","106":"duplicate-code","107":"duplicate-code","108":"duplicate-code","109":"duplicate-code","110":"duplicate-code","111":"duplicate-code","112":"duplicate-code","113":"duplicate-code","114":"duplicate-code","115":"duplicate-code","116":"duplicate-code","117":"duplicate-code","118":"duplicate-code","119":"duplicate-code","120":"duplicate-code","121":"duplicate-code","122":"duplicate-code","123":"duplicate-code","124":"duplicate-code","125":"duplicate-code","126":"duplicate-code","127":"duplicate-code","128":"duplicate-code","129":"duplicate-code","130":"duplicate-code","131":"duplicate-code","132":"duplicate-code","133":"duplicate-code","134":"duplicate-code","135":"duplicate-code","136":"duplicate-code","137":"duplicate-code","138":"duplicate-code","139":"duplicate-code","140":"duplicate-code","141":"duplicate-code","142":"duplicate-code","143":"duplicate-code","144":"duplicate-code","145":"duplicate-code","146":"duplicate-code","147":"duplicate-code","148":"duplicate-code","149":"duplicate-code","150":"duplicate-code","151":"duplicate-code","152":"duplicate-code","153":"duplicate-code","154":"duplicate-code","155":"duplicate-code","156":"duplicate-code","157":"duplicate-code","158":"duplicate-code","159":"duplicate-code","160":"duplicate-code","161":"duplicate-code","162":"duplicate-code","163":"duplicate-code","164":"duplicate-code","165":"duplicate-code","166":"duplicate-code","167":"duplicate-code","168":"duplicate-code","169":"duplicate-code","170":"duplicate-code","171":"duplicate-code","172":"duplicate-code","173":"duplicate-code","174":"duplicate-code","175":"duplicate-code","176":"duplicate-code","177":"duplicate-code","178":"duplicate-code","179":"duplicate-code","180":"duplicate-code","181":"duplicate-code","182":"duplicate-code","183":"duplicate-code","184":"duplicate-code","185":"duplicate-code","186":"duplicate-code","187":"duplicate-code","188":"duplicate-code","189":"duplicate-code","190":"duplicate-code","191":"duplicate-code","192":"duplicate-code","193":"duplicate-code","194":"duplicate-code","195":"duplicate-code","196":"duplicate-code","197":"duplicate-code","198":"duplicate-code","199":"duplicate-code","200":"duplicate-code","201":"duplicate-code","202":"duplicate-code","203":"duplicate-code","204":"duplicate-code","205":"duplicate-code","206":"duplicate-code","207":"duplicate-code","208":"duplicate-code","209":"duplicate-code","210":"duplicate-code","211":"duplicate-code"},"text":{"0":"Consider merging these comparisons with \"in\" to 'i in (5, 11)'","1":"Comparison 'FLAGS.non_chinese == False' should be 'FLAGS.non_chinese is False' if checking for the singleton value False, or 'not FLAGS.non_chinese' if testing for falsiness","2":"Consider merging these comparisons with \"in\" to \"token in ('[CLS]', '[SEP]')\"","3":"Comparison 'FLAGS.non_chinese == False' should be 'FLAGS.non_chinese is False' if checking for the singleton value False, or 'not FLAGS.non_chinese' if testing for falsiness","4":"Comparison 'FLAGS.non_chinese == False' should be 'FLAGS.non_chinese is False' if checking for the singleton value False, or 'not FLAGS.non_chinese' if testing for falsiness","5":"Consider merging these comparisons with \"in\" to \"token in ('[CLS]', '[SEP]')\"","6":"Consider merging these comparisons with \"in\" to \"token in ('[CLS]', '[SEP]')\"","7":"Too many branches (17\/12)","8":"Wildcard import classifier_utils","9":"Consider merging these comparisons with \"in\" to \"char in (' ', '\\\\t', '\\\\n', '\\\\r')\"","10":"Consider merging these comparisons with \"in\" to \"char in ('\\\\t', '\\\\n', '\\\\r')\"","11":"Consider merging these comparisons with \"in\" to \"char in (' ', '\\\\t', '\\\\n', '\\\\r')\"","12":"Consider merging these comparisons with \"in\" to \"char in ('\\\\t', '\\\\n', '\\\\r')\"","13":"Similar lines in 2 files\n==run_pretraining_google:29\n==run_pretraining_google_fast:29\nimport optimization_google as optimization\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"input_file\", None,\n    \"Input TF example files (can be a glob or comma separated).\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\nflags.DEFINE_string(\n    \"export_dir\", None,\n    \"The output directory where the saved models will be written.\")\n## Other parameters\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained ALBERT model).\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 512,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded. Must match data generation.\")\n\nflags.DEFINE_integer(\n    \"max_predictions_per_seq\", 20,\n    \"Maximum number of masked LM predictions per sequence. \"\n    \"Must match data generation.\")\n\nflags.DEFINE_bool(\"do_train\", True, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 4096, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 64, \"Total batch size for eval.\")\n\nflags.DEFINE_enum(\"optimizer\", \"lamb\", [\"adamw\", \"lamb\"],\n                  \"The optimizer for training.\")\n\nflags.DEFINE_float(\"learning_rate\", 0.00176, \"The initial learning rate.\")\n\nflags.DEFINE_float(\"poly_power\", 1.0, \"The power of poly decay.\")\n\nflags.DEFINE_integer(\"num_train_steps\", 125000, \"Number of training steps.\")\n\nflags.DEFINE_integer(\"num_warmup_steps\", 3125, \"Number of warmup steps.\")\n\nflags.DEFINE_integer(\"start_warmup_step\", 0, \"The starting step of warmup.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 5000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\"max_eval_steps\", 100, \"Maximum number of eval steps.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU\/CPU.\")\n\nflags.DEFINE_bool(\"init_from_group0\", False, \"Whether to initialize\"\n                  \"parameters of other groups from group 0\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc:\/\/ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\nflags.DEFINE_float(\n    \"masked_lm_budget\", 0,\n    \"If >0, the ratio of masked ngrams to unmasked ngrams. Default 0,\"\n    \"for offline masking\")\n\n\ndef model_fn_builder(albert_config, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings, optimizer, poly_power,\n                     start_warmup_step):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    masked_lm_positions = features[\"masked_lm_positions\"]\n    masked_lm_ids = features[\"masked_lm_ids\"]\n    masked_lm_weights = features[\"masked_lm_weights\"]\n    # Note: We keep this feature name `next_sentence_labels` to be compatible\n    # with the original data created by lanzhzh@. However, in the ALBERT case\n    # it does represent sentence_order_labels.\n    sentence_order_labels = features[\"next_sentence_labels\"]\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    model = modeling.AlbertModel(\n        config=albert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    (masked_lm_loss, masked_lm_example_loss,\n     masked_lm_log_probs) = get_masked_lm_output(albert_config,\n                                                 model.get_sequence_output(),\n                                                 model.get_embedding_table(),\n                                                 masked_lm_positions,\n                                                 masked_lm_ids,\n                                                 masked_lm_weights)\n\n    (sentence_order_loss, sentence_order_example_loss,\n     sentence_order_log_probs) = get_sentence_order_output(\n         albert_config, model.get_pooled_output(), sentence_order_labels)\n\n    total_loss = masked_lm_loss + sentence_order_loss\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      tf.logging.info(\"number of hidden group %d to initialize\",\n                      albert_config.num_hidden_groups)\n      num_of_initialize_group = 1\n      if FLAGS.init_from_group0:\n        num_of_initialize_group = albert_config.num_hidden_groups\n        if albert_config.net_structure_type > 0:\n          num_of_initialize_group = albert_config.num_hidden_layers\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(\n              tvars, init_checkpoint, num_of_initialize_group)\n      if use_tpu:\n\n        def tpu_scaffold():\n          for gid in range(num_of_initialize_group):\n            tf.logging.info(\"initialize the %dth layer\", gid)\n            tf.logging.info(assignment_map[gid])\n            tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        for gid in range(num_of_initialize_group):\n          tf.logging.info(\"initialize the %dth layer\", gid)\n          tf.logging.info(assignment_map[gid])\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps,\n          use_tpu, optimizer, poly_power, start_warmup_step)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(*args):\n        \"\"\"Computes the loss and accuracy of the model.\"\"\"\n        (masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n         masked_lm_weights, sentence_order_example_loss,\n         sentence_order_log_probs, sentence_order_labels) = args[:7]\n\n\n        masked_lm_log_probs = tf.reshape(masked_lm_log_probs,\n                                         [-1, masked_lm_log_probs.shape[-1]])\n        masked_lm_predictions = tf.argmax(\n            masked_lm_log_probs, axis=-1, output_type=tf.int32)\n        masked_lm_example_loss = tf.reshape(masked_lm_example_loss, [-1])\n        masked_lm_ids = tf.reshape(masked_lm_ids, [-1])\n        masked_lm_weights = tf.reshape(masked_lm_weights, [-1])\n        masked_lm_accuracy = tf.metrics.accuracy(\n            labels=masked_lm_ids,\n            predictions=masked_lm_predictions,\n            weights=masked_lm_weights)\n        masked_lm_mean_loss = tf.metrics.mean(\n            values=masked_lm_example_loss, weights=masked_lm_weights)\n\n        metrics = {\n            \"masked_lm_accuracy\": masked_lm_accuracy,\n            \"masked_lm_loss\": masked_lm_mean_loss,\n        }\n\n        sentence_order_log_probs = tf.reshape(\n            sentence_order_log_probs, [-1, sentence_order_log_probs.shape[-1]])\n        sentence_order_predictions = tf.argmax(\n            sentence_order_log_probs, axis=-1, output_type=tf.int32)\n        sentence_order_labels = tf.reshape(sentence_order_labels, [-1])\n        sentence_order_accuracy = tf.metrics.accuracy(\n            labels=sentence_order_labels,\n            predictions=sentence_order_predictions)\n        sentence_order_mean_loss = tf.metrics.mean(\n            values=sentence_order_example_loss)\n        metrics.update({\n            \"sentence_order_accuracy\": sentence_order_accuracy,\n            \"sentence_order_loss\": sentence_order_mean_loss\n        })\n        return metrics\n\n      metric_values = [\n          masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n          masked_lm_weights, sentence_order_example_loss,\n          sentence_order_log_probs, sentence_order_labels\n      ]\n\n      eval_metrics = (metric_fn, metric_values)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\"Only TRAIN and EVAL modes are supported: %s\" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n\ndef get_masked_lm_output(albert_config, input_tensor, output_weights, positions,\n                         label_ids, label_weights):\n  \"\"\"Get loss and log probs for the masked LM.\"\"\"\n  input_tensor = gather_indexes(input_tensor, positions)\n\n\n  with tf.variable_scope(\"cls\/predictions\"):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(\"transform\"):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=albert_config.embedding_size,\n          activation=modeling.get_activation(albert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        \"output_bias\",\n        shape=[albert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    label_ids = tf.reshape(label_ids, [-1])\n    label_weights = tf.reshape(label_weights, [-1])\n\n    one_hot_labels = tf.one_hot(\n        label_ids, depth=albert_config.vocab_size, dtype=tf.float32)\n\n    # The `positions` tensor might be zero-padded (if the sequence is too\n    # short to have the maximum number of predictions). The `label_weights`\n    # tensor has a value of 1.0 for every real prediction and 0.0 for the\n    # padding predictions.\n    per_example_loss = -tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])\n    numerator = tf.reduce_sum(label_weights * per_example_loss)\n    denominator = tf.reduce_sum(label_weights) + 1e-5\n    loss = numerator \/ denominator\n\n  return (loss, per_example_loss, log_probs)\n\n\ndef get_sentence_order_output(albert_config, input_tensor, labels):\n  \"\"\"Get loss and log probs for the next sentence prediction.\"\"\"\n\n  # Simple binary classification. Note that 0 is \"next sentence\" and 1 is\n  # \"random sentence\". This weight matrix is not used after pre-training.\n  with tf.variable_scope(\"cls\/seq_relationship\"):\n    output_weights = tf.get_variable(\n        \"output_weights\",\n        shape=[2, albert_config.hidden_size],\n        initializer=modeling.create_initializer(\n            albert_config.initializer_range))\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    labels = tf.reshape(labels, [-1])\n    one_hot_labels = tf.one_hot(labels, depth=2, dtype=tf.float32)\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n    return (loss, per_example_loss, log_probs)\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef input_fn_builder(input_files,\n                     max_seq_length,\n                     max_predictions_per_seq,\n                     is_training,\n                     num_cpu_threads=4):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    name_to_features = {\n        \"input_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"input_mask\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"segment_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        # Note: We keep this feature name `next_sentence_labels` to be\n        # compatible with the original data created by lanzhzh@. However, in\n        # the ALBERT case it does represent sentence_order_labels.\n        \"next_sentence_labels\": tf.FixedLenFeature([1], tf.int64),\n    }\n\n    if FLAGS.masked_lm_budget:\n      name_to_features.update({\n          \"token_boundary\":\n              tf.FixedLenFeature([max_seq_length], tf.int64)})\n    else:\n      name_to_features.update({\n          \"masked_lm_positions\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_ids\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_weights\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.float32)})\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    if is_training:\n      d = tf.data.Dataset.from_tensor_slices(tf.constant(input_files))\n      d = d.repeat()\n      d = d.shuffle(buffer_size=len(input_files))\n\n      # `cycle_length` is the number of parallel files that get read.\n      cycle_length = min(num_cpu_threads, len(input_files))\n\n      # `sloppy` mode means that the interleaving is not exact. This adds\n      # even more randomness to the training pipeline.\n      d = d.apply(\n          tf.contrib.data.parallel_interleave(\n              tf.data.TFRecordDataset,\n              sloppy=is_training,\n              cycle_length=cycle_length))\n      d = d.shuffle(buffer_size=100)\n    else:\n      d = tf.data.TFRecordDataset(input_files)\n      # Since we evaluate for a fixed number of steps we don't want to encounter\n      # out-of-range exceptions.\n      d = d.repeat()\n\n    # We must `drop_remainder` on training because the TPU requires fixed\n    # size dimensions. For eval, we assume we are evaluating on the CPU or GPU\n    # and we *don't* want to drop the remainder, otherwise we wont cover\n    # every sample.\n    d = d.apply(\n        tf.data.experimental.map_and_batch_with_legacy_function(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            num_parallel_batches=num_cpu_threads,\n            drop_remainder=True))\n    tf.logging.info(d)\n    return d\n\n  return input_fn\n\n\ndef _decode_record(record, name_to_features):\n  \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n  example = tf.parse_single_example(record, name_to_features)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in list(example.keys()):\n    t = example[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    example[name] = t\n\n  return example\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  if not FLAGS.do_train and not FLAGS.do_eval:\n    raise ValueError(\"At least one of `do_train` or `do_eval` must be True.\")\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Input Files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\" % input_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  model_fn = model_fn_builder(\n      albert_config=albert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.num_train_steps,\n      num_warmup_steps=FLAGS.num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      optimizer=FLAGS.optimizer,\n      poly_power=FLAGS.poly_power,\n      start_warmup_step=FLAGS.start_warmup_step)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size)\n\n  if FLAGS.do_train:\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    train_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=True)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)\n\n  if FLAGS.do_eval:\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n    global_step = -1\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    tf.gfile.MakeDirs(FLAGS.export_dir)\n    eval_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=False)\n    while global_step < FLAGS.num_train_steps:\n      if estimator.latest_checkpoint() is None:\n        tf.logging.info(\"No checkpoint found yet. Sleeping.\")\n        time.sleep(1)\n      else:\n        result = estimator.evaluate(\n            input_fn=eval_input_fn, steps=FLAGS.max_eval_steps)\n        global_step = result[\"global_step\"]\n        tf.logging.info(\"***** Eval results *****\")\n        for key in sorted(result.keys()):\n          tf.logging.info(\"  %s = %s\", key, str(result[key]))\n          writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()","14":"Similar lines in 2 files\n==modeling_google:325\n==modeling_google_fast:327\n  else:\n    raise ValueError(\"Unsupported activation: %s\" % act)\n\n\ndef get_assignment_map_from_checkpoint(tvars, init_checkpoint, num_of_group=0):\n  \"\"\"Compute the union of the current variables and checkpoint variables.\"\"\"\n  assignment_map = {}\n  initialized_variable_names = {}\n\n  name_to_variable = collections.OrderedDict()\n  for var in tvars:\n    name = var.name\n    m = re.match(\"^(.*):\\\\d+$\", name)\n    if m is not None:\n      name = m.group(1)\n    name_to_variable[name] = var\n  init_vars = tf.train.list_variables(init_checkpoint)\n  init_vars_name = [name for (name, _) in init_vars]\n\n  if num_of_group > 0:\n    assignment_map = []\n    for gid in range(num_of_group):\n      assignment_map.append(collections.OrderedDict())\n  else:\n    assignment_map = collections.OrderedDict()\n\n  for name in name_to_variable:\n    if name in init_vars_name:\n      tvar_name = name\n    elif (re.sub(r\"\/group_\\d+\/\", \"\/group_0\/\",\n                 six.ensure_str(name)) in init_vars_name and\n          num_of_group > 1):\n      tvar_name = re.sub(r\"\/group_\\d+\/\", \"\/group_0\/\", six.ensure_str(name))\n    elif (re.sub(r\"\/ffn_\\d+\/\", \"\/ffn_1\/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"\/ffn_\\d+\/\", \"\/ffn_1\/\", six.ensure_str(name))\n    elif (re.sub(r\"\/attention_\\d+\/\", \"\/attention_1\/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"\/attention_\\d+\/\", \"\/attention_1\/\",\n                         six.ensure_str(name))\n    else:\n      tf.logging.info(\"name %s does not get matched\", name)\n      continue\n    tf.logging.info(\"name %s match to %s\", name, tvar_name)\n    if num_of_group > 0:\n      group_matched = False\n      for gid in range(1, num_of_group):\n        if ((\"\/group_\" + str(gid) + \"\/\" in name) or\n            (\"\/ffn_\" + str(gid) + \"\/\" in name) or\n            (\"\/attention_\" + str(gid) + \"\/\" in name)):\n          group_matched = True\n          tf.logging.info(\"%s belongs to %dth\", name, gid)\n          assignment_map[gid][tvar_name] = name\n      if not group_matched:\n        assignment_map[0][tvar_name] = name\n    else:\n      assignment_map[tvar_name] = name\n    initialized_variable_names[name] = 1\n    initialized_variable_names[six.ensure_str(name) + \":0\"] = 1\n\n  return (assignment_map, initialized_variable_names)\n\n\ndef dropout(input_tensor, dropout_prob):\n  \"\"\"Perform dropout.\n  Args:\n    input_tensor: float Tensor.\n    dropout_prob: Python float. The probability of dropping out a value (NOT of\n      *keeping* a dimension as in `tf.nn.dropout`).\n  Returns:\n    A version of `input_tensor` with dropout applied.\n  \"\"\"\n  if dropout_prob is None or dropout_prob == 0.0:\n    return input_tensor\n\n  output = tf.nn.dropout(input_tensor, rate=dropout_prob)\n  return output\n\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n  \"\"\"Runs layer normalization followed by dropout.\"\"\"\n  output_tensor = layer_norm(input_tensor, name)\n  output_tensor = dropout(output_tensor, dropout_prob)\n  return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n  \"\"\"Creates a `truncated_normal_initializer` with the given range.\"\"\"\n  return tf.truncated_normal_initializer(stddev=initializer_range)\n\n\ndef get_timing_signal_1d_given_position(channels,\n                                        position,\n                                        min_timescale=1.0,\n                                        max_timescale=1.0e4):\n  \"\"\"Get sinusoids of diff frequencies, with timing position given.\n  Adapted from add_timing_signal_1d_given_position in\n  \/\/third_party\/py\/tensor2tensor\/layers\/common_attention.py\n  Args:\n    channels: scalar, size of timing embeddings to create. The number of\n        different timescales is equal to channels \/ 2.\n    position: a Tensor with shape [batch, seq_len]\n    min_timescale: a float\n    max_timescale: a float\n  Returns:\n    a Tensor of timing signals [batch, seq_len, channels]\n  \"\"\"\n  num_timescales = channels \/\/ 2\n  log_timescale_increment = (\n      math.log(float(max_timescale) \/ float(min_timescale)) \/\n      (tf.to_float(num_timescales) - 1))\n  inv_timescales = min_timescale * tf.exp(\n      tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)\n  scaled_time = (\n      tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(\n          tf.expand_dims(inv_timescales, 0), 0))\n  signal = tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)\n  signal = tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])\n  return signal\n\n\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=\"word_embeddings\",\n                     use_one_hot_embeddings=False):\n  \"\"\"Looks up words embeddings for id tensor.\n  Args:\n    input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n      ids.\n    vocab_size: int. Size of the embedding vocabulary.\n    embedding_size: int. Width of the word embeddings.\n    initializer_range: float. Embedding initialization range.\n    word_embedding_name: string. Name of the embedding table.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.nn.embedding_lookup()`.\n  Returns:\n    float Tensor of shape [batch_size, seq_length, embedding_size].\n  \"\"\"\n  # This function assumes that the input is of shape [batch_size, seq_length,\n  # num_inputs].\n  #\n  # If the input is a 2D tensor of shape [batch_size, seq_length], we\n  # reshape to [batch_size, seq_length, 1].\n  if input_ids.shape.ndims == 2:\n    input_ids = tf.expand_dims(input_ids, axis=[-1])\n\n  embedding_table = tf.get_variable(\n      name=word_embedding_name,\n      shape=[vocab_size, embedding_size],\n      initializer=create_initializer(initializer_range))\n\n  if use_one_hot_embeddings:\n    flat_input_ids = tf.reshape(input_ids, [-1])\n    one_hot_input_ids = tf.one_hot(flat_input_ids, depth=vocab_size)\n    output = tf.matmul(one_hot_input_ids, embedding_table)\n  else:\n    output = tf.nn.embedding_lookup(embedding_table, input_ids)\n\n  input_shape = get_shape_list(input_ids)\n\n  output = tf.reshape(output,\n                      input_shape[0:-1] + [input_shape[-1] * embedding_size])\n  return (output, embedding_table)\n\n\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=\"token_type_embeddings\",\n                            use_position_embeddings=True,\n                            position_embedding_name=\"position_embeddings\",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1):\n  \"\"\"Performs various post-processing on a word embedding tensor.\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length,\n      embedding_size].\n    use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n    token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      Must be specified if `use_token_type` is True.\n    token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n    token_type_embedding_name: string. The name of the embedding table variable\n      for token type ids.\n    use_position_embeddings: bool. Whether to add position embeddings for the\n      position of each token in the sequence.\n    position_embedding_name: string. The name of the embedding table variable\n      for positional embeddings.\n    initializer_range: float. Range of the weight initialization.\n    max_position_embeddings: int. Maximum sequence length that might ever be\n      used with this model. This can be longer than the sequence length of\n      input_tensor, but cannot be shorter.\n    dropout_prob: float. Dropout probability applied to the final output tensor.\n  Returns:\n    float tensor with same shape as `input_tensor`.\n  Raises:\n    ValueError: One of the tensor shapes or input values is invalid.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  width = input_shape[2]\n\n  output = input_tensor\n\n  if use_token_type:\n    if token_type_ids is None:\n      raise ValueError(\"`token_type_ids` must be specified if\"\n                       \"`use_token_type` is True.\")\n    token_type_table = tf.get_variable(\n        name=token_type_embedding_name,\n        shape=[token_type_vocab_size, width],\n        initializer=create_initializer(initializer_range))\n    # This vocab will be small so we always do one-hot here, since it is always\n    # faster for a small vocabulary.\n    flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n    one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n    token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n    token_type_embeddings = tf.reshape(token_type_embeddings,\n                                       [batch_size, seq_length, width])\n    output += token_type_embeddings\n\n  if use_position_embeddings:\n    assert_op = tf.assert_less_equal(seq_length, max_position_embeddings)\n    with tf.control_dependencies([assert_op]):\n      full_position_embeddings = tf.get_variable(\n          name=position_embedding_name,\n          shape=[max_position_embeddings, width],\n          initializer=create_initializer(initializer_range))\n      # Since the position embedding table is a learned variable, we create it\n      # using a (long) sequence length `max_position_embeddings`. The actual\n      # sequence length might be shorter than this, for faster training of\n      # tasks that do not have long sequences.\n      #\n      # So `full_position_embeddings` is effectively an embedding table\n      # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n      # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n      # perform a slice.\n      position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                     [seq_length, -1])\n      num_dims = len(output.shape.as_list())\n\n      # Only the last two dimensions are relevant (`seq_length` and `width`), so\n      # we broadcast among the first dimensions, which is typically just\n      # the batch size.\n      position_broadcast_shape = []\n      for _ in range(num_dims - 2):\n        position_broadcast_shape.append(1)\n      position_broadcast_shape.extend([seq_length, width])\n      position_embeddings = tf.reshape(position_embeddings,\n                                       position_broadcast_shape)\n      output += position_embeddings\n\n  output = layer_norm_and_dropout(output, dropout_prob)\n  return output\n\n\ndef dense_layer_3d(input_tensor,\n                   num_attention_heads,\n                   head_size,\n                   initializer,\n                   activation,\n                   name=None):\n  \"\"\"A dense layer with 3D kernel.\n  Args:\n    input_tensor: float Tensor of shape [batch, seq_length, hidden_size].\n    num_attention_heads: Number of attention heads.\n    head_size: The size per attention head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n\n  input_shape = get_shape_list(input_tensor)\n  hidden_size = input_shape[2]\n\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[hidden_size, num_attention_heads * head_size],\n        initializer=initializer)\n    w = tf.reshape(w, [hidden_size, num_attention_heads, head_size])\n    b = tf.get_variable(\n        name=\"bias\",\n        shape=[num_attention_heads * head_size],\n        initializer=tf.zeros_initializer)\n    b = tf.reshape(b, [num_attention_heads, head_size])\n    ret = tf.einsum(\"BFH,HND->BFND\", input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dense_layer_3d_proj(input_tensor,\n                        hidden_size,\n                        head_size,\n                        initializer,\n                        activation,\n                        name=None):\n  \"\"\"A dense layer with 3D kernel for projection.\n  Args:\n    input_tensor: float Tensor of shape [batch,from_seq_length,\n      num_attention_heads, size_per_head].\n    hidden_size: The size of hidden layer.\n    num_attention_heads: The size of output dimension.\n    head_size: The size of head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor)\n  num_attention_heads= input_shape[2]\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[num_attention_heads * head_size, hidden_size],\n        initializer=initializer)\n    w = tf.reshape(w, [num_attention_heads, head_size, hidden_size])\n    b = tf.get_variable(\n        name=\"bias\", shape=[hidden_size], initializer=tf.zeros_initializer)\n    ret = tf.einsum(\"BFND,NDH->BFH\", input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n","15":"Similar lines in 2 files\n==modeling_google:20\n==modeling_google_fast:20\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport numpy as np\nimport six\nfrom six.moves import range\nimport tensorflow as tf\n\n\nclass AlbertConfig(object):\n  \"\"\"Configuration for `AlbertModel`.\n  The default settings match the configuration of model `albert_xxlarge`.\n  \"\"\"\n\n  def __init__(self,\n               vocab_size,\n               embedding_size=128,\n               hidden_size=4096,\n               num_hidden_layers=12,\n               num_hidden_groups=1,\n               num_attention_heads=64,\n               intermediate_size=16384,\n               inner_group_num=1,\n               down_scale_factor=1,\n               hidden_act=\"gelu\",\n               hidden_dropout_prob=0,\n               attention_probs_dropout_prob=0,\n               max_position_embeddings=512,\n               type_vocab_size=2,\n               initializer_range=0.02):\n    \"\"\"Constructs AlbertConfig.\n    Args:\n      vocab_size: Vocabulary size of `inputs_ids` in `AlbertModel`.\n      embedding_size: size of voc embeddings.\n      hidden_size: Size of the encoder layers and the pooler layer.\n      num_hidden_layers: Number of hidden layers in the Transformer encoder.\n      num_hidden_groups: Number of group for the hidden layers, parameters in\n        the same group are shared.\n      num_attention_heads: Number of attention heads for each attention layer in\n        the Transformer encoder.\n      intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n        layer in the Transformer encoder.\n      inner_group_num: int, number of inner repetition of attention and ffn.\n      down_scale_factor: float, the scale to apply\n      hidden_act: The non-linear activation function (function or string) in the\n        encoder and pooler.\n      hidden_dropout_prob: The dropout probability for all fully connected\n        layers in the embeddings, encoder, and pooler.\n      attention_probs_dropout_prob: The dropout ratio for the attention\n        probabilities.\n      max_position_embeddings: The maximum sequence length that this model might\n        ever be used with. Typically set this to something large just in case\n        (e.g., 512 or 1024 or 2048).\n      type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n        `AlbertModel`.\n      initializer_range: The stdev of the truncated_normal_initializer for\n        initializing all weight matrices.\n    \"\"\"\n    self.vocab_size = vocab_size\n    self.embedding_size = embedding_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_hidden_groups = num_hidden_groups\n    self.num_attention_heads = num_attention_heads\n    self.inner_group_num = inner_group_num\n    self.down_scale_factor = down_scale_factor\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n\n  @classmethod\n  def from_dict(cls, json_object):\n    \"\"\"Constructs a `AlbertConfig` from a Python dictionary of parameters.\"\"\"\n    config = AlbertConfig(vocab_size=None)\n    for (key, value) in six.iteritems(json_object):\n      config.__dict__[key] = value\n    return config\n\n  @classmethod\n  def from_json_file(cls, json_file):\n    \"\"\"Constructs a `AlbertConfig` from a json file of parameters.\"\"\"\n    with tf.gfile.GFile(json_file, \"r\") as reader:\n      text = reader.read()\n    return cls.from_dict(json.loads(text))\n\n  def to_dict(self):\n    \"\"\"Serializes this instance to a Python dictionary.\"\"\"\n    output = copy.deepcopy(self.__dict__)\n    return output\n\n  def to_json_string(self):\n    \"\"\"Serializes this instance to a JSON string.\"\"\"\n    return json.dumps(self.to_dict(), indent=2, sort_keys=True) + \"\\n\"\n\n\nclass AlbertModel(object):\n  \"\"\"BERT model (\"Bidirectional Encoder Representations from Transformers\").\n  Example usage:\n  ```python\n  # Already been converted from strings into ids\n  input_ids = tf.constant([[31, 51, 99], [15, 5, 0]])\n  input_mask = tf.constant([[1, 1, 1], [1, 1, 0]])\n  token_type_ids = tf.constant([[0, 0, 1], [0, 2, 0]])\n  config = modeling.AlbertConfig(vocab_size=32000, hidden_size=512,\n    num_hidden_layers=8, num_attention_heads=6, intermediate_size=1024)\n  model = modeling.AlbertModel(config=config, is_training=True,\n    input_ids=input_ids, input_mask=input_mask, token_type_ids=token_type_ids)\n  label_embeddings = tf.get_variable(...)\n  pooled_output = model.get_pooled_output()\n  logits = tf.matmul(pooled_output, label_embeddings)\n  ...\n  ```\n  \"\"\"\n\n  def __init__(self,\n               config,\n               is_training,\n               input_ids,\n               input_mask=None,\n               token_type_ids=None,\n               use_one_hot_embeddings=False,\n               scope=None):\n    \"\"\"Constructor for AlbertModel.\n    Args:\n      config: `AlbertConfig` instance.\n      is_training: bool. true for training model, false for eval model. Controls\n        whether dropout will be applied.\n      input_ids: int32 Tensor of shape [batch_size, seq_length].\n      input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n        embeddings or tf.embedding_lookup() for the word embeddings.\n      scope: (optional) variable scope. Defaults to \"bert\".\n    Raises:\n      ValueError: The config is invalid or one of the input tensor shapes\n        is invalid.\n    \"\"\"\n    config = copy.deepcopy(config)\n    if not is_training:\n      config.hidden_dropout_prob = 0.0\n      config.attention_probs_dropout_prob = 0.0\n\n    input_shape = get_shape_list(input_ids, expected_rank=2)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n\n    if input_mask is None:\n      input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    if token_type_ids is None:\n      token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    with tf.variable_scope(scope, default_name=\"bert\"):\n      with tf.variable_scope(\"embeddings\"):\n        # Perform embedding lookup on the word ids.\n        (self.word_embedding_output,\n         self.output_embedding_table) = embedding_lookup(\n            input_ids=input_ids,\n            vocab_size=config.vocab_size,\n            embedding_size=config.embedding_size,\n            initializer_range=config.initializer_range,\n            word_embedding_name=\"word_embeddings\",\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n        # Add positional embeddings and token type embeddings, then layer\n        # normalize and perform dropout.\n        self.embedding_output = embedding_postprocessor(\n            input_tensor=self.word_embedding_output,\n            use_token_type=True,\n            token_type_ids=token_type_ids,\n            token_type_vocab_size=config.type_vocab_size,\n            token_type_embedding_name=\"token_type_embeddings\",\n            use_position_embeddings=True,\n            position_embedding_name=\"position_embeddings\",\n            initializer_range=config.initializer_range,\n            max_position_embeddings=config.max_position_embeddings,\n            dropout_prob=config.hidden_dropout_prob)\n\n      with tf.variable_scope(\"encoder\"):\n\n        # Run the stacked transformer.\n        # `sequence_output` shape = [batch_size, seq_length, hidden_size].\n        self.all_encoder_layers = transformer_model(\n            input_tensor=self.embedding_output,\n            attention_mask=input_mask,\n            hidden_size=config.hidden_size,\n            num_hidden_layers=config.num_hidden_layers,\n            num_hidden_groups=config.num_hidden_groups,\n            num_attention_heads=config.num_attention_heads,\n            intermediate_size=config.intermediate_size,\n            inner_group_num=config.inner_group_num,\n            intermediate_act_fn=get_activation(config.hidden_act),\n            hidden_dropout_prob=config.hidden_dropout_prob,\n            attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n            initializer_range=config.initializer_range,\n            do_return_all_layers=True)\n\n      self.sequence_output = self.all_encoder_layers[-1]\n      # The \"pooler\" converts the encoded sequence tensor of shape\n      # [batch_size, seq_length, hidden_size] to a tensor of shape\n      # [batch_size, hidden_size]. This is necessary for segment-level\n      # (or segment-pair-level) classification tasks where we need a fixed\n      # dimensional representation of the segment.\n      with tf.variable_scope(\"pooler\"):\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token. We assume that this has been pre-trained\n        first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n        self.pooled_output = tf.layers.dense(\n            first_token_tensor,\n            config.hidden_size,\n            activation=tf.tanh,\n            kernel_initializer=create_initializer(config.initializer_range))\n\n  def get_pooled_output(self):\n    return self.pooled_output\n\n  def get_sequence_output(self):\n    \"\"\"Gets final hidden layer of encoder.\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the final hidden of the transformer encoder.\n    \"\"\"\n    return self.sequence_output\n\n  def get_all_encoder_layers(self):\n    return self.all_encoder_layers\n\n  def get_word_embedding_output(self):\n    \"\"\"Get output of the word(piece) embedding lookup.\n    This is BEFORE positional embeddings and token type embeddings have been\n    added.\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the word(piece) embedding layer.\n    \"\"\"\n    return self.word_embedding_output\n\n  def get_embedding_output(self):\n    \"\"\"Gets output of the embedding lookup (i.e., input to the transformer).\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the embedding layer, after summing the word\n      embeddings with the positional embeddings and the token type embeddings,\n      then performing layer normalization. This is the input to the transformer.\n    \"\"\"\n    return self.embedding_output\n\n  def get_embedding_table(self):\n    return self.output_embedding_table\n\n\ndef gelu(x):\n  \"\"\"Gaussian Error Linear Unit.\n  This is a smoother version of the RELU.\n  Original paper: https:\/\/arxiv.org\/abs\/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n  Returns:\n    `x` with the GELU activation applied.\n  \"\"\"\n  cdf = 0.5 * (1.0 + tf.tanh(\n      (np.sqrt(2 \/ np.pi) * (x + 0.044715 * tf.pow(x, 3)))))\n  return x * cdf\n\n\ndef get_activation(activation_string):\n  \"\"\"Maps a string to a Python function, e.g., \"relu\" => `tf.nn.relu`.\n  Args:\n    activation_string: String name of the activation function.\n  Returns:\n    A Python function corresponding to the activation function. If\n    `activation_string` is None, empty, or \"linear\", this will return None.\n    If `activation_string` is not a string, it will return `activation_string`.\n  Raises:\n    ValueError: The `activation_string` does not correspond to a known\n      activation.\n  \"\"\"\n\n  # We assume that anything that\"s not a string is already an activation\n  # function, so we just return it.\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == \"linear\":\n    return None\n  elif act == \"relu\":\n    return tf.nn.relu\n  elif act == \"gelu\":\n    return gelu\n  elif act == \"tanh\":\n    return tf.tanh","16":"Similar lines in 2 files\n==run_classifier:203\n==run_classifier_clue:304\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer):\n  \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n  if isinstance(example, PaddingInputExample):\n    return InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)\n\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in BERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n  return feature\n\n\ndef file_based_convert_examples_to_features(\n    examples, label_list, max_seq_length, tokenizer, output_file):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"label_ids\"] = create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, is_training,\n                                drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  name_to_features = {\n      \"input_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"label_ids\": tf.FixedLenFeature([], tf.int64),\n      \"is_real_example\": tf.FixedLenFeature([], tf.int64),\n  }\n\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n  \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\n\n  # This is a simple heuristic which will always truncate the longer sequence\n  # one token at a time. This makes more sense than truncating an equal percent\n  # of tokens from each, since if one sequence is very short then each token\n  # that's truncated likely contains more information than a longer sequence.\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_length:\n      break\n    if len(tokens_a) > len(tokens_b):\n      tokens_a.pop()\n    else:\n      tokens_b.pop()\n\n\ndef create_model(bert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings):\n  \"\"\"Creates a classification model.\"\"\"\n  model = modeling.BertModel(\n      config=bert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n\n  # In the demo, we are doing a simple classification task on the entire\n  # segment.\n  #\n  # If you want to use the token-level output, use model.get_sequence_output()\n  # instead.\n  output_layer = model.get_pooled_output()\n\n  hidden_size = output_layer.shape[-1].value\n\n  output_weights = tf.get_variable(\n      \"output_weights\", [num_labels, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"output_bias\", [num_labels], initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(\"loss\"):\n    ln_type = bert_config.ln_type\n    if ln_type == 'preln': # add by brightmart, 10-06. if it is preln, we need to an additonal layer: layer normalization as suggested in paper \"ON LAYER NORMALIZATION IN THE TRANSFORMER ARCHITECTURE\"\n        print(\"ln_type is preln. add LN layer.\")","17":"Similar lines in 2 files\n==tokenization:183\n==tokenization_google:278\n    return convert_by_vocab(self.inv_vocab, ids)\n\n\nclass BasicTokenizer(object):\n  \"\"\"Runs basic tokenization (punctuation splitting, lower casing, etc.).\"\"\"\n\n  def __init__(self, do_lower_case=True):\n    \"\"\"Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n    \"\"\"\n    self.do_lower_case = do_lower_case\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text.\"\"\"\n    text = convert_to_unicode(text)\n    text = self._clean_text(text)\n\n    # This was added on November 1st, 2018 for the multilingual and Chinese\n    # models. This is also applied to the English models now, but it doesn't\n    # matter since the English models were not trained on any Chinese data\n    # and generally don't have any Chinese data in them (there are Chinese\n    # characters in the vocabulary because Wikipedia does have some Chinese\n    # words in the English Wikipedia.).\n    text = self._tokenize_chinese_chars(text)\n\n    orig_tokens = whitespace_tokenize(text)\n    split_tokens = []\n    for token in orig_tokens:\n      if self.do_lower_case:\n        token = token.lower()\n        token = self._run_strip_accents(token)\n      split_tokens.extend(self._run_split_on_punc(token))\n\n    output_tokens = whitespace_tokenize(\" \".join(split_tokens))\n    return output_tokens\n\n  def _run_strip_accents(self, text):\n    \"\"\"Strips accents from a piece of text.\"\"\"\n    text = unicodedata.normalize(\"NFD\", text)\n    output = []\n    for char in text:\n      cat = unicodedata.category(char)\n      if cat == \"Mn\":\n        continue\n      output.append(char)\n    return \"\".join(output)\n\n  def _run_split_on_punc(self, text):\n    \"\"\"Splits punctuation on a piece of text.\"\"\"\n    chars = list(text)\n    i = 0\n    start_new_word = True\n    output = []\n    while i < len(chars):\n      char = chars[i]\n      if _is_punctuation(char):\n        output.append([char])\n        start_new_word = True\n      else:\n        if start_new_word:\n          output.append([])\n        start_new_word = False\n        output[-1].append(char)\n      i += 1\n\n    return [\"\".join(x) for x in output]\n\n  def _tokenize_chinese_chars(self, text):\n    \"\"\"Adds whitespace around any CJK character.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if self._is_chinese_char(cp):\n        output.append(\" \")\n        output.append(char)\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n  def _is_chinese_char(self, cp):\n    \"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"\n    # This defines a \"chinese character\" as anything in the CJK Unicode block:\n    #   https:\/\/en.wikipedia.org\/wiki\/CJK_Unified_Ideographs_(Unicode_block)\n    #\n    # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n    # despite its name. The modern Korean Hangul alphabet is a different block,\n    # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n    # space-separated words, so they are not treated specially and handled\n    # like the all of the other languages.\n    if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n        (cp >= 0x3400 and cp <= 0x4DBF) or  #\n        (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n        (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n        (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n        (cp >= 0x2B820 and cp <= 0x2CEAF) or\n        (cp >= 0xF900 and cp <= 0xFAFF) or  #\n        (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n      return True\n\n    return False\n\n  def _clean_text(self, text):\n    \"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if cp == 0 or cp == 0xfffd or _is_control(char):\n        continue\n      if _is_whitespace(char):\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n\nclass WordpieceTokenizer(object):\n  \"\"\"Runs WordPiece tokenziation.\"\"\"\n\n  def __init__(self, vocab, unk_token=\"[UNK]\", max_input_chars_per_word=200):\n    self.vocab = vocab\n    self.unk_token = unk_token\n    self.max_input_chars_per_word = max_input_chars_per_word\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = \"unaffable\"\n      output = [\"un\", \"##aff\", \"##able\"]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    \"\"\"\n\n    text = convert_to_unicode(text)\n\n    output_tokens = []\n    for token in whitespace_tokenize(text):\n      chars = list(token)\n      if len(chars) > self.max_input_chars_per_word:\n        output_tokens.append(self.unk_token)\n        continue\n\n      is_bad = False\n      start = 0\n      sub_tokens = []\n      while start < len(chars):\n        end = len(chars)\n        cur_substr = None\n        while start < end:\n          substr = \"\".join(chars[start:end])\n          if start > 0:\n            substr = \"##\" + substr\n          if substr in self.vocab:\n            cur_substr = substr\n            break\n          end -= 1\n        if cur_substr is None:\n          is_bad = True\n          break\n        sub_tokens.append(cur_substr)\n        start = end\n\n      if is_bad:\n        output_tokens.append(self.unk_token)\n      else:\n        output_tokens.extend(sub_tokens)\n    return output_tokens\n\n\ndef _is_whitespace(char):\n  \"\"\"Checks whether `chars` is a whitespace character.\"\"\"\n  # \\t, \\n, and \\r are technically contorl characters but we treat them\n  # as whitespace since they are generally considered as such.\n  if char == \" \" or char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return True\n  cat = unicodedata.category(char)\n  if cat == \"Zs\":\n    return True\n  return False\n\n\ndef _is_control(char):\n  \"\"\"Checks whether `chars` is a control character.\"\"\"\n  # These are technically control characters but we count them as whitespace\n  # characters.\n  if char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return False\n  cat = unicodedata.category(char)\n  if cat in (\"Cc\", \"Cf\"):\n    return True\n  return False\n\n\ndef _is_punctuation(char):\n  \"\"\"Checks whether `chars` is a punctuation character.\"\"\"\n  cp = ord(char)\n  # We treat all non-letter\/number ASCII as punctuation.\n  # Characters such as \"^\", \"$\", and \"`\" are not in the Unicode\n  # Punctuation class but we treat them as punctuation anyways, for\n  # consistency.\n  if ((cp >= 33 and cp <= 47) or (cp >= 58 and cp <= 64) or\n      (cp >= 91 and cp <= 96) or (cp >= 123 and cp <= 126)):\n    return True\n  cat = unicodedata.category(char)\n  if cat.startswith(\"P\"):\n    return True\n  return False","18":"Similar lines in 2 files\n==modeling_google:697\n==modeling_google_fast:782\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dot_product_attention(q, k, v, bias, dropout_rate=0.0):\n  \"\"\"Dot-product attention.\n  Args:\n    q: Tensor with shape [..., length_q, depth_k].\n    k: Tensor with shape [..., length_kv, depth_k]. Leading dimensions must\n      match with q.\n    v: Tensor with shape [..., length_kv, depth_v] Leading dimensions must\n      match with q.\n    bias: bias Tensor (see attention_bias())\n    dropout_rate: a float.\n  Returns:\n    Tensor with shape [..., length_q, depth_v].\n  \"\"\"\n  logits = tf.matmul(q, k, transpose_b=True)  # [..., length_q, length_kv]\n  logits = tf.multiply(logits, 1.0 \/ math.sqrt(float(get_shape_list(q)[-1])))\n  if bias is not None:\n    # `attention_mask` = [B, T]\n    from_shape = get_shape_list(q)\n    if len(from_shape) == 4:\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], 1], tf.float32)\n    elif len(from_shape) == 5:\n      # from_shape = [B, N, Block_num, block_size, depth]#\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], from_shape[3],\n                                1], tf.float32)\n\n    bias = tf.matmul(broadcast_ones,\n                     tf.cast(bias, tf.float32), transpose_b=True)\n\n    # Since attention_mask is 1.0 for positions we want to attend and 0.0 for\n    # masked positions, this operation will create a tensor which is 0.0 for\n    # positions we want to attend and -10000.0 for masked positions.\n    adder = (1.0 - bias) * -10000.0\n\n    # Since we are adding it to the raw scores before the softmax, this is\n    # effectively the same as removing these entirely.\n    logits += adder\n  else:\n    adder = 0.0\n\n  attention_probs = tf.nn.softmax(logits, name=\"attention_probs\")\n  attention_probs = dropout(attention_probs, dropout_rate)\n  return tf.matmul(attention_probs, v)\n\n\ndef attention_layer(from_tensor,\n                    to_tensor,\n                    attention_mask=None,\n                    num_attention_heads=1,\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,\n                    batch_size=None,\n                    from_seq_length=None,\n                    to_seq_length=None):\n  \"\"\"Performs multi-headed attention from `from_tensor` to `to_tensor`.\n  Args:\n    from_tensor: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    query_act: (optional) Activation function for the query transform.\n    key_act: (optional) Activation function for the key transform.\n    value_act: (optional) Activation function for the value transform.\n    attention_probs_dropout_prob: (optional) float. Dropout probability of the\n      attention probabilities.\n    initializer_range: float. Range of the weight initializer.\n    batch_size: (Optional) int. If the input is 2D, this might be the batch size\n      of the 3D version of the `from_tensor` and `to_tensor`.\n    from_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `from_tensor`.\n    to_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `to_tensor`.\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length, num_attention_heads,\n      size_per_head].\n  Raises:\n    ValueError: Any of the arguments or tensor shapes are invalid.\n  \"\"\"\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  to_shape = get_shape_list(to_tensor, expected_rank=[2, 3])\n  size_per_head = int(from_shape[2]\/num_attention_heads)\n\n  if len(from_shape) != len(to_shape):\n    raise ValueError(\n        \"The rank of `from_tensor` must match the rank of `to_tensor`.\")\n\n  if len(from_shape) == 3:\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n    to_seq_length = to_shape[1]\n  elif len(from_shape) == 2:\n    if (batch_size is None or from_seq_length is None or to_seq_length is None):\n      raise ValueError(\n          \"When passing in rank 2 tensors to attention_layer, the values \"\n          \"for `batch_size`, `from_seq_length`, and `to_seq_length` \"\n          \"must all be specified.\")\n\n  # Scalar dimensions referenced here:\n  #   B = batch size (number of sequences)\n  #   F = `from_tensor` sequence length\n  #   T = `to_tensor` sequence length\n  #   N = `num_attention_heads`\n  #   H = `size_per_head`\n\n  # `query_layer` = [B, F, N, H]\n  q = dense_layer_3d(from_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), query_act, \"query\")\n\n  # `key_layer` = [B, T, N, H]\n  k = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), key_act, \"key\")\n  # `value_layer` = [B, T, N, H]\n  v = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), value_act, \"value\")\n  q = tf.transpose(q, [0, 2, 1, 3])\n  k = tf.transpose(k, [0, 2, 1, 3])\n  v = tf.transpose(v, [0, 2, 1, 3])\n  if attention_mask is not None:\n    attention_mask = tf.reshape(\n        attention_mask, [batch_size, 1, to_seq_length, 1])\n    # 'new_embeddings = [B, N, F, H]'\n  new_embeddings = dot_product_attention(q, k, v, attention_mask,\n                                         attention_probs_dropout_prob)\n\n  return tf.transpose(new_embeddings, [0, 2, 1, 3])\n\n\ndef attention_ffn_block(layer_input,\n                        hidden_size=768,\n                        attention_mask=None,\n                        num_attention_heads=1,\n                        attention_head_size=64,\n                        attention_probs_dropout_prob=0.0,\n                        intermediate_size=3072,\n                        intermediate_act_fn=None,\n                        initializer_range=0.02,\n                        hidden_dropout_prob=0.0):\n  \"\"\"A network with attention-ffn as sub-block.\n  Args:\n    layer_input: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    hidden_size: (optional) int, size of hidden layer.\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    attention_head_size: int. Size of attention head.\n    attention_probs_dropout_prob: float. dropout probability for attention_layer\n    intermediate_size: int. Size of intermediate hidden layer.\n    intermediate_act_fn: (optional) Activation function for the intermediate\n      layer.\n    initializer_range: float. Range of the weight initializer.\n    hidden_dropout_prob: (optional) float. Dropout probability of the hidden\n      layer.\n  Returns:\n    layer output\n  \"\"\"\n\n  with tf.variable_scope(\"attention_1\"):\n    with tf.variable_scope(\"self\"):\n      attention_output = attention_layer(\n          from_tensor=layer_input,\n          to_tensor=layer_input,\n          attention_mask=attention_mask,\n          num_attention_heads=num_attention_heads,\n          attention_probs_dropout_prob=attention_probs_dropout_prob,\n          initializer_range=initializer_range)\n\n    # Run a linear projection of `hidden_size` then add a residual\n    # with `layer_input`.\n    with tf.variable_scope(\"output\"):\n      attention_output = dense_layer_3d_proj(\n          attention_output,\n          hidden_size,\n          attention_head_size,\n          create_initializer(initializer_range),\n          None,\n          name=\"dense\")\n      attention_output = dropout(attention_output, hidden_dropout_prob)\n  attention_output = layer_norm(attention_output + layer_input)\n  with tf.variable_scope(\"ffn_1\"):\n    with tf.variable_scope(\"intermediate\"):\n      intermediate_output = dense_layer_2d(\n          attention_output,\n          intermediate_size,\n          create_initializer(initializer_range),\n          intermediate_act_fn,\n          num_attention_heads=num_attention_heads,","19":"Similar lines in 3 files\n==run_classifier:203\n==run_classifier_clue:304\n==run_classifier_sp_google:433\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer):\n  \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n  if isinstance(example, PaddingInputExample):\n    return InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)\n\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in ALBERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n  return feature\n\n\ndef file_based_convert_examples_to_features(\n    examples, label_list, max_seq_length, tokenizer, output_file):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"label_ids\"] = create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, is_training,\n                                drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  name_to_features = {\n      \"input_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"label_ids\": tf.FixedLenFeature([], tf.int64),\n      \"is_real_example\": tf.FixedLenFeature([], tf.int64),\n  }\n\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n  \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\n\n  # This is a simple heuristic which will always truncate the longer sequence\n  # one token at a time. This makes more sense than truncating an equal percent\n  # of tokens from each, since if one sequence is very short then each token\n  # that's truncated likely contains more information than a longer sequence.\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_length:\n      break\n    if len(tokens_a) > len(tokens_b):\n      tokens_a.pop()\n    else:\n      tokens_b.pop()\n\n","20":"Similar lines in 2 files\n==modeling_google:907\n==modeling_google_fast:994\n      ffn_output = dropout(ffn_output, hidden_dropout_prob)\n  ffn_output = layer_norm(ffn_output + attention_output)\n  return ffn_output\n\n\ndef transformer_model(input_tensor,\n                      attention_mask=None,\n                      hidden_size=768,\n                      num_hidden_layers=12,\n                      num_hidden_groups=12,\n                      num_attention_heads=12,\n                      intermediate_size=3072,\n                      inner_group_num=1,\n                      intermediate_act_fn=\"gelu\",\n                      hidden_dropout_prob=0.1,\n                      attention_probs_dropout_prob=0.1,\n                      initializer_range=0.02,\n                      do_return_all_layers=False):\n  \"\"\"Multi-headed, multi-layer Transformer from \"Attention is All You Need\".\n  This is almost an exact implementation of the original Transformer encoder.\n  See the original paper:\n  https:\/\/arxiv.org\/abs\/1706.03762\n  Also see:\n  https:\/\/github.com\/tensorflow\/tensor2tensor\/blob\/master\/tensor2tensor\/models\/transformer.py\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n      seq_length], with 1 for positions that can be attended to and 0 in\n      positions that should not be.\n    hidden_size: int. Hidden size of the Transformer.\n    num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n    num_hidden_groups: int. Number of group for the hidden layers, parameters\n      in the same group are shared.\n    num_attention_heads: int. Number of attention heads in the Transformer.\n    intermediate_size: int. The size of the \"intermediate\" (a.k.a., feed\n      forward) layer.\n    inner_group_num: int, number of inner repetition of attention and ffn.\n    intermediate_act_fn: function. The non-linear activation function to apply\n      to the output of the intermediate\/feed-forward layer.\n    hidden_dropout_prob: float. Dropout probability for the hidden layers.\n    attention_probs_dropout_prob: float. Dropout probability of the attention\n      probabilities.\n    initializer_range: float. Range of the initializer (stddev of truncated\n      normal).\n    do_return_all_layers: Whether to also return all layers or just the final\n      layer.\n  Returns:\n    float Tensor of shape [batch_size, seq_length, hidden_size], the final\n    hidden layer of the Transformer.\n  Raises:\n    ValueError: A Tensor shape or parameter is invalid.\n  \"\"\"\n  if hidden_size % num_attention_heads != 0:\n    raise ValueError(\n        \"The hidden size (%d) is not a multiple of the number of attention \"\n        \"heads (%d)\" % (hidden_size, num_attention_heads))\n\n  attention_head_size = hidden_size \/\/ num_attention_heads\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  input_width = input_shape[2]\n\n  all_layer_outputs = []\n  if input_width != hidden_size:\n    prev_output = dense_layer_2d(\n        input_tensor, hidden_size, create_initializer(initializer_range),\n        None, name=\"embedding_hidden_mapping_in\")\n  else:\n    prev_output = input_tensor\n  with tf.variable_scope(\"transformer\", reuse=tf.AUTO_REUSE):\n    for layer_idx in range(num_hidden_layers):\n      group_idx = int(layer_idx \/ num_hidden_layers * num_hidden_groups)\n      with tf.variable_scope(\"group_%d\" % group_idx):\n        with tf.name_scope(\"layer_%d\" % layer_idx):\n          layer_output = prev_output\n          for inner_group_idx in range(inner_group_num):\n            with tf.variable_scope(\"inner_group_%d\" % inner_group_idx):\n              layer_output = attention_ffn_block(\n                  layer_output, hidden_size, attention_mask,\n                  num_attention_heads, attention_head_size,\n                  attention_probs_dropout_prob, intermediate_size,\n                  intermediate_act_fn, initializer_range, hidden_dropout_prob)\n              prev_output = layer_output\n              all_layer_outputs.append(layer_output)\n  if do_return_all_layers:\n    return all_layer_outputs\n  else:\n    return all_layer_outputs[-1]\n\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n  \"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n  Args:\n    tensor: A tf.Tensor object to find the shape of.\n    expected_rank: (optional) int. The expected rank of `tensor`. If this is\n      specified and the `tensor` has a different rank, and exception will be\n      thrown.\n    name: Optional name of the tensor for the error message.\n  Returns:\n    A list of dimensions of the shape of tensor. All static dimensions will\n    be returned as python integers, and dynamic dimensions will be returned\n    as tf.Tensor scalars.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n\n\ndef reshape_to_matrix(input_tensor):\n  \"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  \"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n  \"\"\"Raises an exception if the tensor rank is not of the expected rank.\n  Args:\n    tensor: A tf.Tensor to check the rank of.\n    expected_rank: Python integer or list of integers, expected rank.\n    name: Optional name of the tensor for the error message.\n  Raises:\n    ValueError: If the expected shape doesn't match the actual shape.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  expected_rank_dict = {}\n  if isinstance(expected_rank, six.integer_types):\n    expected_rank_dict[expected_rank] = True\n  else:\n    for x in expected_rank:\n      expected_rank_dict[x] = True\n\n  actual_rank = tensor.shape.ndims\n  if actual_rank not in expected_rank_dict:\n    scope_name = tf.get_variable_scope().name\n    raise ValueError(\n        \"For the tensor `%s` in scope `%s`, the actual rank \"\n        \"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n        (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))","21":"Similar lines in 2 files\n==run_classifier:464\n==run_classifier_clue:568\ndef model_fn_builder(bert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]\n    is_real_example = None\n    if \"is_real_example\" in features:\n      is_real_example = tf.cast(features[\"is_real_example\"], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    (total_loss, per_example_loss, logits, probabilities) = create_model(\n        bert_config, is_training, input_ids, input_mask, segment_ids, label_ids,\n        num_labels, use_one_hot_embeddings)\n\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n       ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n        predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n        accuracy = tf.metrics.accuracy(\n            labels=label_ids, predictions=predictions, weights=is_real_example)\n        loss = tf.metrics.mean(values=per_example_loss, weights=is_real_example)\n        return {\n            \"eval_accuracy\": accuracy,\n            \"eval_loss\": loss,\n        }\n\n      eval_metrics = (metric_fn,\n                      [per_example_loss, label_ids, logits, is_real_example])\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          predictions={\"probabilities\": probabilities},\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n","22":"Similar lines in 2 files\n==run_classifier:66\n==run_classifier_sp_google:77\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU\/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc:\/\/ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n\nclass InputExample(object):\n  \"\"\"A single training\/test example for simple sequence classification.\"\"\"\n\n  def __init__(self, guid, text_a, text_b=None, label=None):\n    \"\"\"Constructs a InputExample.\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"\n    self.guid = guid\n    self.text_a = text_a\n    self.text_b = text_b\n    self.label = label\n\n\nclass PaddingInputExample(object):\n  \"\"\"Fake example so the num input examples is a multiple of the batch size.\n  When running eval\/predict on the TPU, we need to pad the number of examples\n  to be a multiple of the batch size, because the TPU requires a fixed batch\n  size. The alternative is to drop the last batch, which is bad because it means\n  the entire output data won't be generated.\n  We use this class instead of `None` because treating `None` as padding\n  battches could cause silent errors.\n  \"\"\"\n\n\nclass InputFeatures(object):\n  \"\"\"A single set of features of data.\"\"\"\n\n  def __init__(self,\n               input_ids,\n               input_mask,\n               segment_ids,\n               label_id,\n               is_real_example=True):\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.label_id = label_id\n    self.is_real_example = is_real_example\n\n\nclass DataProcessor(object):\n  \"\"\"Base class for data converters for sequence classification data sets.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"\n    raise NotImplementedError()\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"\n    raise NotImplementedError()\n\n  def get_test_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"\n    raise NotImplementedError()\n\n  def get_labels(self):\n    \"\"\"Gets the list of labels for this data set.\"\"\"\n    raise NotImplementedError()\n\n  @classmethod\n  def _read_tsv(cls, input_file, quotechar=None):\n    \"\"\"Reads a tab separated value file.\"\"\"\n    with tf.gfile.Open(input_file, \"r\") as f:\n      reader = csv.reader(f, delimiter=\"\\t\", quotechar=quotechar)\n      lines = []\n      for line in reader:\n        lines.append(line)\n      return lines\n","23":"Similar lines in 2 files\n==optimization:59\n==optimization_finetuning:59\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])\n\n    if use_tpu:\n        optimizer = tf.contrib.tpu.CrossShardOptimizer(optimizer)\n\n    tvars = tf.trainable_variables()\n    grads = tf.gradients(loss, tvars)\n\n    # This is how the model was pre-trained.\n    (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n    train_op = optimizer.apply_gradients(\n        zip(grads, tvars), global_step=global_step)\n\n    # Normally the global step update is done inside of `apply_gradients`.\n    # However, `AdamWeightDecayOptimizer` doesn't do this. But if you use\n    # a different optimizer, you should probably take this line out.\n    new_global_step = global_step + 1\n    train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n    return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n    \"\"\"A basic Adam optimizer that includes \"correct\" L2 weight decay.\"\"\"\n\n    def __init__(self,\n                 learning_rate,\n                 weight_decay_rate=0.0,\n                 beta_1=0.9,\n                 beta_2=0.999,\n                 epsilon=1e-6,\n                 exclude_from_weight_decay=None,\n                 name=\"AdamWeightDecayOptimizer\"):\n        \"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"\n        super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n        self.learning_rate = learning_rate\n        self.weight_decay_rate = weight_decay_rate\n        self.beta_1 = beta_1\n        self.beta_2 = beta_2\n        self.epsilon = epsilon\n        self.exclude_from_weight_decay = exclude_from_weight_decay\n\n    def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n        \"\"\"See base class.\"\"\"\n        assignments = []\n        for (grad, param) in grads_and_vars:\n            if grad is None or param is None:\n                continue\n\n            param_name = self._get_variable_name(param.name)\n\n            m = tf.get_variable(\n                name=param_name + \"\/adam_m\",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n            v = tf.get_variable(\n                name=param_name + \"\/adam_v\",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n\n            # Standard Adam update.\n            next_m = (\n                    tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n            next_v = (\n                    tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                              tf.square(grad)))\n\n            update = next_m \/ (tf.sqrt(next_v) + self.epsilon)\n\n            # Just adding the square of the weights to the loss function is *not*\n            # the correct way of using L2 regularization\/weight decay with Adam,\n            # since that will interact with the m and v parameters in strange ways.\n            #\n            # Instead we want ot decay the weights in a manner that doesn't interact\n            # with the m\/v parameters. This is equivalent to adding the square\n            # of the weights to the loss with plain (non-momentum) SGD.\n            if self._do_use_weight_decay(param_name):\n                update += self.weight_decay_rate * param\n\n            update_with_lr = self.learning_rate * update\n\n            next_param = param - update_with_lr\n\n            assignments.extend(\n                [param.assign(next_param),\n                 m.assign(next_m),\n                 v.assign(next_v)])\n        return tf.group(*assignments, name=name)\n\n    def _do_use_weight_decay(self, param_name):\n        \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n        if not self.weight_decay_rate:\n            return False\n        if self.exclude_from_weight_decay:\n            for r in self.exclude_from_weight_decay:\n                if re.search(r, param_name) is not None:\n                    return False\n        return True\n\n    def _get_variable_name(self, param_name):\n        \"\"\"Get the variable name from the tensor name.\"\"\"\n        m = re.match(\"^(.*):\\\\d+$\", param_name)\n        if m is not None:\n            param_name = m.group(1)\n        return param_name","24":"Similar lines in 2 files\n==run_classifier:29\n==run_classifier_clue:35\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"data_dir\", None,\n    \"The input data dir. Should contain the .tsv files (or other data files) \"\n    \"for the task.\")\n\nflags.DEFINE_string(\n    \"bert_config_file\", None,\n    \"The config json file corresponding to the pre-trained BERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"task_name\", None, \"The name of the task to train.\")\n\nflags.DEFINE_string(\"vocab_file\", None,\n                    \"The vocabulary file that the BERT model was trained on.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained BERT model).\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 128,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU\/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc:\/\/ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n","25":"Similar lines in 2 files\n==run_classifier_clue:654\n==run_classifier_sp_google:768\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef convert_examples_to_features(examples, label_list, max_seq_length,\n                                 tokenizer):\n  \"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"\n\n  features = []\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    features.append(feature)\n  return features\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {","26":"Similar lines in 2 files\n==run_classifier:809\n==run_classifier_sp_google:937\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    train_input_fn = file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_eval:\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(PaddingInputExample())\n\n    eval_file = os.path.join(FLAGS.output_dir, \"eval.tf_record\")\n    file_based_convert_examples_to_features(\n        eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) \/\/ FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = file_based_input_fn_builder(\n        input_file=eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder)\n\n    #######################################################################################################################\n    # evaluate all checkpoints; you can use the checkpoint with the best dev accuarcy\n    steps_and_files = []\n    filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n    for filename in filenames:\n        if filename.endswith(\".index\"):\n            ckpt_name = filename[:-6]\n            cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n            global_step = int(cur_filename.split(\"-\")[-1])\n            tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n            steps_and_files.append([global_step, cur_filename])\n    steps_and_files = sorted(steps_and_files, key=lambda x: x[0])\n\n    output_eval_file = os.path.join(FLAGS.data_dir, \"eval_results_albert_zh.txt\")\n    print(\"output_eval_file:\",output_eval_file)\n    tf.logging.info(\"output_eval_file:\"+output_eval_file)\n    with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n        for global_step, filename in sorted(steps_and_files, key=lambda x: x[0]):\n            result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps, checkpoint_path=filename)\n\n            tf.logging.info(\"***** Eval results %s *****\" % (filename))\n            writer.write(\"***** Eval results %s *****\\n\" % (filename))\n            for key in sorted(result.keys()):\n                tf.logging.info(\"  %s = %s\", key, str(result[key]))\n                writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    #######################################################################################################################\n\n    #result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n    #\n    #output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    #with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n    #  tf.logging.info(\"***** Eval results *****\")\n    #  for key in sorted(result.keys()):\n    #    tf.logging.info(\"  %s = %s\", key, str(result[key]))","27":"Similar lines in 2 files\n==run_classifier_clue:151\n==run_classifier_sp_google:454\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in ALBERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)","28":"Similar lines in 5 files\n==run_classifier:229\n==run_classifier_clue:156\n==run_classifier_clue:330\n==run_classifier_sp_google:459\n==similarity:163\n        else:\n            # Account for [CLS] and [SEP] with \"- 2\"\n            if len(tokens_a) > max_seq_length - 2:\n                tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n        # The convention in BERT is:\n        # (a) For sequence pairs:\n        #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n        #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n        # (b) For single sequences:\n        #  tokens:   [CLS] the dog is hairy . [SEP]\n        #  type_ids: 0     0   0   0  0     0 0\n        #\n        # Where \"type_ids\" are used to indicate whether this is the first\n        # sequence or the second sequence. The embedding vectors for `type=0` and\n        # `type=1` were learned during pre-training and are added to the wordpiece\n        # embedding vector (and position vector). This is not *strictly* necessary\n        # since the [SEP] token unambiguously separates the sequences, but it makes\n        # it easier for the model to learn the concept of sequences.\n        #\n        # For classification tasks, the first vector (corresponding to [CLS]) is\n        # used as as the \"sentence vector\". Note that this only makes sense because\n        # the entire model is fine-tuned.\n        tokens = []\n        segment_ids = []\n        tokens.append(\"[CLS]\")\n        segment_ids.append(0)\n        for token in tokens_a:\n            tokens.append(token)\n            segment_ids.append(0)\n        tokens.append(\"[SEP]\")\n        segment_ids.append(0)\n\n        if tokens_b:\n            for token in tokens_b:\n                tokens.append(token)\n                segment_ids.append(1)\n            tokens.append(\"[SEP]\")\n            segment_ids.append(1)\n\n        input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n        # The mask has 1 for real tokens and 0 for padding tokens. Only real\n        # tokens are attended to.\n        input_mask = [1] * len(input_ids)\n\n        # Zero-pad up to the sequence length.\n        while len(input_ids) < max_seq_length:\n            input_ids.append(0)\n            input_mask.append(0)\n            segment_ids.append(0)\n\n        assert len(input_ids) == max_seq_length\n        assert len(input_mask) == max_seq_length\n        assert len(segment_ids) == max_seq_length\n\n        label_id = label_map[example.label]\n        if ex_index < 5:\n            tf.logging.info(\"*** Example ***\")\n            tf.logging.info(\"guid: %s\" % (example.guid))\n            tf.logging.info(\"tokens: %s\" % \" \".join(\n                [tokenization.printable_text(x) for x in tokens]))\n            tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n            tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n            tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n            tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n        feature = InputFeatures(\n            input_ids=input_ids,\n            input_mask=input_mask,\n            segment_ids=segment_ids,","29":"Similar lines in 2 files\n==run_classifier_clue:72\n==run_classifier_sp_google:77\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU\/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc:\/\/ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n","30":"Similar lines in 2 files\n==run_classifier:550\n==run_classifier_sp_google:768\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n","31":"Similar lines in 3 files\n==modeling:543\n==modeling_google:532\n==modeling_google_fast:534\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  width = input_shape[2]\n\n  output = input_tensor\n\n  if use_token_type:\n    if token_type_ids is None:\n      raise ValueError(\"`token_type_ids` must be specified if\"\n                       \"`use_token_type` is True.\")\n    token_type_table = tf.get_variable(\n        name=token_type_embedding_name,\n        shape=[token_type_vocab_size, width],\n        initializer=create_initializer(initializer_range))\n    # This vocab will be small so we always do one-hot here, since it is always\n    # faster for a small vocabulary.\n    flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n    one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n    token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n    token_type_embeddings = tf.reshape(token_type_embeddings,\n                                       [batch_size, seq_length, width])\n    output += token_type_embeddings\n\n  if use_position_embeddings:\n    assert_op = tf.assert_less_equal(seq_length, max_position_embeddings)\n    with tf.control_dependencies([assert_op]):\n      full_position_embeddings = tf.get_variable(\n          name=position_embedding_name,\n          shape=[max_position_embeddings, width],\n          initializer=create_initializer(initializer_range))\n      # Since the position embedding table is a learned variable, we create it\n      # using a (long) sequence length `max_position_embeddings`. The actual\n      # sequence length might be shorter than this, for faster training of\n      # tasks that do not have long sequences.\n      #\n      # So `full_position_embeddings` is effectively an embedding table\n      # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n      # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n      # perform a slice.\n      position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                     [seq_length, -1])\n      num_dims = len(output.shape.as_list())\n\n      # Only the last two dimensions are relevant (`seq_length` and `width`), so\n      # we broadcast among the first dimensions, which is typically just\n      # the batch size.\n      position_broadcast_shape = []\n      for _ in range(num_dims - 2):\n        position_broadcast_shape.append(1)\n      position_broadcast_shape.extend([seq_length, width])\n      position_embeddings = tf.reshape(position_embeddings,\n                                       position_broadcast_shape)\n      output += position_embeddings\n\n  output = layer_norm_and_dropout(output, dropout_prob)\n  return output\n\n","32":"Similar lines in 3 files\n==modeling:995\n==modeling_google:1009\n==modeling_google_fast:1096\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n\n\ndef reshape_to_matrix(input_tensor):\n  \"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  \"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n  \"\"\"Raises an exception if the tensor rank is not of the expected rank.\n\n  Args:\n    tensor: A tf.Tensor to check the rank of.\n    expected_rank: Python integer or list of integers, expected rank.\n    name: Optional name of the tensor for the error message.\n\n  Raises:","33":"Similar lines in 2 files\n==run_classifier:725\n==run_classifier_clue:745\n  }\n\n  tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                FLAGS.init_checkpoint)\n\n  if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n    raise ValueError(\n        \"At least one of `do_train`, `do_eval` or `do_predict' must be True.\")\n\n  bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file)\n\n  if FLAGS.max_seq_length > bert_config.max_position_embeddings:\n    raise ValueError(\n        \"Cannot use sequence length %d because the BERT model \"\n        \"was only trained up to sequence length %d\" %\n        (FLAGS.max_seq_length, bert_config.max_position_embeddings))\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(\"Task not found: %s\" % (task_name))\n\n  processor = processors[task_name]()\n\n  label_list = processor.get_labels()\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  # Cloud TPU: Invalid TPU configuration, ensure ClusterResolver is passed to tpu.\n  print(\"###tpu_cluster_resolver:\", tpu_cluster_resolver)\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:","34":"Similar lines in 3 files\n==optimization:124\n==optimization_finetuning:124\n==optimization_google:155\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m \/ (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization\/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m\/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n\n      update_with_lr = self.learning_rate * update\n\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"","35":"Similar lines in 2 files\n==create_pretraining_data:151\n==create_pretraining_data_google:188\n      tf.logging.info(\"*** Example ***\")\n      tf.logging.info(\"tokens: %s\" % \" \".join(\n          [tokenization.printable_text(x) for x in instance.tokens]))\n\n      for feature_name in features.keys():\n        feature = features[feature_name]\n        values = []\n        if feature.int64_list.value:\n          values = feature.int64_list.value\n        elif feature.float_list.value:\n          values = feature.float_list.value\n        tf.logging.info(\n            \"%s: %s\" % (feature_name, \" \".join([str(x) for x in values])))\n\n  for writer in writers:\n    writer.close()\n\n  tf.logging.info(\"Wrote %d total instances\", total_written)\n\n\ndef create_int_feature(values):\n  feature = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n  return feature\n\n\ndef create_float_feature(values):\n  feature = tf.train.Feature(float_list=tf.train.FloatList(value=list(values)))\n  return feature\n\n\ndef create_training_instances(input_files, tokenizer, max_seq_length,\n                              dupe_factor, short_seq_prob, masked_lm_prob,\n                              max_predictions_per_seq, rng):\n  \"\"\"Create `TrainingInstance`s from raw text.\"\"\"\n  all_documents = [[]]\n\n  # Input file format:\n  # (1) One sentence per line. These should ideally be actual sentences, not\n  # entire paragraphs or arbitrary spans of text. (Because we use the\n  # sentence boundaries for the \"next sentence prediction\" task).\n  # (2) Blank lines between documents. Document boundaries are needed so\n  # that the \"next sentence prediction\" task doesn't span between documents.\n  for input_file in input_files:\n    with tf.gfile.GFile(input_file, \"r\") as reader:\n      while True:","36":"Similar lines in 2 files\n==optimization:16\n==optimization_finetuning:16\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\nimport tensorflow as tf\n\n\ndef create_optimizer(loss, init_lr, num_train_steps, num_warmup_steps, use_tpu):\n    \"\"\"Creates an optimizer training op.\"\"\"\n    global_step = tf.train.get_or_create_global_step()\n\n    learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n    # Implements linear decay of the learning rate.\n    learning_rate = tf.train.polynomial_decay(\n        learning_rate,\n        global_step,\n        num_train_steps,\n        end_learning_rate=0.0,\n        power=1.0,\n        cycle=False)\n\n    # Implements linear warmup. I.e., if global_step < num_warmup_steps, the\n    # learning rate will be `global_step\/num_warmup_steps * init_lr`.\n    if num_warmup_steps:\n        global_steps_int = tf.cast(global_step, tf.int32)\n        warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n        global_steps_float = tf.cast(global_steps_int, tf.float32)\n        warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n        warmup_percent_done = global_steps_float \/ warmup_steps_float\n        warmup_learning_rate = init_lr * warmup_percent_done\n\n        is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n        learning_rate = (\n                (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n    # It is recommended that you use this optimizer for fine tuning, since this\n    # is how the model was trained (note that the Adam m\/v variables are NOT\n    # loaded from init_checkpoint.)","37":"Similar lines in 3 files\n==run_pretraining:299\n==run_pretraining_google:352\n==run_pretraining_google_fast:352\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    labels = tf.reshape(labels, [-1])\n    one_hot_labels = tf.one_hot(labels, depth=2, dtype=tf.float32)\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n    return (loss, per_example_loss, log_probs)\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef input_fn_builder(input_files,\n                     max_seq_length,\n                     max_predictions_per_seq,\n                     is_training,\n                     num_cpu_threads=4):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    name_to_features = {","38":"Similar lines in 2 files\n==lamb_optimizer_google:67\n==optimization_google:138\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(\n          name=six.ensure_str(param_name) + \"\/adam_m\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(\n          name=six.ensure_str(param_name) + \"\/adam_v\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m \/ (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization\/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m\/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n","39":"Similar lines in 2 files\n==tokenization:39\n==tokenization_google:47\n  if m is None:\n    return\n\n  model_name = m.group(1)\n\n  lower_models = [\n      \"uncased_L-24_H-1024_A-16\", \"uncased_L-12_H-768_A-12\",\n      \"multilingual_L-12_H-768_A-12\", \"chinese_L-12_H-768_A-12\"\n  ]\n\n  cased_models = [\n      \"cased_L-12_H-768_A-12\", \"cased_L-24_H-1024_A-16\",\n      \"multi_cased_L-12_H-768_A-12\"\n  ]\n\n  is_bad_config = False\n  if model_name in lower_models and not do_lower_case:\n    is_bad_config = True\n    actual_flag = \"False\"\n    case_name = \"lowercased\"\n    opposite_flag = \"True\"\n\n  if model_name in cased_models and do_lower_case:\n    is_bad_config = True\n    actual_flag = \"True\"\n    case_name = \"cased\"\n    opposite_flag = \"False\"\n\n  if is_bad_config:\n    raise ValueError(\n        \"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"\n        \"However, `%s` seems to be a %s model, so you \"\n        \"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"\n        \"how the model was pre-training. If this error is wrong, please \"\n        \"just comment out this check.\" % (actual_flag, init_checkpoint,\n                                          model_name, case_name, opposite_flag))\n\n","40":"Similar lines in 3 files\n==run_classifier:492\n==run_classifier_clue:596\n==run_classifier_sp_google:709\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n","41":"Similar lines in 3 files\n==run_classifier:833\n==run_classifier_clue:863\n==run_classifier_sp_google:961\n      file_based_convert_examples_to_features(\n          eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) \/\/ FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = file_based_input_fn_builder(\n        input_file=eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder)\n\n    #######################################################################################################################\n    # evaluate all checkpoints; you can use the checkpoint with the best dev accuarcy\n    steps_and_files = []\n    filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n    for filename in filenames:\n      if filename.endswith(\".index\"):\n        ckpt_name = filename[:-6]\n        cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n        global_step = int(cur_filename.split(\"-\")[-1])\n        tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n        steps_and_files.append([global_step, cur_filename])\n    steps_and_files = sorted(steps_and_files, key=lambda x: x[0])\n","42":"Similar lines in 3 files\n==optimization:81\n==optimization_finetuning:81\n==optimization_google:112\n  new_global_step = global_step + 1\n  train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n  return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n  \"\"\"A basic Adam optimizer that includes \"correct\" L2 weight decay.\"\"\"\n\n  def __init__(self,\n               learning_rate,\n               weight_decay_rate=0.0,\n               beta_1=0.9,\n               beta_2=0.999,\n               epsilon=1e-6,\n               exclude_from_weight_decay=None,\n               name=\"AdamWeightDecayOptimizer\"):\n    \"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"\n    super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(","43":"Similar lines in 2 files\n==bert_utils:12\n==modeling:980\ndef get_shape_list(tensor, expected_rank=None, name=None):\n  \"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n\n  Args:\n    tensor: A tf.Tensor object to find the shape of.\n    expected_rank: (optional) int. The expected rank of `tensor`. If this is\n      specified and the `tensor` has a different rank, and exception will be\n      thrown.\n    name: Optional name of the tensor for the error message.\n\n  Returns:\n    A list of dimensions of the shape of tensor. All static dimensions will\n    be returned as python integers, and dynamic dimensions will be returned\n    as tf.Tensor scalars.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n","44":"Similar lines in 3 files\n==modeling:506\n==modeling_google:498\n==modeling_google_fast:500\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=\"token_type_embeddings\",\n                            use_position_embeddings=True,\n                            position_embedding_name=\"position_embeddings\",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1):\n  \"\"\"Performs various post-processing on a word embedding tensor.\n\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length,\n      embedding_size].\n    use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n    token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      Must be specified if `use_token_type` is True.\n    token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n    token_type_embedding_name: string. The name of the embedding table variable\n      for token type ids.\n    use_position_embeddings: bool. Whether to add position embeddings for the\n      position of each token in the sequence.\n    position_embedding_name: string. The name of the embedding table variable\n      for positional embeddings.\n    initializer_range: float. Range of the weight initialization.\n    max_position_embeddings: int. Maximum sequence length that might ever be\n      used with this model. This can be longer than the sequence length of\n      input_tensor, but cannot be shorter.\n    dropout_prob: float. Dropout probability applied to the final output tensor.\n\n  Returns:\n    float tensor with same shape as `input_tensor`.\n","45":"Similar lines in 2 files\n==run_classifier:893\n==run_classifier_sp_google:1019\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")\n    file_based_convert_examples_to_features(predict_examples, label_list,\n                                            FLAGS.max_seq_length, tokenizer,\n                                            predict_file)\n\n    tf.logging.info(\"***** Running prediction*****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder)\n\n    result = estimator.predict(input_fn=predict_input_fn)\n\n    output_predict_file = os.path.join(FLAGS.output_dir, \"test_results.tsv\")","46":"Similar lines in 3 files\n==classifier_utils:55\n==run_classifier:127\n==run_classifier_sp_google:138\nclass InputExample(object):\n  \"\"\"A single training\/test example for simple sequence classification.\"\"\"\n\n  def __init__(self, guid, text_a, text_b=None, label=None):\n    \"\"\"Constructs a InputExample.\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"\n    self.guid = guid\n    self.text_a = text_a\n    self.text_b = text_b\n    self.label = label\n\n\nclass PaddingInputExample(object):\n  \"\"\"Fake example so the num input examples is a multiple of the batch size.\n  When running eval\/predict on the TPU, we need to pad the number of examples\n  to be a multiple of the batch size, because the TPU requires a fixed batch\n  size. The alternative is to drop the last batch, which is bad because it means\n  the entire output data won't be generated.\n  We use this class instead of `None` because treating `None` as padding\n  battches could cause silent errors.\n  \"\"\"\n\n","47":"Similar lines in 2 files\n==bert_utils:73\n==modeling:1044\ndef assert_rank(tensor, expected_rank, name=None):\n\t\"\"\"Raises an exception if the tensor rank is not of the expected rank.\n\n\tArgs:\n\t\ttensor: A tf.Tensor to check the rank of.\n\t\texpected_rank: Python integer or list of integers, expected rank.\n\t\tname: Optional name of the tensor for the error message.\n\n\tRaises:\n\t\tValueError: If the expected shape doesn't match the actual shape.\n\t\"\"\"\n\tif name is None:\n\t\tname = tensor.name\n\n\texpected_rank_dict = {}\n\tif isinstance(expected_rank, six.integer_types):\n\t\texpected_rank_dict[expected_rank] = True\n\telse:\n\t\tfor x in expected_rank:\n\t\t\texpected_rank_dict[x] = True\n\n\tactual_rank = tensor.shape.ndims\n\tif actual_rank not in expected_rank_dict:\n\t\tscope_name = tf.get_variable_scope().name\n\t\traise ValueError(\n\t\t\t\t\"For the tensor `%s` in scope `%s`, the actual rank \"\n\t\t\t\t\"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n\t\t\t\t(name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))\n","48":"Similar lines in 2 files\n==run_classifier:877\n==run_classifier_clue:908\n        tf.logging.info(\"***** Eval results %s *****\" % (filename))\n        writer.write(\"***** Eval results %s *****\\n\" % (filename))\n        for key in sorted(result.keys()):\n          tf.logging.info(\"  %s = %s\", key, str(result[key]))\n          writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    #######################################################################################################################\n\n    # result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n    #\n    # output_eval_file = os.path.join(FLAGS.output_dir, \"dev_results_albert_zh.txt\")\n    # with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n    #  tf.logging.info(\"***** Eval results *****\")\n    #  for key in sorted(result.keys()):\n    #    tf.logging.info(\"  %s = %s\", key, str(result[key]))\n    #    writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")","49":"Similar lines in 2 files\n==create_pretraining_data:617\n==create_pretraining_data_google:514\n    if len(masked_lms) + len(index_set) > num_to_predict:\n      continue\n    is_any_index_covered = False\n    for index in index_set:\n      if index in covered_indexes:\n        is_any_index_covered = True\n        break\n    if is_any_index_covered:\n      continue\n    for index in index_set:\n      covered_indexes.add(index)\n\n      masked_token = None\n      # 80% of the time, replace with [MASK]\n      if rng.random() < 0.8:\n        masked_token = \"[MASK]\"\n      else:\n        # 10% of the time, keep original\n        if rng.random() < 0.5:\n          masked_token = tokens[index]\n        # 10% of the time, replace with random word\n        else:\n          masked_token = vocab_words[rng.randint(0, len(vocab_words) - 1)]\n\n      output_tokens[index] = masked_token\n\n      masked_lms.append(MaskedLmInstance(index=index, label=tokens[index]))\n  assert len(masked_lms) <= num_to_predict","50":"Similar lines in 3 files\n==run_pretraining:358\n==run_pretraining_google:417\n==run_pretraining_google_fast:417\n    if is_training:\n      d = tf.data.Dataset.from_tensor_slices(tf.constant(input_files))\n      d = d.repeat()\n      d = d.shuffle(buffer_size=len(input_files))\n\n      # `cycle_length` is the number of parallel files that get read.\n      cycle_length = min(num_cpu_threads, len(input_files))\n\n      # `sloppy` mode means that the interleaving is not exact. This adds\n      # even more randomness to the training pipeline.\n      d = d.apply(\n          tf.contrib.data.parallel_interleave(\n              tf.data.TFRecordDataset,\n              sloppy=is_training,\n              cycle_length=cycle_length))\n      d = d.shuffle(buffer_size=100)\n    else:\n      d = tf.data.TFRecordDataset(input_files)\n      # Since we evaluate for a fixed number of steps we don't want to encounter\n      # out-of-range exceptions.\n      d = d.repeat()\n\n    # We must `drop_remainder` on training because the TPU requires fixed\n    # size dimensions. For eval, we assume we are evaluating on the CPU or GPU\n    # and we *don't* want to drop the remainder, otherwise we wont cover\n    # every sample.\n    d = d.apply(","51":"Similar lines in 4 files\n==run_classifier:100\n==run_classifier_clue:106\n==run_classifier_sp_google:111\n==run_pretraining:81\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU\/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc:\/\/ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n","52":"Similar lines in 3 files\n==run_pretraining:390\n==run_pretraining_google:450\n==run_pretraining_google_fast:450\n    return d\n\n  return input_fn\n\n\ndef _decode_record(record, name_to_features):\n  \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n  example = tf.parse_single_example(record, name_to_features)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in list(example.keys()):\n    t = example[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    example[name] = t\n\n  return example\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  if not FLAGS.do_train and not FLAGS.do_eval:\n    raise ValueError(\"At least one of `do_train` or `do_eval` must be True.\")\n","53":"Similar lines in 2 files\n==create_pretraining_data:86\n==create_pretraining_data_google:115\n    s += \"is_random_next: %s\\n\" % self.is_random_next\n    s += \"masked_lm_positions: %s\\n\" % (\" \".join(\n        [str(x) for x in self.masked_lm_positions]))\n    s += \"masked_lm_labels: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.masked_lm_labels]))\n    s += \"\\n\"\n    return s\n\n  def __repr__(self):\n    return self.__str__()\n\n\ndef write_instance_to_example_files(instances, tokenizer, max_seq_length,\n                                    max_predictions_per_seq, output_files):\n  \"\"\"Create TF example files from `TrainingInstance`s.\"\"\"\n  writers = []\n  for output_file in output_files:\n    writers.append(tf.python_io.TFRecordWriter(output_file))\n\n  writer_index = 0\n\n  total_written = 0\n  for (inst_index, instance) in enumerate(instances):\n    input_ids = tokenizer.convert_tokens_to_ids(instance.tokens)\n    input_mask = [1] * len(input_ids)\n    segment_ids = list(instance.segment_ids)","54":"Similar lines in 3 files\n==modeling:237\n==modeling_google:227\n==modeling_google_fast:227\n      self.sequence_output = self.all_encoder_layers[-1]\n      # The \"pooler\" converts the encoded sequence tensor of shape\n      # [batch_size, seq_length, hidden_size] to a tensor of shape\n      # [batch_size, hidden_size]. This is necessary for segment-level\n      # (or segment-pair-level) classification tasks where we need a fixed\n      # dimensional representation of the segment.\n      with tf.variable_scope(\"pooler\"):\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token. We assume that this has been pre-trained\n        first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n        self.pooled_output = tf.layers.dense(\n            first_token_tensor,\n            config.hidden_size,\n            activation=tf.tanh,\n            kernel_initializer=create_initializer(config.initializer_range))\n\n  def get_pooled_output(self):\n    return self.pooled_output\n\n  def get_sequence_output(self):\n    \"\"\"Gets final hidden layer of encoder.\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the final hidden of the transformer encoder.\n    \"\"\"","55":"Similar lines in 2 files\n==tokenization:141\n==tokenization_google:210\n    output.append(vocab[item])\n  return output\n\n\ndef convert_tokens_to_ids(vocab, tokens):\n  return convert_by_vocab(vocab, tokens)\n\n\ndef convert_ids_to_tokens(inv_vocab, ids):\n  return convert_by_vocab(inv_vocab, ids)\n\n\ndef whitespace_tokenize(text):\n  \"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"\n  text = text.strip()\n  if not text:\n    return []\n  tokens = text.split()\n  return tokens\n\n\nclass FullTokenizer(object):\n  \"\"\"Runs end-to-end tokenziation.\"\"\"\n","56":"Similar lines in 6 files\n==run_classifier:102\n==run_classifier_clue:108\n==run_classifier_sp_google:113\n==run_pretraining:83\n==run_pretraining_google:102\n==run_pretraining_google_fast:102\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc:\/\/ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n","57":"Similar lines in 4 files\n==run_classifier:494\n==run_classifier_clue:598\n==run_classifier_sp_google:711\n==run_pretraining:153\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n       ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:","58":"Similar lines in 2 files\n==run_classifier:781\n==run_classifier_clue:801\n    num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n  model_fn = model_fn_builder(\n      bert_config=bert_config,\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    train_file = os.path.join(FLAGS.output_dir, \"train.tf_record\")","59":"Similar lines in 2 files\n==optimization:276\n==optimization_finetuning:150\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"\n    m = re.match(\"^(.*):\\\\d+$\", param_name)\n    if m is not None:\n      param_name = m.group(1)\n    return param_name","60":"Similar lines in 3 files\n==modeling:401\n==modeling_google:452\n==modeling_google_fast:454\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=\"word_embeddings\",\n                     use_one_hot_embeddings=False):\n  \"\"\"Looks up words embeddings for id tensor.\n\n  Args:\n    input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n      ids.\n    vocab_size: int. Size of the embedding vocabulary.\n    embedding_size: int. Width of the word embeddings.\n    initializer_range: float. Embedding initialization range.\n    word_embedding_name: string. Name of the embedding table.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.gather()`.\n\n  Returns:\n    float Tensor of shape [batch_size, seq_length, embedding_size].\n  \"\"\"\n  # This function assumes that the input is of shape [batch_size, seq_length,\n  # num_inputs].\n  #","61":"Similar lines in 5 files\n==lamb_optimizer_google:84\n==optimization:124\n==optimization:229\n==optimization_finetuning:124\n==optimization_google:155\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m \/ (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization\/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m\/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n","62":"Similar lines in 2 files\n==create_pretraining_data:372\n==create_pretraining_data_google:268\n    all_documents, document_index, max_seq_length, short_seq_prob,\n    masked_lm_prob, max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates `TrainingInstance`s for a single document.\"\"\"\n  document = all_documents[document_index]\n\n  # Account for [CLS], [SEP], [SEP]\n  max_num_tokens = max_seq_length - 3\n\n  # We *usually* want to fill up the entire sequence since we are padding\n  # to `max_seq_length` anyways, so short sequences are generally wasted\n  # computation. However, we *sometimes*\n  # (i.e., short_seq_prob == 0.1 == 10% of the time) want to use shorter\n  # sequences to minimize the mismatch between pre-training and fine-tuning.\n  # The `target_seq_length` is just a rough target however, whereas\n  # `max_seq_length` is a hard limit.\n  target_seq_length = max_num_tokens\n  if rng.random() < short_seq_prob:\n    target_seq_length = rng.randint(2, max_num_tokens)\n\n  # We DON'T just concatenate all of the tokens from a document into a long\n  # sequence and choose an arbitrary split point because this would make the\n  # next sentence prediction task too easy. Instead, we split the input into\n  # segments \"A\" and \"B\" based on the actual \"sentences\" provided by the user\n  # input.","63":"Similar lines in 3 files\n==run_classifier:465\n==run_classifier_clue:569\n==run_classifier_sp_google:682\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]\n    is_real_example = None\n    if \"is_real_example\" in features:\n      is_real_example = tf.cast(features[\"is_real_example\"], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n","64":"Similar lines in 3 files\n==modeling:130\n==modeling_google:144\n==modeling_google_fast:144\n  def __init__(self,\n               config,\n               is_training,\n               input_ids,\n               input_mask=None,\n               token_type_ids=None,\n               use_one_hot_embeddings=False,\n               scope=None):\n    \"\"\"Constructor for BertModel.\n\n    Args:\n      config: `BertConfig` instance.\n      is_training: bool. true for training model, false for eval model. Controls\n        whether dropout will be applied.\n      input_ids: int32 Tensor of shape [batch_size, seq_length].\n      input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n        embeddings or tf.embedding_lookup() for the word embeddings.\n      scope: (optional) variable scope. Defaults to \"bert\".\n\n    Raises:\n      ValueError: The config is invalid or one of the input tensor shapes","65":"Similar lines in 3 files\n==modeling:718\n==modeling_google:791\n==modeling_google_fast:876\n  if len(from_shape) != len(to_shape):\n    raise ValueError(\n        \"The rank of `from_tensor` must match the rank of `to_tensor`.\")\n\n  if len(from_shape) == 3:\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n    to_seq_length = to_shape[1]\n  elif len(from_shape) == 2:\n    if (batch_size is None or from_seq_length is None or to_seq_length is None):\n      raise ValueError(\n          \"When passing in rank 2 tensors to attention_layer, the values \"\n          \"for `batch_size`, `from_seq_length`, and `to_seq_length` \"\n          \"must all be specified.\")\n\n  # Scalar dimensions referenced here:\n  #   B = batch size (number of sequences)\n  #   F = `from_tensor` sequence length\n  #   T = `to_tensor` sequence length\n  #   N = `num_attention_heads`\n  #   H = `size_per_head`\n","66":"Similar lines in 2 files\n==create_pretraining_data:656\n==create_pretraining_data_google:602\ndef truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng):\n  \"\"\"Truncates a pair of sequences to a maximum sequence length.\"\"\"\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_num_tokens:\n      break\n\n    trunc_tokens = tokens_a if len(tokens_a) > len(tokens_b) else tokens_b\n    assert len(trunc_tokens) >= 1\n\n    # We want to sometimes truncate from the front and sometimes from the\n    # back to add more randomness and avoid biases.\n    if rng.random() < 0.5:\n      del trunc_tokens[0]\n    else:\n      trunc_tokens.pop()\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  tokenizer = tokenization.FullTokenizer(","67":"Similar lines in 3 files\n==modeling:380\n==modeling_google:401\n==modeling_google_fast:403\n  return output\n\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n  \"\"\"Runs layer normalization followed by dropout.\"\"\"\n  output_tensor = layer_norm(input_tensor, name)\n  output_tensor = dropout(output_tensor, dropout_prob)\n  return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n  \"\"\"Creates a `truncated_normal_initializer` with the given range.\"\"\"\n  return tf.truncated_normal_initializer(stddev=initializer_range)\n\n","68":"Similar lines in 3 files\n==modeling:85\n==modeling_google:104\n==modeling_google_fast:104\n    for (key, value) in six.iteritems(json_object):\n      config.__dict__[key] = value\n    return config\n\n  @classmethod\n  def from_json_file(cls, json_file):\n    \"\"\"Constructs a `AlbertConfig` from a json file of parameters.\"\"\"\n    with tf.gfile.GFile(json_file, \"r\") as reader:\n      text = reader.read()\n    return cls.from_dict(json.loads(text))\n\n  def to_dict(self):\n    \"\"\"Serializes this instance to a Python dictionary.\"\"\"\n    output = copy.deepcopy(self.__dict__)\n    return output\n\n  def to_json_string(self):\n    \"\"\"Serializes this instance to a JSON string.\"\"\"\n    return json.dumps(self.to_dict(), indent=2, sort_keys=True) + \"\\n\"\n\n","69":"Similar lines in 2 files\n==create_pretraining_data:265\n==create_pretraining_data_google:271\n  document = all_documents[document_index]\n\n  # Account for [CLS], [SEP], [SEP]\n  max_num_tokens = max_seq_length - 3\n\n  # We *usually* want to fill up the entire sequence since we are padding\n  # to `max_seq_length` anyways, so short sequences are generally wasted\n  # computation. However, we *sometimes*\n  # (i.e., short_seq_prob == 0.1 == 10% of the time) want to use shorter\n  # sequences to minimize the mismatch between pre-training and fine-tuning.\n  # The `target_seq_length` is just a rough target however, whereas\n  # `max_seq_length` is a hard limit.\n  target_seq_length = max_num_tokens\n  if rng.random() < short_seq_prob:\n    target_seq_length = rng.randint(2, max_num_tokens)\n\n  # We DON'T just concatenate all of the tokens from a document into a long\n  # sequence and choose an arbitrary split point because this would make the\n  # next sentence prediction task too easy. Instead, we split the input into\n  # segments \"A\" and \"B\" based on the actual \"sentences\" provided by the user\n  # input.","70":"Similar lines in 3 files\n==bert_utils:27\n==modeling_google:1009\n==modeling_google_fast:1096\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n","71":"Similar lines in 3 files\n==run_pretraining:459\n==run_pretraining_google:518\n==run_pretraining_google_fast:518\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size)\n\n  if FLAGS.do_train:\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    train_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=True)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)\n\n  if FLAGS.do_eval:\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)","72":"Similar lines in 3 files\n==run_classifier:785\n==run_classifier_clue:805\n==run_classifier_sp_google:915\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    train_file = os.path.join(FLAGS.output_dir, \"train.tf_record\")","73":"Similar lines in 3 files\n==run_classifier:701\n==run_classifier_clue:716\n==run_classifier_sp_google:830\ndef convert_examples_to_features(examples, label_list, max_seq_length,\n                                 tokenizer):\n  \"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"\n\n  features = []\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    features.append(feature)\n  return features\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {","74":"Similar lines in 2 files\n==optimization:276\n==optimization_google:181\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"","75":"Similar lines in 2 files\n==classifier_utils:35\n==tokenization:77\ndef convert_to_unicode(text):\n  \"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return text.decode(\"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text.decode(\"utf-8\", \"ignore\")\n    elif isinstance(text, unicode):\n      return text\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n","76":"Similar lines in 3 files\n==classifier_utils:86\n==run_classifier:174\n==run_classifier_sp_google:185\nclass DataProcessor(object):\n  \"\"\"Base class for data converters for sequence classification data sets.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"\n    raise NotImplementedError()\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"\n    raise NotImplementedError()\n\n  def get_test_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"\n    raise NotImplementedError()\n\n  def get_labels(self):\n    \"\"\"Gets the list of labels for this data set.\"\"\"\n    raise NotImplementedError()\n\n  @classmethod","77":"Similar lines in 2 files\n==modeling:319\n==modeling_google:310\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == \"linear\":\n    return None\n  elif act == \"relu\":\n    return tf.nn.relu\n  elif act == \"gelu\":\n    return gelu\n  elif act == \"tanh\":\n    return tf.tanh\n  else:\n    raise ValueError(\"Unsupported activation: %s\" % act)\n\n","78":"Similar lines in 2 files\n==create_pretraining_data:537\n==create_pretraining_data_google:514\n    if len(masked_lms) + len(index_set) > num_to_predict:\n      continue\n    is_any_index_covered = False\n    for index in index_set:\n      if index in covered_indexes:\n        is_any_index_covered = True\n        break\n    if is_any_index_covered:\n      continue\n    for index in index_set:\n      covered_indexes.add(index)\n\n      masked_token = None\n      # 80% of the time, replace with [MASK]\n      if rng.random() < 0.8:\n        masked_token = \"[MASK]\"\n      else:\n        # 10% of the time, keep original\n        if rng.random() < 0.5:","79":"Similar lines in 3 files\n==run_classifier:905\n==run_classifier_clue:941\n==run_classifier_sp_google:1031\n      file_based_convert_examples_to_features(predict_examples, label_list,\n                                              FLAGS.max_seq_length, tokenizer,\n                                              predict_file)\n\n    tf.logging.info(\"***** Running prediction*****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder)\n\n    result = estimator.predict(input_fn=predict_input_fn)","80":"Similar lines in 3 files\n==modeling:155\n==modeling_google:167\n==modeling_google_fast:167\n    config = copy.deepcopy(config)\n    if not is_training:\n      config.hidden_dropout_prob = 0.0\n      config.attention_probs_dropout_prob = 0.0\n\n    input_shape = get_shape_list(input_ids, expected_rank=2)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n\n    if input_mask is None:\n      input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    if token_type_ids is None:\n      token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    with tf.variable_scope(scope, default_name=\"bert\"):\n      with tf.variable_scope(\"embeddings\"):\n        # Perform embedding lookup on the word ids.","81":"Similar lines in 5 files\n==lamb_optimizer_google:117\n==optimization:150\n==optimization:276\n==optimization_finetuning:150\n==optimization_google:181\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n","82":"Similar lines in 2 files\n==create_pretraining_data:201\n==create_pretraining_data_google:241\n        line = line.strip()\n\n        # Empty lines are used as document delimiters\n        if not line:\n          all_documents.append([])\n        tokens = tokenizer.tokenize(line)\n        if tokens:\n          all_documents[-1].append(tokens)\n\n  # Remove empty documents\n  all_documents = [x for x in all_documents if x]\n  rng.shuffle(all_documents)\n\n  vocab_words = list(tokenizer.vocab.keys())\n  instances = []\n  for _ in range(dupe_factor):\n    for document_index in range(len(all_documents)):\n      instances.extend(","83":"Similar lines in 3 files\n==optimization:205\n==optimization_finetuning:100\n==optimization_google:131\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(","84":"Similar lines in 3 files\n==create_pretraining_data:336\n==create_pretraining_data:458\n==create_pretraining_data_google:355\n        tokens = []\n        segment_ids = []\n        tokens.append(\"[CLS]\")\n        segment_ids.append(0)\n        for token in tokens_a:\n          tokens.append(token)\n          segment_ids.append(0)\n\n        tokens.append(\"[SEP]\")\n        segment_ids.append(0)\n\n        for token in tokens_b:\n          tokens.append(token)\n          segment_ids.append(1)\n        tokens.append(\"[SEP]\")\n        segment_ids.append(1)\n","85":"Similar lines in 4 files\n==bert_utils:84\n==modeling:1055\n==modeling_google:1067\n==modeling_google_fast:1154\n  if name is None:\n    name = tensor.name\n\n  expected_rank_dict = {}\n  if isinstance(expected_rank, six.integer_types):\n    expected_rank_dict[expected_rank] = True\n  else:\n    for x in expected_rank:\n      expected_rank_dict[x] = True\n\n  actual_rank = tensor.shape.ndims\n  if actual_rank not in expected_rank_dict:\n    scope_name = tf.get_variable_scope().name\n    raise ValueError(\n        \"For the tensor `%s` in scope `%s`, the actual rank \"\n        \"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n        (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))","86":"Similar lines in 2 files\n==tokenization:90\n==tokenization_google:162\n      return text\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef printable_text(text):\n  \"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"\n\n  # These functions want `str` for both Python2 and Python3, but in one case\n  # it's a Unicode string and in the other it's a byte string.\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):","87":"Similar lines in 3 files\n==run_classifier_sp_google:888\n==run_pretraining_google:488\n==run_pretraining_google_fast:488\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n","88":"Similar lines in 3 files\n==run_classifier:158\n==run_classifier_clue:133\n==run_classifier_sp_google:169\nclass InputFeatures(object):\n  \"\"\"A single set of features of data.\"\"\"\n\n  def __init__(self,\n               input_ids,\n               input_mask,\n               segment_ids,\n               label_id,\n               is_real_example=True):\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.label_id = label_id\n    self.is_real_example = is_real_example\n\n","89":"Similar lines in 2 files\n==create_pretraining_data:51\n==create_pretraining_data_google:79\nflags.DEFINE_integer(\"max_predictions_per_seq\", 20,\n                     \"Maximum number of masked LM predictions per sequence.\")\n\nflags.DEFINE_integer(\"random_seed\", 12345, \"Random seed for data generation.\")\n\nflags.DEFINE_integer(\n    \"dupe_factor\", 10,\n    \"Number of times to duplicate the input data (with different masks).\")\n\nflags.DEFINE_float(\"masked_lm_prob\", 0.15, \"Masked LM probability.\")\n\nflags.DEFINE_float(\n    \"short_seq_prob\", 0.1,\n    \"Probability of creating sequences which are shorter than the \"\n    \"maximum length.\")\n","90":"Similar lines in 2 files\n==run_classifier_clue:784\n==run_classifier_sp_google:894\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:\n    train_examples = processor.get_train_examples(FLAGS.data_dir)","91":"Similar lines in 3 files\n==optimization:43\n==optimization_finetuning:43\n==optimization_google:56\n        warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n        global_steps_float = tf.cast(global_steps_int, tf.float32)\n        warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n        warmup_percent_done = global_steps_float \/ warmup_steps_float\n        warmup_learning_rate = init_lr * warmup_percent_done\n\n        is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n        learning_rate = (\n                (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n    # It is recommended that you use this optimizer for fine tuning, since this\n    # is how the model was trained (note that the Adam m\/v variables are NOT\n    # loaded from init_checkpoint.)","92":"Similar lines in 2 files\n==modeling:319\n==modeling_google_fast:310\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == \"linear\":\n    return None\n  elif act == \"relu\":\n    return tf.nn.relu\n  elif act == \"gelu\":\n    return gelu\n  elif act == \"tanh\":\n    return tf.tanh","93":"Similar lines in 2 files\n==create_pretraining_data:432\n==create_pretraining_data_google:324\n          for _ in range(10): # \u968f\u673a\u7684\u9009\u51fa\u4e00\u4e2a\u4e0e\u5f53\u524d\u7684\u6587\u6863\u4e0d\u4e00\u6837\u7684\u6587\u6863\u7684\u7d22\u5f15\n            random_document_index = rng.randint(0, len(all_documents) - 1)\n            if random_document_index != document_index:\n              break\n\n          random_document = all_documents[random_document_index] # \u9009\u51fa\u8fd9\u4e2a\u6587\u6863\n          random_start = rng.randint(0, len(random_document) - 1) # \u4ece\u8fd9\u4e2a\u6587\u6863\u9009\u51fa\u4e00\u4e2a\u6bb5\u843d\u7684\u5f00\u59cb\u4f4d\u7f6e\n          for j in range(random_start, len(random_document)): # \u4ece\u8fd9\u4e2a\u6587\u6863\u7684\u5f00\u59cb\u4f4d\u7f6e\u5230\u7ed3\u675f\uff0c\u4f5c\u4e3a\u6211\u4eec\u7684\u201cA[SEP]B\u201c\u4e2d\u7684B\u5373tokens_b\n            tokens_b.extend(random_document[j])\n            if len(tokens_b) >= target_b_length:\n              break\n          # We didn't actually use these segments so we \"put them back\" so\n          # they don't go to waste. \u8fd9\u91cc\u662f\u4e3a\u4e86\u9632\u6b62\u6587\u672c\u7684\u6d6a\u8d39\u7684\u4e00\u4e2a\u5c0f\u6280\u5de7\n          num_unused_segments = len(current_chunk) - a_end # e.g. 550-200=350\n          i -= num_unused_segments # i=i-num_unused_segments, e.g. i=400, num_unused_segments=350, \u90a3\u4e48 i=i-num_unused_segments=400-350=50","94":"Similar lines in 2 files\n==run_classifier_clue:908\n==run_classifier_sp_google:1005\n        tf.logging.info(\"***** Eval results %s *****\" % (filename))\n        writer.write(\"***** Eval results %s *****\\n\" % (filename))\n        for key in sorted(result.keys()):\n          tf.logging.info(\"  %s = %s\", key, str(result[key]))\n          writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    #######################################################################################################################\n\n    # result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n    #\n    # output_eval_file = os.path.join(FLAGS.output_dir, \"dev_results_albert_zh.txt\")\n    # with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n    #  tf.logging.info(\"***** Eval results *****\")\n    #  for key in sorted(result.keys()):\n    #    tf.logging.info(\"  %s = %s\", key, str(result[key]))","95":"Similar lines in 2 files\n==run_classifier_clue:832\n==run_classifier_sp_google:935\n        file_based_convert_examples_to_features(\n            train_examples, label_list, FLAGS.max_seq_length, tokenizer, train_file)\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    train_input_fn = file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_eval:","96":"Similar lines in 4 files\n==run_classifier:465\n==run_classifier_clue:569\n==run_classifier_sp_google:682\n==run_pretraining:109\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]","97":"Similar lines in 6 files\n==run_classifier:347\n==run_classifier_clue:448\n==run_classifier_sp_google:577\n==run_pretraining:395\n==run_pretraining_google:455\n==run_pretraining_google_fast:455\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n","98":"Similar lines in 2 files\n==run_classifier:764\n==run_classifier_sp_google:894\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:","99":"Similar lines in 2 files\n==run_classifier:609\n==run_classifier_sp_google:305\nclass LCQMCPairClassificationProcessor(DataProcessor):\n  \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n  def __init__(self):\n    self.language = \"zh\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"train.txt\")), \"train\")\n    # dev_0827.tsv\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(","100":"Similar lines in 2 files\n==run_classifier:432\n==run_classifier_clue:533\n    else:\n        print(\"ln_type is postln or other,do nothing.\")\n\n    if is_training:\n      # I.e., 0.1 dropout\n      output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)\n\n    logits = tf.matmul(output_layer, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    probabilities = tf.nn.softmax(logits, axis=-1)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    one_hot_labels = tf.one_hot(labels, depth=num_labels, dtype=tf.float32)\n","101":"Similar lines in 3 files\n==modeling:186\n==modeling_google:198\n==modeling_google_fast:198\n            use_token_type=True,\n            token_type_ids=token_type_ids,\n            token_type_vocab_size=config.type_vocab_size,\n            token_type_embedding_name=\"token_type_embeddings\",\n            use_position_embeddings=True,\n            position_embedding_name=\"position_embeddings\",\n            initializer_range=config.initializer_range,\n            max_position_embeddings=config.max_position_embeddings,\n            dropout_prob=config.hidden_dropout_prob)\n\n      with tf.variable_scope(\"encoder\"):\n\n        # Run the stacked transformer.\n        # `sequence_output` shape = [batch_size, seq_length, hidden_size].","102":"Similar lines in 2 files\n==create_pretraining_data:694\n==create_pretraining_data_google:643\n  output_files = FLAGS.output_file.split(\",\")\n  tf.logging.info(\"*** Writing to output files ***\")\n  for output_file in output_files:\n    tf.logging.info(\"  %s\", output_file)\n\n  write_instance_to_example_files(instances, tokenizer, FLAGS.max_seq_length,\n                                  FLAGS.max_predictions_per_seq, output_files)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"output_file\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  tf.app.run()","103":"Similar lines in 2 files\n==create_pretraining_data:680\n==create_pretraining_data_google:627\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Reading from input files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\", input_file)\n\n  rng = random.Random(FLAGS.random_seed)\n  instances = create_training_instances(\n      input_files, tokenizer, FLAGS.max_seq_length, FLAGS.dupe_factor,\n      FLAGS.short_seq_prob, FLAGS.masked_lm_prob, FLAGS.max_predictions_per_seq,\n      rng)\n","104":"Similar lines in 2 files\n==create_pretraining_data:483\n==create_pretraining_data_google:380\n            masked_lm_positions=masked_lm_positions,\n            masked_lm_labels=masked_lm_labels)\n        instances.append(instance)\n      current_chunk = [] # \u6e05\u7a7a\u5f53\u524d\u5757\n      current_length = 0 # \u91cd\u7f6e\u5f53\u524d\u6587\u672c\u5757\u7684\u957f\u5ea6\n    i += 1 # \u63a5\u7740\u6587\u6863\u4e2d\u7684\u5185\u5bb9\u5f80\u540e\u770b\n\n  return instances\n\n\nMaskedLmInstance = collections.namedtuple(\"MaskedLmInstance\",\n                                          [\"index\", \"label\"])\n\n","105":"Similar lines in 2 files\n==create_pretraining_data:405\n==create_pretraining_data_google:298\n    current_chunk.append(segment) # \u5c06\u4e00\u4e2a\u72ec\u7acb\u7684\u53e5\u5b50\u52a0\u5165\u5230\u5f53\u524d\u7684\u6587\u672c\u5757\u4e2d\n    current_length += len(segment) # \u7d2f\u8ba1\u5230\u4e3a\u6b62\u4f4d\u7f6e\u63a5\u89e6\u5230\u53e5\u5b50\u7684\u603b\u957f\u5ea6\n    if i == len(document) - 1 or current_length >= target_seq_length: # \u5982\u679c\u7d2f\u8ba1\u7684\u5e8f\u5217\u957f\u5ea6\u8fbe\u5230\u4e86\u76ee\u6807\u7684\u957f\u5ea6==>\u6784\u9020\u5e76\u6dfb\u52a0\u5230\u201cA[SEP]B\u201c\u4e2d\u7684A\u548cB\u4e2d\u3002\n      if current_chunk: # \u5982\u679c\u5f53\u524d\u5757\u4e0d\u4e3a\u7a7a\n        # `a_end` is how many segments from `current_chunk` go into the `A`\n        # (first) sentence.\n        a_end = 1\n        if len(current_chunk) >= 2: # \u5f53\u524d\u5757\uff0c\u5982\u679c\u5305\u542b\u8d85\u8fc7\u4e24\u4e2a\u53e5\u5b50\uff0c\u600e\u53d6\u5f53\u524d\u5757\u7684\u4e00\u90e8\u5206\u4f5c\u4e3a\u201cA[SEP]B\u201c\u4e2d\u7684A\u90e8\u5206\n          a_end = rng.randint(1, len(current_chunk) - 1)\n        # \u5c06\u5f53\u524d\u6587\u672c\u6bb5\u4e2d\u9009\u53d6\u51fa\u6765\u7684\u524d\u534a\u90e8\u5206\uff0c\u8d4b\u503c\u7ed9A\u5373tokens_a\n        tokens_a = []\n        for j in range(a_end):\n          tokens_a.extend(current_chunk[j])\n","106":"Similar lines in 3 files\n==run_pretraining:418\n==run_pretraining_google:478\n==run_pretraining_google_fast:478\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  input_files = [] # \u8f93\u5165\u53ef\u4ee5\u662f\u591a\u4e2a\u6587\u4ef6\uff0c\u4ee5\u201c\u9017\u53f7\u9694\u5f00\u201d\uff1b\u53ef\u4ee5\u662f\u4e00\u4e2a\u5339\u914d\u5f62\u5f0f\u7684\uff0c\u5982\u201cinput_x*\u201d\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Input Files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\" % input_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n      tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver( # TODO","107":"Similar lines in 3 files\n==run_pretraining:227\n==run_pretraining_google:282\n==run_pretraining_google_fast:282\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\"Only TRAIN and EVAL modes are supported: %s\" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n","108":"Similar lines in 3 files\n==run_pretraining:113\n==run_pretraining_google:138\n==run_pretraining_google_fast:138\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    masked_lm_positions = features[\"masked_lm_positions\"]\n    masked_lm_ids = features[\"masked_lm_ids\"]\n    masked_lm_weights = features[\"masked_lm_weights\"]","109":"Similar lines in 4 files\n==run_classifier:215\n==run_classifier_clue:316\n==run_classifier_sp_google:445\n==similarity:149\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"","110":"Similar lines in 2 files\n==run_classifier:641\n==run_classifier_sp_google:335\n      if i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      try:\n          label = tokenization.convert_to_unicode(line[2])\n          text_a = tokenization.convert_to_unicode(line[0])\n          text_b = tokenization.convert_to_unicode(line[1])\n          examples.append(\n              InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n      except Exception:\n          print('###error.i:', i, line)\n    return examples\n","111":"Similar lines in 4 files\n==bert_utils:105\n==run_pretraining:315\n==run_pretraining_google:368\n==run_pretraining_google_fast:368\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n","112":"Similar lines in 4 files\n==bert_utils:48\n==modeling:1017\n==modeling_google:1031\n==modeling_google_fast:1118\ndef reshape_to_matrix(input_tensor):\n  \"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n","113":"Similar lines in 2 files\n==run_classifier_clue:924\n==run_classifier_sp_google:1019\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")","114":"Similar lines in 3 files\n==run_classifier:742\n==run_classifier_clue:762\n==run_classifier_sp_google:873\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(\"Task not found: %s\" % (task_name))\n\n  processor = processors[task_name]()\n\n  label_list = processor.get_labels()\n\n  tokenizer = tokenization.FullTokenizer(","115":"Similar lines in 2 files\n==run_classifier:809\n==run_classifier_clue:834\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    train_input_fn = file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_eval:","116":"Similar lines in 4 files\n==bert_utils:61\n==modeling:1031\n==modeling_google:1045\n==modeling_google_fast:1132\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  \"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n","117":"Similar lines in 3 files\n==run_pretraining:167\n==run_pretraining_google:211\n==run_pretraining_google_fast:211\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n      train_op = optimization.create_optimizer(","118":"Similar lines in 3 files\n==run_classifier:405\n==run_classifier_clue:506\n==run_classifier_sp_google:635\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n\n  # In the demo, we are doing a simple classification task on the entire\n  # segment.\n  #\n  # If you want to use the token-level output, use model.get_sequence_output()\n  # instead.","119":"Similar lines in 3 files\n==run_classifier:29\n==run_classifier_clue:35\n==run_classifier_sp_google:33\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"data_dir\", None,\n    \"The input data dir. Should contain the .tsv files (or other data files) \"\n    \"for the task.\")\n\nflags.DEFINE_string(","120":"Similar lines in 2 files\n==run_classifier:936\n==run_classifier_clue:985\n          num_written_lines += 1\n    assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"data_dir\")\n  flags.mark_flag_as_required(\"task_name\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  flags.mark_flag_as_required(\"bert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()","121":"Similar lines in 3 files\n==run_classifier:821\n==run_classifier_clue:847\n==run_classifier_sp_google:949\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(PaddingInputExample())\n","122":"Similar lines in 3 files\n==modeling:73\n==modeling_google:92\n==modeling_google_fast:92\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n\n  @classmethod\n  def from_dict(cls, json_object):\n    \"\"\"Constructs a `AlbertConfig` from a Python dictionary of parameters.\"\"\"","123":"Similar lines in 3 files\n==modeling:16\n==modeling_google:20\n==modeling_google_fast:20\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport numpy as np\nimport six","124":"Similar lines in 2 files\n==lamb_optimizer_google:49\n==optimization:201\n               name=\"LAMBOptimizer\"):\n    \"\"\"Constructs a LAMBOptimizer.\"\"\"\n    super(LAMBOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n    # exclude_from_layer_adaptation is set to exclude_from_weight_decay if the","125":"Similar lines in 2 files\n==create_pretraining_data:301\n==create_pretraining_data_google:301\n      if current_chunk: # \u5982\u679c\u5f53\u524d\u5757\u4e0d\u4e3a\u7a7a\n        # `a_end` is how many segments from `current_chunk` go into the `A`\n        # (first) sentence.\n        a_end = 1\n        if len(current_chunk) >= 2: # \u5f53\u524d\u5757\uff0c\u5982\u679c\u5305\u542b\u8d85\u8fc7\u4e24\u4e2a\u53e5\u5b50\uff0c\u53d6\u5f53\u524d\u5757\u7684\u4e00\u90e8\u5206\u4f5c\u4e3a\u201cA[SEP]B\u201c\u4e2d\u7684A\u90e8\u5206\n          a_end = rng.randint(1, len(current_chunk) - 1)\n        # \u5c06\u5f53\u524d\u6587\u672c\u6bb5\u4e2d\u9009\u53d6\u51fa\u6765\u7684\u524d\u534a\u90e8\u5206\uff0c\u8d4b\u503c\u7ed9A\u5373tokens_a\n        tokens_a = []\n        for j in range(a_end):\n          tokens_a.extend(current_chunk[j])\n","126":"Similar lines in 2 files\n==create_pretraining_data:26\n==create_pretraining_data_google:34\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\nflags.DEFINE_string(\"input_file\", None,\n                    \"Input raw text file (or comma-separated list of files).\")\n\nflags.DEFINE_string(\n    \"output_file\", None,\n    \"Output TF example file (or comma-separated list of files).\")\n","127":"Similar lines in 2 files\n==run_pretraining_google:18\n==run_pretraining_google_fast:18\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport time\n\nfrom six.moves import range\nimport tensorflow as tf\n","128":"Similar lines in 3 files\n==run_pretraining:439\n==run_pretraining_google:495\n==run_pretraining_google_fast:495\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  model_fn = model_fn_builder(","129":"Similar lines in 3 files\n==run_pretraining:193\n==run_pretraining_google:243\n==run_pretraining_google_fast:243\n        masked_lm_example_loss = tf.reshape(masked_lm_example_loss, [-1])\n        masked_lm_ids = tf.reshape(masked_lm_ids, [-1])\n        masked_lm_weights = tf.reshape(masked_lm_weights, [-1])\n        masked_lm_accuracy = tf.metrics.accuracy(\n            labels=masked_lm_ids,\n            predictions=masked_lm_predictions,\n            weights=masked_lm_weights)\n        masked_lm_mean_loss = tf.metrics.mean(\n            values=masked_lm_example_loss, weights=masked_lm_weights)\n","130":"Similar lines in 3 files\n==run_pretraining:33\n==run_pretraining_google:39\n==run_pretraining_google_fast:39\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"input_file\", None,\n    \"Input TF example files (can be a glob or comma separated).\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n","131":"Similar lines in 4 files\n==run_classifier:764\n==run_classifier_clue:784\n==run_pretraining_google:494\n==run_pretraining_google_fast:494\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n","132":"Similar lines in 5 files\n==run_classifier:508\n==run_classifier_clue:612\n==run_classifier_sp_google:725\n==run_pretraining_google:211\n==run_pretraining_google_fast:211\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:","133":"Similar lines in 5 files\n==run_classifier:469\n==run_classifier_clue:573\n==run_classifier_sp_google:686\n==run_pretraining_google:138\n==run_pretraining_google_fast:138\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]","134":"Similar lines in 4 files\n==run_classifier:790\n==run_classifier_clue:810\n==run_classifier_sp_google:920\n==run_pretraining:454\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,","135":"Similar lines in 4 files\n==run_classifier:519\n==run_classifier_clue:623\n==run_classifier_sp_google:736\n==run_pretraining:177\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n","136":"Similar lines in 3 files\n==run_classifier:418\n==run_classifier_clue:519\n==run_classifier_sp_google:653\n  hidden_size = output_layer.shape[-1].value\n\n  output_weights = tf.get_variable(\n      \"output_weights\", [num_labels, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"output_bias\", [num_labels], initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(\"loss\"):","137":"Similar lines in 3 files\n==optimization:66\n==optimization_finetuning:66\n==optimization_google:96\n    if use_tpu:\n        optimizer = tf.contrib.tpu.CrossShardOptimizer(optimizer)\n\n    tvars = tf.trainable_variables()\n    grads = tf.gradients(loss, tvars)\n\n    # This is how the model was pre-trained.\n    (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n    train_op = optimizer.apply_gradients(","138":"Similar lines in 3 files\n==optimization:26\n==optimization_finetuning:26\n==optimization_google:34\n    global_step = tf.train.get_or_create_global_step()\n\n    learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n    # Implements linear decay of the learning rate.\n    learning_rate = tf.train.polynomial_decay(\n        learning_rate,\n        global_step,\n        num_train_steps,\n        end_learning_rate=0.0,","139":"Similar lines in 3 files\n==modeling:340\n==modeling_google:331\n==modeling_google_fast:333\n  assignment_map = {}\n  initialized_variable_names = {}\n\n  name_to_variable = collections.OrderedDict()\n  for var in tvars:\n    name = var.name\n    m = re.match(\"^(.*):\\\\d+$\", name)\n    if m is not None:\n      name = m.group(1)\n    name_to_variable[name] = var","140":"Similar lines in 2 files\n==lamb_optimizer_google:139\n==optimization_google:195\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"\n    m = re.match(\"^(.*):\\\\d+$\", six.ensure_str(param_name))\n    if m is not None:\n      param_name = m.group(1)\n    return param_name","141":"Similar lines in 4 files\n==lamb_optimizer_google:67\n==optimization:107\n==optimization:212\n==optimization_finetuning:107\n    def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n        \"\"\"See base class.\"\"\"\n        assignments = []\n        for (grad, param) in grads_and_vars:\n            if grad is None or param is None:\n                continue\n\n            param_name = self._get_variable_name(param.name)\n\n            m = tf.get_variable(","142":"Similar lines in 2 files\n==create_pretraining_data:361\n==create_pretraining_data_google:380\n            masked_lm_positions=masked_lm_positions,\n            masked_lm_labels=masked_lm_labels)\n        instances.append(instance)\n      current_chunk = []\n      current_length = 0\n    i += 1\n\n  return instances\n\n","143":"Similar lines in 2 files\n==tokenization:114\n==tokenization_google:186\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef load_vocab(vocab_file):\n  \"\"\"Loads a vocabulary file into a dictionary.\"\"\"\n  vocab = collections.OrderedDict()","144":"Similar lines in 3 files\n==run_pretraining:74\n==run_pretraining_google:90\n==run_pretraining_google_fast:90\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\"max_eval_steps\", 100, \"Maximum number of eval steps.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU\/CPU.\")\n","145":"Similar lines in 3 files\n==run_pretraining:50\n==run_pretraining_google:59\n==run_pretraining_google_fast:59\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded. Must match data generation.\")\n\nflags.DEFINE_integer(\n    \"max_predictions_per_seq\", 20,\n    \"Maximum number of masked LM predictions per sequence. \"\n    \"Must match data generation.\")\n","146":"Similar lines in 2 files\n==run_classifier_clue:291\n==run_classifier_sp_google:553\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"label_ids\"] = create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())","147":"Similar lines in 5 files\n==run_classifier:506\n==run_classifier_clue:610\n==run_classifier_sp_google:723\n==run_pretraining:165\n==similarity:81\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)","148":"Similar lines in 4 files\n==run_classifier:390\n==run_classifier_clue:491\n==run_classifier_sp_google:620\n==similarity:138\n        while True:\n            total_length = len(tokens_a) + len(tokens_b)\n            if total_length <= max_length:\n                break\n            if len(tokens_a) > len(tokens_b):\n                tokens_a.pop()\n            else:\n                tokens_b.pop()\n","149":"Similar lines in 4 files\n==run_classifier:765\n==run_classifier_clue:785\n==run_classifier_sp_google:895\n==run_pretraining:439\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n","150":"Similar lines in 3 files\n==run_classifier:725\n==run_classifier_clue:745\n==run_classifier_sp_google:856\n  }\n\n  tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                FLAGS.init_checkpoint)\n\n  if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n    raise ValueError(\n        \"At least one of `do_train`, `do_eval` or `do_predict' must be True.\")\n","151":"Similar lines in 2 files\n==run_classifier:625\n==run_classifier_sp_google:321\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test.txt\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n","152":"Similar lines in 3 files\n==run_classifier:531\n==run_classifier_clue:635\n==run_classifier_sp_google:747\n        accuracy = tf.metrics.accuracy(\n            labels=label_ids, predictions=predictions, weights=is_real_example)\n        loss = tf.metrics.mean(values=per_example_loss, weights=is_real_example)\n        return {\n            \"eval_accuracy\": accuracy,\n            \"eval_loss\": loss,\n        }\n\n      eval_metrics = (metric_fn,","153":"Similar lines in 3 files\n==modeling_google:688\n==modeling_google_fast:692\n==modeling_google_fast:744\n    with tf.variable_scope(name):\n      w = tf.get_variable(\n          name=\"kernel\",\n          shape=[hidden_size, output_size],\n          initializer=initializer)\n      b = tf.get_variable(\n          name=\"bias\", shape=[output_size], initializer=tf.zeros_initializer)\n      ret = tf.einsum(\"BFH,HO->BFO\", input_tensor, w)\n      ret += b","154":"Similar lines in 6 files\n==create_pretraining_data:114\n==run_classifier:276\n==run_classifier_clue:203\n==run_classifier_clue:377\n==run_classifier_sp_google:506\n==similarity:210\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n","155":"Similar lines in 2 files\n==create_pretraining_data:559\n==create_pretraining_data_google:533\n          masked_token = tokens[index]\n        # 10% of the time, replace with random word\n        else:\n          masked_token = vocab_words[rng.randint(0, len(vocab_words) - 1)]\n\n      output_tokens[index] = masked_token\n\n      masked_lms.append(MaskedLmInstance(index=index, label=tokens[index]))\n  assert len(masked_lms) <= num_to_predict","156":"Similar lines in 2 files\n==create_pretraining_data:448\n==create_pretraining_data_google:346\n        else: # \u6709\u53e6\u591650%\u7684\u51e0\u4e4e\uff0c\u4ece\u5f53\u524d\u6587\u672c\u5757\uff08\u957f\u5ea6\u4e3amax_sequence_length\uff09\u4e2d\u7684\u540e\u6bb5\u4e2d\u586b\u5145\u5230tokens_b\u5373\u201cA[SEP]B\u201c\u4e2d\u7684B\u3002\n          is_random_next = False\n          for j in range(a_end, len(current_chunk)):\n            tokens_b.extend(current_chunk[j])\n        truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng)\n\n        assert len(tokens_a) >= 1\n        assert len(tokens_b) >= 1\n","157":"Similar lines in 2 files\n==classifier_utils:162\n==run_classifier_sp_google:254\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"contradiction\", \"entailment\", \"neutral\"]\n\n","158":"Similar lines in 4 files\n==bert_utils:0\n==modeling:16\n==modeling_google:20\n==modeling_google_fast:20\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re","159":"Similar lines in 2 files\n==tokenization:172\n==tokenization_google:258\n    split_tokens = []\n    for token in self.basic_tokenizer.tokenize(text):\n      for sub_token in self.wordpiece_tokenizer.tokenize(token):\n        split_tokens.append(sub_token)\n\n    return split_tokens\n\n  def convert_tokens_to_ids(self, tokens):","160":"Similar lines in 2 files\n==tokenization:16\n==tokenization_google:19\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport re\nimport unicodedata\nimport six","161":"Similar lines in 3 files\n==run_pretraining:281\n==run_pretraining_google:333\n==run_pretraining_google_fast:333\n    per_example_loss = -tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])\n    numerator = tf.reduce_sum(label_weights * per_example_loss)\n    denominator = tf.reduce_sum(label_weights) + 1e-5\n    loss = numerator \/ denominator\n\n  return (loss, per_example_loss, log_probs)\n\n","162":"Similar lines in 3 files\n==run_classifier_sp_google:633\n==run_pretraining_google:158\n==run_pretraining_google_fast:158\n    model = modeling.AlbertModel(\n        config=albert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n","163":"Similar lines in 3 files\n==run_classifier_clue:245\n==run_classifier_sp_google:445\n==similarity:149\n        label_map = {}\n        for (i, label) in enumerate(label_list):\n            label_map[label] = i\n\n        tokens_a = tokenizer.tokenize(example.text_a)\n        tokens_b = None\n        if example.text_b:\n            tokens_b = tokenizer.tokenize(example.text_b)","164":"Similar lines in 3 files\n==run_classifier:486\n==run_classifier_clue:590\n==similarity:69\n            is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n            (total_loss, per_example_loss, logits, probabilities) = create_model(\n                bert_config, is_training, input_ids, input_mask, segment_ids, label_ids,\n                num_labels, use_one_hot_embeddings)\n\n            tvars = tf.trainable_variables()\n            initialized_variable_names = {}","165":"Similar lines in 4 files\n==run_classifier:472\n==run_classifier_clue:576\n==run_classifier_sp_google:689\n==similarity:60\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]","166":"Similar lines in 3 files\n==run_classifier:403\n==run_classifier_clue:504\n==run_pretraining:130\n  model = modeling.BertModel(\n      config=bert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n","167":"Similar lines in 3 files\n==run_classifier:936\n==run_classifier_clue:985\n==run_classifier_sp_google:1069\n        num_written_lines += 1\n    assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"data_dir\")\n  flags.mark_flag_as_required(\"task_name\")\n  flags.mark_flag_as_required(\"vocab_file\")","168":"Similar lines in 3 files\n==run_classifier:541\n==run_classifier_clue:645\n==run_classifier_sp_google:758\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,","169":"Similar lines in 3 files\n==run_classifier:49\n==run_classifier_clue:55\n==run_classifier_sp_google:57\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,","170":"Similar lines in 4 files\n==modeling:427\n==modeling:478\n==modeling_google:476\n==modeling_google_fast:478\n  if input_ids.shape.ndims == 2:\n    input_ids = tf.expand_dims(input_ids, axis=[-1])\n\n  embedding_table = tf.get_variable(\n      name=word_embedding_name,\n      shape=[vocab_size, embedding_size],\n      initializer=create_initializer(initializer_range))\n","171":"Similar lines in 3 files\n==modeling:177\n==modeling_google:189\n==modeling_google_fast:189\n            embedding_size=config.embedding_size,\n            initializer_range=config.initializer_range,\n            word_embedding_name=\"word_embeddings\",\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n        # Add positional embeddings and token type embeddings, then layer\n        # normalize and perform dropout.\n        self.embedding_output = embedding_postprocessor(","172":"Similar lines in 2 files\n==create_pretraining_data:119\n==create_pretraining_data_google:150\n    assert len(input_ids) == max_seq_length\n    assert len(input_mask) == max_seq_length\n    assert len(segment_ids) == max_seq_length\n\n    masked_lm_positions = list(instance.masked_lm_positions)\n    masked_lm_ids = tokenizer.convert_tokens_to_ids(instance.masked_lm_labels)\n    masked_lm_weights = [1.0] * len(masked_lm_ids)\n","173":"Similar lines in 2 files\n==create_pretraining_data:78\n==create_pretraining_data_google:105\n    self.masked_lm_positions = masked_lm_positions\n    self.masked_lm_labels = masked_lm_labels\n\n  def __str__(self):\n    s = \"\"\n    s += \"tokens: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.tokens]))\n    s += \"segment_ids: %s\\n\" % (\" \".join([str(x) for x in self.segment_ids]))","174":"Similar lines in 4 files\n==classifier_utils:349\n==classifier_utils:422\n==run_classifier_sp_google:366\n==run_classifier_sp_google:407\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):","175":"Similar lines in 3 files\n==run_pretraining_google:211\n==run_pretraining_google_fast:211\n==similarity:83\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)","176":"Similar lines in 4 files\n==run_pretraining:116\n==run_pretraining_google:141\n==run_pretraining_google_fast:141\n==similarity:60\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]","177":"Similar lines in 6 files\n==run_classifier:522\n==run_classifier_clue:626\n==run_classifier_sp_google:739\n==run_pretraining:180\n==run_pretraining_google:225\n==run_pretraining_google_fast:225\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n","178":"Similar lines in 2 files\n==run_classifier:16\n==run_classifier_sp_google:18\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport csv\nimport os","179":"Similar lines in 2 files\n==optimization_finetuning:58\n==optimization_google:77\n  optimizer = AdamWeightDecayOptimizer(\n      learning_rate=learning_rate,\n      weight_decay_rate=0.01,\n      beta_1=0.9,\n      beta_2=0.999, # 0.98 ONLY USED FOR PRETRAIN. MUST CHANGE AT FINE-TUNING 0.999,\n      epsilon=1e-6,\n      exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])","180":"Similar lines in 2 files\n==modeling_google:899\n==modeling_google_fast:985\n      with tf.variable_scope(\"output\"):\n        ffn_output = dense_layer_2d(\n            intermediate_output,\n            hidden_size,\n            create_initializer(initializer_range),\n            None,\n            num_attention_heads=num_attention_heads,","181":"Similar lines in 3 files\n==lamb_optimizer_google:53\n==optimization_finetuning:100\n==optimization_google:131\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n","182":"Similar lines in 4 files\n==lamb_optimizer_google:41\n==optimization:89\n==optimization_finetuning:89\n==optimization_google:120\n    def __init__(self,\n                 learning_rate,\n                 weight_decay_rate=0.0,\n                 beta_1=0.9,\n                 beta_2=0.999,\n                 epsilon=1e-6,\n                 exclude_from_weight_decay=None,","183":"Similar lines in 2 files\n==create_pretraining_data_google:45\n==run_classifier_sp_google:50\nflags.DEFINE_string(\n    \"vocab_file\", None,\n    \"The vocabulary file that the ALBERT model was trained on.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n","184":"Similar lines in 8 files\n==create_pretraining_data:336\n==create_pretraining_data:458\n==create_pretraining_data_google:355\n==run_classifier:252\n==run_classifier_clue:179\n==run_classifier_clue:353\n==run_classifier_sp_google:482\n==similarity:186\n        tokens = []\n        segment_ids = []\n        tokens.append(\"[CLS]\")\n        segment_ids.append(0)\n        for token in tokens_a:\n            tokens.append(token)\n            segment_ids.append(0)","185":"Similar lines in 2 files\n==classifier_utils:48\n==tokenization_google:162\n      return text\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n","186":"Similar lines in 2 files\n==tokenization:124\n==tokenization_google:195\n  with tf.gfile.GFile(vocab_file, \"r\") as reader:\n    while True:\n      token = convert_to_unicode(reader.readline())\n      if not token:\n        break\n      token = token.strip() # previous: token.strip().split()[0]","187":"Similar lines in 2 files\n==run_classifier_sp_google:635\n==run_pretraining:132\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n","188":"Similar lines in 5 files\n==run_classifier:405\n==run_classifier_clue:506\n==run_pretraining:132\n==run_pretraining_google:160\n==run_pretraining_google_fast:160\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n","189":"Similar lines in 6 files\n==run_classifier:541\n==run_classifier_clue:645\n==run_classifier_sp_google:758\n==run_pretraining:227\n==run_pretraining_google:282\n==run_pretraining_google_fast:282\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:","190":"Similar lines in 2 files\n==run_classifier:929\n==run_classifier_sp_google:1058\n        probabilities = prediction[\"probabilities\"]\n        if i >= num_actual_predict_examples:\n          break\n        output_line = \"\\t\".join(\n            str(class_probability)\n            for class_probability in probabilities) + \"\\n\"","191":"Similar lines in 5 files\n==run_classifier:756\n==run_classifier_clue:776\n==run_classifier_sp_google:888\n==run_pretraining_google:488\n==run_pretraining_google_fast:488\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2","192":"Similar lines in 2 files\n==run_classifier:693\n==run_classifier_sp_google:342\n          examples.append(\n              InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n      except Exception:\n          print('###error.i:', i, line)\n    return examples\n","193":"Similar lines in 3 files\n==run_classifier:59\n==run_classifier_clue:65\n==run_classifier_sp_google:70\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(","194":"Similar lines in 3 files\n==optimization:59\n==optimization_google:78\n==optimization_google:87\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])","195":"Similar lines in 8 files\n==create_pretraining_data:347\n==create_pretraining_data:469\n==create_pretraining_data_google:366\n==run_classifier:263\n==run_classifier_clue:190\n==run_classifier_clue:364\n==run_classifier_sp_google:493\n==similarity:197\n        for token in tokens_b:\n          tokens.append(token)\n          segment_ids.append(1)\n        tokens.append(\"[SEP]\")\n        segment_ids.append(1)\n","196":"Similar lines in 2 files\n==create_pretraining_data:112\n==create_pretraining_data_google:142\n    assert len(input_ids) <= max_seq_length\n\n    while len(input_ids) < max_seq_length:\n      input_ids.append(0)\n      input_mask.append(0)\n      segment_ids.append(0)","197":"Similar lines in 2 files\n==create_pretraining_data:40\n==create_pretraining_data_google:52\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_bool(","198":"Similar lines in 2 files\n==create_pretraining_data:16\n==create_pretraining_data_google:19\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport random","199":"Similar lines in 3 files\n==classifier_utils:35\n==tokenization:77\n==tokenization_google:149\ndef convert_to_unicode(text):\n  \"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):","200":"Similar lines in 2 files\n==tokenization:107\n==tokenization_google:179\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text","201":"Similar lines in 3 files\n==run_pretraining:480\n==run_pretraining_google:542\n==run_pretraining_google_fast:542\n    eval_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=False)","202":"Similar lines in 3 files\n==run_pretraining:450\n==run_pretraining_google:506\n==run_pretraining_google_fast:506\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.num_train_steps,\n      num_warmup_steps=FLAGS.num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,","203":"Similar lines in 3 files\n==run_pretraining:346\n==run_pretraining_google:408\n==run_pretraining_google_fast:408\n          \"masked_lm_positions\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_ids\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_weights\":","204":"Similar lines in 5 files\n==run_classifier:795\n==run_classifier_clue:815\n==run_classifier_sp_google:925\n==run_pretraining_google:518\n==run_pretraining_google_fast:518\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,","205":"Similar lines in 3 files\n==run_classifier:930\n==run_classifier_clue:972\n==run_classifier_sp_google:1059\n          if i >= num_actual_predict_examples:\n            break\n          output_line = \"\\t\".join(\n              str(class_probability)\n              for class_probability in probabilities) + \"\\n\"","206":"Similar lines in 2 files\n==run_classifier:925\n==run_classifier_clue:966\n    with tf.gfile.GFile(output_predict_file, \"w\") as writer:\n      num_written_lines = 0\n      tf.logging.info(\"***** Predict results *****\")\n      for (i, prediction) in enumerate(result):\n        probabilities = prediction[\"probabilities\"]","207":"Similar lines in 2 files\n==modeling_google:668\n==modeling_google_fast:669\ndef dense_layer_2d(input_tensor,\n                   output_size,\n                   initializer,\n                   activation,\n                   num_attention_heads=1,","208":"Similar lines in 3 files\n==modeling:641\n==modeling_google:751\n==modeling_google_fast:836\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,","209":"Similar lines in 3 files\n==modeling:216\n==modeling_google:221\n==modeling_google_fast:221\n                intermediate_act_fn=get_activation(config.hidden_act),\n                hidden_dropout_prob=config.hidden_dropout_prob,\n                attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n                initializer_range=config.initializer_range,\n                do_return_all_layers=True)","210":"Similar lines in 5 files\n==lamb_optimizer_google:78\n==optimization:118\n==optimization:223\n==optimization_finetuning:118\n==optimization_google:149\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(","211":"Similar lines in 3 files\n==create_pretraining_data:356\n==create_pretraining_data:478\n==create_pretraining_data_google:374\n             tokens, masked_lm_prob, max_predictions_per_seq, vocab_words, rng)\n        instance = TrainingInstance( # \u521b\u5efa\u8bad\u7ec3\u5b9e\u4f8b\u7684\u5bf9\u8c61\n            tokens=tokens,\n            segment_ids=segment_ids,\n            is_random_next=is_random_next,"},"number":{"0":"R1714","1":"C0121","2":"R1714","3":"C0121","4":"C0121","5":"R1714","6":"R1714","7":"R0912","8":"W0401","9":"R1714","10":"R1714","11":"R1714","12":"R1714","13":"R0801","14":"R0801","15":"R0801","16":"R0801","17":"R0801","18":"R0801","19":"R0801","20":"R0801","21":"R0801","22":"R0801","23":"R0801","24":"R0801","25":"R0801","26":"R0801","27":"R0801","28":"R0801","29":"R0801","30":"R0801","31":"R0801","32":"R0801","33":"R0801","34":"R0801","35":"R0801","36":"R0801","37":"R0801","38":"R0801","39":"R0801","40":"R0801","41":"R0801","42":"R0801","43":"R0801","44":"R0801","45":"R0801","46":"R0801","47":"R0801","48":"R0801","49":"R0801","50":"R0801","51":"R0801","52":"R0801","53":"R0801","54":"R0801","55":"R0801","56":"R0801","57":"R0801","58":"R0801","59":"R0801","60":"R0801","61":"R0801","62":"R0801","63":"R0801","64":"R0801","65":"R0801","66":"R0801","67":"R0801","68":"R0801","69":"R0801","70":"R0801","71":"R0801","72":"R0801","73":"R0801","74":"R0801","75":"R0801","76":"R0801","77":"R0801","78":"R0801","79":"R0801","80":"R0801","81":"R0801","82":"R0801","83":"R0801","84":"R0801","85":"R0801","86":"R0801","87":"R0801","88":"R0801","89":"R0801","90":"R0801","91":"R0801","92":"R0801","93":"R0801","94":"R0801","95":"R0801","96":"R0801","97":"R0801","98":"R0801","99":"R0801","100":"R0801","101":"R0801","102":"R0801","103":"R0801","104":"R0801","105":"R0801","106":"R0801","107":"R0801","108":"R0801","109":"R0801","110":"R0801","111":"R0801","112":"R0801","113":"R0801","114":"R0801","115":"R0801","116":"R0801","117":"R0801","118":"R0801","119":"R0801","120":"R0801","121":"R0801","122":"R0801","123":"R0801","124":"R0801","125":"R0801","126":"R0801","127":"R0801","128":"R0801","129":"R0801","130":"R0801","131":"R0801","132":"R0801","133":"R0801","134":"R0801","135":"R0801","136":"R0801","137":"R0801","138":"R0801","139":"R0801","140":"R0801","141":"R0801","142":"R0801","143":"R0801","144":"R0801","145":"R0801","146":"R0801","147":"R0801","148":"R0801","149":"R0801","150":"R0801","151":"R0801","152":"R0801","153":"R0801","154":"R0801","155":"R0801","156":"R0801","157":"R0801","158":"R0801","159":"R0801","160":"R0801","161":"R0801","162":"R0801","163":"R0801","164":"R0801","165":"R0801","166":"R0801","167":"R0801","168":"R0801","169":"R0801","170":"R0801","171":"R0801","172":"R0801","173":"R0801","174":"R0801","175":"R0801","176":"R0801","177":"R0801","178":"R0801","179":"R0801","180":"R0801","181":"R0801","182":"R0801","183":"R0801","184":"R0801","185":"R0801","186":"R0801","187":"R0801","188":"R0801","189":"R0801","190":"R0801","191":"R0801","192":"R0801","193":"R0801","194":"R0801","195":"R0801","196":"R0801","197":"R0801","198":"R0801","199":"R0801","200":"R0801","201":"R0801","202":"R0801","203":"R0801","204":"R0801","205":"R0801","206":"R0801","207":"R0801","208":"R0801","209":"R0801","210":"R0801","211":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint","15":"pylint","16":"pylint","17":"pylint","18":"pylint","19":"pylint","20":"pylint","21":"pylint","22":"pylint","23":"pylint","24":"pylint","25":"pylint","26":"pylint","27":"pylint","28":"pylint","29":"pylint","30":"pylint","31":"pylint","32":"pylint","33":"pylint","34":"pylint","35":"pylint","36":"pylint","37":"pylint","38":"pylint","39":"pylint","40":"pylint","41":"pylint","42":"pylint","43":"pylint","44":"pylint","45":"pylint","46":"pylint","47":"pylint","48":"pylint","49":"pylint","50":"pylint","51":"pylint","52":"pylint","53":"pylint","54":"pylint","55":"pylint","56":"pylint","57":"pylint","58":"pylint","59":"pylint","60":"pylint","61":"pylint","62":"pylint","63":"pylint","64":"pylint","65":"pylint","66":"pylint","67":"pylint","68":"pylint","69":"pylint","70":"pylint","71":"pylint","72":"pylint","73":"pylint","74":"pylint","75":"pylint","76":"pylint","77":"pylint","78":"pylint","79":"pylint","80":"pylint","81":"pylint","82":"pylint","83":"pylint","84":"pylint","85":"pylint","86":"pylint","87":"pylint","88":"pylint","89":"pylint","90":"pylint","91":"pylint","92":"pylint","93":"pylint","94":"pylint","95":"pylint","96":"pylint","97":"pylint","98":"pylint","99":"pylint","100":"pylint","101":"pylint","102":"pylint","103":"pylint","104":"pylint","105":"pylint","106":"pylint","107":"pylint","108":"pylint","109":"pylint","110":"pylint","111":"pylint","112":"pylint","113":"pylint","114":"pylint","115":"pylint","116":"pylint","117":"pylint","118":"pylint","119":"pylint","120":"pylint","121":"pylint","122":"pylint","123":"pylint","124":"pylint","125":"pylint","126":"pylint","127":"pylint","128":"pylint","129":"pylint","130":"pylint","131":"pylint","132":"pylint","133":"pylint","134":"pylint","135":"pylint","136":"pylint","137":"pylint","138":"pylint","139":"pylint","140":"pylint","141":"pylint","142":"pylint","143":"pylint","144":"pylint","145":"pylint","146":"pylint","147":"pylint","148":"pylint","149":"pylint","150":"pylint","151":"pylint","152":"pylint","153":"pylint","154":"pylint","155":"pylint","156":"pylint","157":"pylint","158":"pylint","159":"pylint","160":"pylint","161":"pylint","162":"pylint","163":"pylint","164":"pylint","165":"pylint","166":"pylint","167":"pylint","168":"pylint","169":"pylint","170":"pylint","171":"pylint","172":"pylint","173":"pylint","174":"pylint","175":"pylint","176":"pylint","177":"pylint","178":"pylint","179":"pylint","180":"pylint","181":"pylint","182":"pylint","183":"pylint","184":"pylint","185":"pylint","186":"pylint","187":"pylint","188":"pylint","189":"pylint","190":"pylint","191":"pylint","192":"pylint","193":"pylint","194":"pylint","195":"pylint","196":"pylint","197":"pylint","198":"pylint","199":"pylint","200":"pylint","201":"pylint","202":"pylint","203":"pylint","204":"pylint","205":"pylint","206":"pylint","207":"pylint","208":"pylint","209":"pylint","210":"pylint","211":"pylint"},"lines_amount":{"0":920,"1":708,"2":708,"3":708,"4":708,"5":708,"6":657,"7":657,"8":996,"9":402,"10":402,"11":497,"12":497,"13":497,"14":497,"15":497,"16":497,"17":497,"18":497,"19":497,"20":497,"21":497,"22":497,"23":497,"24":497,"25":497,"26":497,"27":497,"28":497,"29":497,"30":497,"31":497,"32":497,"33":497,"34":497,"35":497,"36":497,"37":497,"38":497,"39":497,"40":497,"41":497,"42":497,"43":497,"44":497,"45":497,"46":497,"47":497,"48":497,"49":497,"50":497,"51":497,"52":497,"53":497,"54":497,"55":497,"56":497,"57":497,"58":497,"59":497,"60":497,"61":497,"62":497,"63":497,"64":497,"65":497,"66":497,"67":497,"68":497,"69":497,"70":497,"71":497,"72":497,"73":497,"74":497,"75":497,"76":497,"77":497,"78":497,"79":497,"80":497,"81":497,"82":497,"83":497,"84":497,"85":497,"86":497,"87":497,"88":497,"89":497,"90":497,"91":497,"92":497,"93":497,"94":497,"95":497,"96":497,"97":497,"98":497,"99":497,"100":497,"101":497,"102":497,"103":497,"104":497,"105":497,"106":497,"107":497,"108":497,"109":497,"110":497,"111":497,"112":497,"113":497,"114":497,"115":497,"116":497,"117":497,"118":497,"119":497,"120":497,"121":497,"122":497,"123":497,"124":497,"125":497,"126":497,"127":497,"128":497,"129":497,"130":497,"131":497,"132":497,"133":497,"134":497,"135":497,"136":497,"137":497,"138":497,"139":497,"140":497,"141":497,"142":497,"143":497,"144":497,"145":497,"146":497,"147":497,"148":497,"149":497,"150":497,"151":497,"152":497,"153":497,"154":497,"155":497,"156":497,"157":497,"158":497,"159":497,"160":497,"161":497,"162":497,"163":497,"164":497,"165":497,"166":497,"167":497,"168":497,"169":497,"170":497,"171":497,"172":497,"173":497,"174":497,"175":497,"176":497,"177":497,"178":497,"179":497,"180":497,"181":497,"182":497,"183":497,"184":497,"185":497,"186":497,"187":497,"188":497,"189":497,"190":497,"191":497,"192":497,"193":497,"194":497,"195":497,"196":497,"197":497,"198":497,"199":497,"200":497,"201":497,"202":497,"203":497,"204":497,"205":497,"206":497,"207":497,"208":497,"209":497,"210":497,"211":497},"commit":{"0":"652faed6b362c730eb046e9a2e5620d898736a01","1":"652faed6b362c730eb046e9a2e5620d898736a01","2":"652faed6b362c730eb046e9a2e5620d898736a01","3":"652faed6b362c730eb046e9a2e5620d898736a01","4":"652faed6b362c730eb046e9a2e5620d898736a01","5":"652faed6b362c730eb046e9a2e5620d898736a01","6":"652faed6b362c730eb046e9a2e5620d898736a01","7":"652faed6b362c730eb046e9a2e5620d898736a01","8":"652faed6b362c730eb046e9a2e5620d898736a01","9":"652faed6b362c730eb046e9a2e5620d898736a01","10":"652faed6b362c730eb046e9a2e5620d898736a01","11":"652faed6b362c730eb046e9a2e5620d898736a01","12":"652faed6b362c730eb046e9a2e5620d898736a01","13":"652faed6b362c730eb046e9a2e5620d898736a01","14":"652faed6b362c730eb046e9a2e5620d898736a01","15":"652faed6b362c730eb046e9a2e5620d898736a01","16":"652faed6b362c730eb046e9a2e5620d898736a01","17":"652faed6b362c730eb046e9a2e5620d898736a01","18":"652faed6b362c730eb046e9a2e5620d898736a01","19":"652faed6b362c730eb046e9a2e5620d898736a01","20":"652faed6b362c730eb046e9a2e5620d898736a01","21":"652faed6b362c730eb046e9a2e5620d898736a01","22":"652faed6b362c730eb046e9a2e5620d898736a01","23":"652faed6b362c730eb046e9a2e5620d898736a01","24":"652faed6b362c730eb046e9a2e5620d898736a01","25":"652faed6b362c730eb046e9a2e5620d898736a01","26":"652faed6b362c730eb046e9a2e5620d898736a01","27":"652faed6b362c730eb046e9a2e5620d898736a01","28":"652faed6b362c730eb046e9a2e5620d898736a01","29":"652faed6b362c730eb046e9a2e5620d898736a01","30":"652faed6b362c730eb046e9a2e5620d898736a01","31":"652faed6b362c730eb046e9a2e5620d898736a01","32":"652faed6b362c730eb046e9a2e5620d898736a01","33":"652faed6b362c730eb046e9a2e5620d898736a01","34":"652faed6b362c730eb046e9a2e5620d898736a01","35":"652faed6b362c730eb046e9a2e5620d898736a01","36":"652faed6b362c730eb046e9a2e5620d898736a01","37":"652faed6b362c730eb046e9a2e5620d898736a01","38":"652faed6b362c730eb046e9a2e5620d898736a01","39":"652faed6b362c730eb046e9a2e5620d898736a01","40":"652faed6b362c730eb046e9a2e5620d898736a01","41":"652faed6b362c730eb046e9a2e5620d898736a01","42":"652faed6b362c730eb046e9a2e5620d898736a01","43":"652faed6b362c730eb046e9a2e5620d898736a01","44":"652faed6b362c730eb046e9a2e5620d898736a01","45":"652faed6b362c730eb046e9a2e5620d898736a01","46":"652faed6b362c730eb046e9a2e5620d898736a01","47":"652faed6b362c730eb046e9a2e5620d898736a01","48":"652faed6b362c730eb046e9a2e5620d898736a01","49":"652faed6b362c730eb046e9a2e5620d898736a01","50":"652faed6b362c730eb046e9a2e5620d898736a01","51":"652faed6b362c730eb046e9a2e5620d898736a01","52":"652faed6b362c730eb046e9a2e5620d898736a01","53":"652faed6b362c730eb046e9a2e5620d898736a01","54":"652faed6b362c730eb046e9a2e5620d898736a01","55":"652faed6b362c730eb046e9a2e5620d898736a01","56":"652faed6b362c730eb046e9a2e5620d898736a01","57":"652faed6b362c730eb046e9a2e5620d898736a01","58":"652faed6b362c730eb046e9a2e5620d898736a01","59":"652faed6b362c730eb046e9a2e5620d898736a01","60":"652faed6b362c730eb046e9a2e5620d898736a01","61":"652faed6b362c730eb046e9a2e5620d898736a01","62":"652faed6b362c730eb046e9a2e5620d898736a01","63":"652faed6b362c730eb046e9a2e5620d898736a01","64":"652faed6b362c730eb046e9a2e5620d898736a01","65":"652faed6b362c730eb046e9a2e5620d898736a01","66":"652faed6b362c730eb046e9a2e5620d898736a01","67":"652faed6b362c730eb046e9a2e5620d898736a01","68":"652faed6b362c730eb046e9a2e5620d898736a01","69":"652faed6b362c730eb046e9a2e5620d898736a01","70":"652faed6b362c730eb046e9a2e5620d898736a01","71":"652faed6b362c730eb046e9a2e5620d898736a01","72":"652faed6b362c730eb046e9a2e5620d898736a01","73":"652faed6b362c730eb046e9a2e5620d898736a01","74":"652faed6b362c730eb046e9a2e5620d898736a01","75":"652faed6b362c730eb046e9a2e5620d898736a01","76":"652faed6b362c730eb046e9a2e5620d898736a01","77":"652faed6b362c730eb046e9a2e5620d898736a01","78":"652faed6b362c730eb046e9a2e5620d898736a01","79":"652faed6b362c730eb046e9a2e5620d898736a01","80":"652faed6b362c730eb046e9a2e5620d898736a01","81":"652faed6b362c730eb046e9a2e5620d898736a01","82":"652faed6b362c730eb046e9a2e5620d898736a01","83":"652faed6b362c730eb046e9a2e5620d898736a01","84":"652faed6b362c730eb046e9a2e5620d898736a01","85":"652faed6b362c730eb046e9a2e5620d898736a01","86":"652faed6b362c730eb046e9a2e5620d898736a01","87":"652faed6b362c730eb046e9a2e5620d898736a01","88":"652faed6b362c730eb046e9a2e5620d898736a01","89":"652faed6b362c730eb046e9a2e5620d898736a01","90":"652faed6b362c730eb046e9a2e5620d898736a01","91":"652faed6b362c730eb046e9a2e5620d898736a01","92":"652faed6b362c730eb046e9a2e5620d898736a01","93":"652faed6b362c730eb046e9a2e5620d898736a01","94":"652faed6b362c730eb046e9a2e5620d898736a01","95":"652faed6b362c730eb046e9a2e5620d898736a01","96":"652faed6b362c730eb046e9a2e5620d898736a01","97":"652faed6b362c730eb046e9a2e5620d898736a01","98":"652faed6b362c730eb046e9a2e5620d898736a01","99":"652faed6b362c730eb046e9a2e5620d898736a01","100":"652faed6b362c730eb046e9a2e5620d898736a01","101":"652faed6b362c730eb046e9a2e5620d898736a01","102":"652faed6b362c730eb046e9a2e5620d898736a01","103":"652faed6b362c730eb046e9a2e5620d898736a01","104":"652faed6b362c730eb046e9a2e5620d898736a01","105":"652faed6b362c730eb046e9a2e5620d898736a01","106":"652faed6b362c730eb046e9a2e5620d898736a01","107":"652faed6b362c730eb046e9a2e5620d898736a01","108":"652faed6b362c730eb046e9a2e5620d898736a01","109":"652faed6b362c730eb046e9a2e5620d898736a01","110":"652faed6b362c730eb046e9a2e5620d898736a01","111":"652faed6b362c730eb046e9a2e5620d898736a01","112":"652faed6b362c730eb046e9a2e5620d898736a01","113":"652faed6b362c730eb046e9a2e5620d898736a01","114":"652faed6b362c730eb046e9a2e5620d898736a01","115":"652faed6b362c730eb046e9a2e5620d898736a01","116":"652faed6b362c730eb046e9a2e5620d898736a01","117":"652faed6b362c730eb046e9a2e5620d898736a01","118":"652faed6b362c730eb046e9a2e5620d898736a01","119":"652faed6b362c730eb046e9a2e5620d898736a01","120":"652faed6b362c730eb046e9a2e5620d898736a01","121":"652faed6b362c730eb046e9a2e5620d898736a01","122":"652faed6b362c730eb046e9a2e5620d898736a01","123":"652faed6b362c730eb046e9a2e5620d898736a01","124":"652faed6b362c730eb046e9a2e5620d898736a01","125":"652faed6b362c730eb046e9a2e5620d898736a01","126":"652faed6b362c730eb046e9a2e5620d898736a01","127":"652faed6b362c730eb046e9a2e5620d898736a01","128":"652faed6b362c730eb046e9a2e5620d898736a01","129":"652faed6b362c730eb046e9a2e5620d898736a01","130":"652faed6b362c730eb046e9a2e5620d898736a01","131":"652faed6b362c730eb046e9a2e5620d898736a01","132":"652faed6b362c730eb046e9a2e5620d898736a01","133":"652faed6b362c730eb046e9a2e5620d898736a01","134":"652faed6b362c730eb046e9a2e5620d898736a01","135":"652faed6b362c730eb046e9a2e5620d898736a01","136":"652faed6b362c730eb046e9a2e5620d898736a01","137":"652faed6b362c730eb046e9a2e5620d898736a01","138":"652faed6b362c730eb046e9a2e5620d898736a01","139":"652faed6b362c730eb046e9a2e5620d898736a01","140":"652faed6b362c730eb046e9a2e5620d898736a01","141":"652faed6b362c730eb046e9a2e5620d898736a01","142":"652faed6b362c730eb046e9a2e5620d898736a01","143":"652faed6b362c730eb046e9a2e5620d898736a01","144":"652faed6b362c730eb046e9a2e5620d898736a01","145":"652faed6b362c730eb046e9a2e5620d898736a01","146":"652faed6b362c730eb046e9a2e5620d898736a01","147":"652faed6b362c730eb046e9a2e5620d898736a01","148":"652faed6b362c730eb046e9a2e5620d898736a01","149":"652faed6b362c730eb046e9a2e5620d898736a01","150":"652faed6b362c730eb046e9a2e5620d898736a01","151":"652faed6b362c730eb046e9a2e5620d898736a01","152":"652faed6b362c730eb046e9a2e5620d898736a01","153":"652faed6b362c730eb046e9a2e5620d898736a01","154":"652faed6b362c730eb046e9a2e5620d898736a01","155":"652faed6b362c730eb046e9a2e5620d898736a01","156":"652faed6b362c730eb046e9a2e5620d898736a01","157":"652faed6b362c730eb046e9a2e5620d898736a01","158":"652faed6b362c730eb046e9a2e5620d898736a01","159":"652faed6b362c730eb046e9a2e5620d898736a01","160":"652faed6b362c730eb046e9a2e5620d898736a01","161":"652faed6b362c730eb046e9a2e5620d898736a01","162":"652faed6b362c730eb046e9a2e5620d898736a01","163":"652faed6b362c730eb046e9a2e5620d898736a01","164":"652faed6b362c730eb046e9a2e5620d898736a01","165":"652faed6b362c730eb046e9a2e5620d898736a01","166":"652faed6b362c730eb046e9a2e5620d898736a01","167":"652faed6b362c730eb046e9a2e5620d898736a01","168":"652faed6b362c730eb046e9a2e5620d898736a01","169":"652faed6b362c730eb046e9a2e5620d898736a01","170":"652faed6b362c730eb046e9a2e5620d898736a01","171":"652faed6b362c730eb046e9a2e5620d898736a01","172":"652faed6b362c730eb046e9a2e5620d898736a01","173":"652faed6b362c730eb046e9a2e5620d898736a01","174":"652faed6b362c730eb046e9a2e5620d898736a01","175":"652faed6b362c730eb046e9a2e5620d898736a01","176":"652faed6b362c730eb046e9a2e5620d898736a01","177":"652faed6b362c730eb046e9a2e5620d898736a01","178":"652faed6b362c730eb046e9a2e5620d898736a01","179":"652faed6b362c730eb046e9a2e5620d898736a01","180":"652faed6b362c730eb046e9a2e5620d898736a01","181":"652faed6b362c730eb046e9a2e5620d898736a01","182":"652faed6b362c730eb046e9a2e5620d898736a01","183":"652faed6b362c730eb046e9a2e5620d898736a01","184":"652faed6b362c730eb046e9a2e5620d898736a01","185":"652faed6b362c730eb046e9a2e5620d898736a01","186":"652faed6b362c730eb046e9a2e5620d898736a01","187":"652faed6b362c730eb046e9a2e5620d898736a01","188":"652faed6b362c730eb046e9a2e5620d898736a01","189":"652faed6b362c730eb046e9a2e5620d898736a01","190":"652faed6b362c730eb046e9a2e5620d898736a01","191":"652faed6b362c730eb046e9a2e5620d898736a01","192":"652faed6b362c730eb046e9a2e5620d898736a01","193":"652faed6b362c730eb046e9a2e5620d898736a01","194":"652faed6b362c730eb046e9a2e5620d898736a01","195":"652faed6b362c730eb046e9a2e5620d898736a01","196":"652faed6b362c730eb046e9a2e5620d898736a01","197":"652faed6b362c730eb046e9a2e5620d898736a01","198":"652faed6b362c730eb046e9a2e5620d898736a01","199":"652faed6b362c730eb046e9a2e5620d898736a01","200":"652faed6b362c730eb046e9a2e5620d898736a01","201":"652faed6b362c730eb046e9a2e5620d898736a01","202":"652faed6b362c730eb046e9a2e5620d898736a01","203":"652faed6b362c730eb046e9a2e5620d898736a01","204":"652faed6b362c730eb046e9a2e5620d898736a01","205":"652faed6b362c730eb046e9a2e5620d898736a01","206":"652faed6b362c730eb046e9a2e5620d898736a01","207":"652faed6b362c730eb046e9a2e5620d898736a01","208":"652faed6b362c730eb046e9a2e5620d898736a01","209":"652faed6b362c730eb046e9a2e5620d898736a01","210":"652faed6b362c730eb046e9a2e5620d898736a01","211":"652faed6b362c730eb046e9a2e5620d898736a01"},"repo":{"0":"brightmart\/albert_zh","1":"brightmart\/albert_zh","2":"brightmart\/albert_zh","3":"brightmart\/albert_zh","4":"brightmart\/albert_zh","5":"brightmart\/albert_zh","6":"brightmart\/albert_zh","7":"brightmart\/albert_zh","8":"brightmart\/albert_zh","9":"brightmart\/albert_zh","10":"brightmart\/albert_zh","11":"brightmart\/albert_zh","12":"brightmart\/albert_zh","13":"brightmart\/albert_zh","14":"brightmart\/albert_zh","15":"brightmart\/albert_zh","16":"brightmart\/albert_zh","17":"brightmart\/albert_zh","18":"brightmart\/albert_zh","19":"brightmart\/albert_zh","20":"brightmart\/albert_zh","21":"brightmart\/albert_zh","22":"brightmart\/albert_zh","23":"brightmart\/albert_zh","24":"brightmart\/albert_zh","25":"brightmart\/albert_zh","26":"brightmart\/albert_zh","27":"brightmart\/albert_zh","28":"brightmart\/albert_zh","29":"brightmart\/albert_zh","30":"brightmart\/albert_zh","31":"brightmart\/albert_zh","32":"brightmart\/albert_zh","33":"brightmart\/albert_zh","34":"brightmart\/albert_zh","35":"brightmart\/albert_zh","36":"brightmart\/albert_zh","37":"brightmart\/albert_zh","38":"brightmart\/albert_zh","39":"brightmart\/albert_zh","40":"brightmart\/albert_zh","41":"brightmart\/albert_zh","42":"brightmart\/albert_zh","43":"brightmart\/albert_zh","44":"brightmart\/albert_zh","45":"brightmart\/albert_zh","46":"brightmart\/albert_zh","47":"brightmart\/albert_zh","48":"brightmart\/albert_zh","49":"brightmart\/albert_zh","50":"brightmart\/albert_zh","51":"brightmart\/albert_zh","52":"brightmart\/albert_zh","53":"brightmart\/albert_zh","54":"brightmart\/albert_zh","55":"brightmart\/albert_zh","56":"brightmart\/albert_zh","57":"brightmart\/albert_zh","58":"brightmart\/albert_zh","59":"brightmart\/albert_zh","60":"brightmart\/albert_zh","61":"brightmart\/albert_zh","62":"brightmart\/albert_zh","63":"brightmart\/albert_zh","64":"brightmart\/albert_zh","65":"brightmart\/albert_zh","66":"brightmart\/albert_zh","67":"brightmart\/albert_zh","68":"brightmart\/albert_zh","69":"brightmart\/albert_zh","70":"brightmart\/albert_zh","71":"brightmart\/albert_zh","72":"brightmart\/albert_zh","73":"brightmart\/albert_zh","74":"brightmart\/albert_zh","75":"brightmart\/albert_zh","76":"brightmart\/albert_zh","77":"brightmart\/albert_zh","78":"brightmart\/albert_zh","79":"brightmart\/albert_zh","80":"brightmart\/albert_zh","81":"brightmart\/albert_zh","82":"brightmart\/albert_zh","83":"brightmart\/albert_zh","84":"brightmart\/albert_zh","85":"brightmart\/albert_zh","86":"brightmart\/albert_zh","87":"brightmart\/albert_zh","88":"brightmart\/albert_zh","89":"brightmart\/albert_zh","90":"brightmart\/albert_zh","91":"brightmart\/albert_zh","92":"brightmart\/albert_zh","93":"brightmart\/albert_zh","94":"brightmart\/albert_zh","95":"brightmart\/albert_zh","96":"brightmart\/albert_zh","97":"brightmart\/albert_zh","98":"brightmart\/albert_zh","99":"brightmart\/albert_zh","100":"brightmart\/albert_zh","101":"brightmart\/albert_zh","102":"brightmart\/albert_zh","103":"brightmart\/albert_zh","104":"brightmart\/albert_zh","105":"brightmart\/albert_zh","106":"brightmart\/albert_zh","107":"brightmart\/albert_zh","108":"brightmart\/albert_zh","109":"brightmart\/albert_zh","110":"brightmart\/albert_zh","111":"brightmart\/albert_zh","112":"brightmart\/albert_zh","113":"brightmart\/albert_zh","114":"brightmart\/albert_zh","115":"brightmart\/albert_zh","116":"brightmart\/albert_zh","117":"brightmart\/albert_zh","118":"brightmart\/albert_zh","119":"brightmart\/albert_zh","120":"brightmart\/albert_zh","121":"brightmart\/albert_zh","122":"brightmart\/albert_zh","123":"brightmart\/albert_zh","124":"brightmart\/albert_zh","125":"brightmart\/albert_zh","126":"brightmart\/albert_zh","127":"brightmart\/albert_zh","128":"brightmart\/albert_zh","129":"brightmart\/albert_zh","130":"brightmart\/albert_zh","131":"brightmart\/albert_zh","132":"brightmart\/albert_zh","133":"brightmart\/albert_zh","134":"brightmart\/albert_zh","135":"brightmart\/albert_zh","136":"brightmart\/albert_zh","137":"brightmart\/albert_zh","138":"brightmart\/albert_zh","139":"brightmart\/albert_zh","140":"brightmart\/albert_zh","141":"brightmart\/albert_zh","142":"brightmart\/albert_zh","143":"brightmart\/albert_zh","144":"brightmart\/albert_zh","145":"brightmart\/albert_zh","146":"brightmart\/albert_zh","147":"brightmart\/albert_zh","148":"brightmart\/albert_zh","149":"brightmart\/albert_zh","150":"brightmart\/albert_zh","151":"brightmart\/albert_zh","152":"brightmart\/albert_zh","153":"brightmart\/albert_zh","154":"brightmart\/albert_zh","155":"brightmart\/albert_zh","156":"brightmart\/albert_zh","157":"brightmart\/albert_zh","158":"brightmart\/albert_zh","159":"brightmart\/albert_zh","160":"brightmart\/albert_zh","161":"brightmart\/albert_zh","162":"brightmart\/albert_zh","163":"brightmart\/albert_zh","164":"brightmart\/albert_zh","165":"brightmart\/albert_zh","166":"brightmart\/albert_zh","167":"brightmart\/albert_zh","168":"brightmart\/albert_zh","169":"brightmart\/albert_zh","170":"brightmart\/albert_zh","171":"brightmart\/albert_zh","172":"brightmart\/albert_zh","173":"brightmart\/albert_zh","174":"brightmart\/albert_zh","175":"brightmart\/albert_zh","176":"brightmart\/albert_zh","177":"brightmart\/albert_zh","178":"brightmart\/albert_zh","179":"brightmart\/albert_zh","180":"brightmart\/albert_zh","181":"brightmart\/albert_zh","182":"brightmart\/albert_zh","183":"brightmart\/albert_zh","184":"brightmart\/albert_zh","185":"brightmart\/albert_zh","186":"brightmart\/albert_zh","187":"brightmart\/albert_zh","188":"brightmart\/albert_zh","189":"brightmart\/albert_zh","190":"brightmart\/albert_zh","191":"brightmart\/albert_zh","192":"brightmart\/albert_zh","193":"brightmart\/albert_zh","194":"brightmart\/albert_zh","195":"brightmart\/albert_zh","196":"brightmart\/albert_zh","197":"brightmart\/albert_zh","198":"brightmart\/albert_zh","199":"brightmart\/albert_zh","200":"brightmart\/albert_zh","201":"brightmart\/albert_zh","202":"brightmart\/albert_zh","203":"brightmart\/albert_zh","204":"brightmart\/albert_zh","205":"brightmart\/albert_zh","206":"brightmart\/albert_zh","207":"brightmart\/albert_zh","208":"brightmart\/albert_zh","209":"brightmart\/albert_zh","210":"brightmart\/albert_zh","211":"brightmart\/albert_zh"}}