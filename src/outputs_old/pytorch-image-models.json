{"type":{"0":"R","1":"R","2":"C","3":"W","4":"W","5":"R","6":"R","7":"W","8":"W","9":"W","10":"W","11":"C","12":"R","13":"R","14":"R","15":"R","16":"R","17":"R","18":"R","19":"R","20":"R","21":"R"},"module":{"0":"benchmark","1":"benchmark","2":"benchmark","3":"inference","4":"setup","5":"setup","6":"train","7":"train","8":"train","9":"train","10":"validate","11":"validate","12":"validate","13":"validate","14":"validate","15":"validate","16":"validate","17":"validate","18":"validate","19":"validate","20":"validate","21":"validate"},"obj":{"0":"","1":"","2":"main","3":"main","4":"","5":"","6":"","7":"","8":"train_one_epoch","9":"validate","10":"validate","11":"main","12":"","13":"","14":"","15":"","16":"","17":"","18":"","19":"","20":"","21":""},"lnum":{"0":410,"1":411,"2":446,"3":103,"4":4,"5":13,"6":180,"7":34,"8":646,"9":744,"10":214,"11":299,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1},"col":{"0":0,"1":0,"2":7,"3":24,"4":0,"5":5,"6":0,"7":0,"8":20,"9":24,"10":8,"11":7,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"filename":{"0":"benchmark.py","1":"benchmark.py","2":"benchmark.py","3":"inference.py","4":"setup.py","5":"setup.py","6":"train.py","7":"train.py","8":"train.py","9":"train.py","10":"validate.py","11":"validate.py","12":"validate.py","13":"validate.py","14":"validate.py","15":"validate.py","16":"validate.py","17":"validate.py","18":"validate.py","19":"validate.py","20":"validate.py","21":"validate.py"},"symbol":{"0":"trailing-comma-tuple","1":"trailing-comma-tuple","2":"len-as-condition","3":"redefined-builtin","4":"redefined-builtin","5":"consider-using-with","6":"trailing-comma-tuple","7":"wildcard-import","8":"redefined-builtin","9":"redefined-builtin","10":"redefined-builtin","11":"len-as-condition","12":"duplicate-code","13":"duplicate-code","14":"duplicate-code","15":"duplicate-code","16":"duplicate-code","17":"duplicate-code","18":"duplicate-code","19":"duplicate-code","20":"duplicate-code","21":"duplicate-code"},"text":{"0":"Disallow trailing comma tuple","1":"Disallow trailing comma tuple","2":"Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty","3":"Redefining built-in 'input'","4":"Redefining built-in 'open'","5":"Consider using 'with' for resource-allocating operations","6":"Disallow trailing comma tuple","7":"Wildcard import timm.utils","8":"Redefining built-in 'input'","9":"Redefining built-in 'input'","10":"Redefining built-in 'input'","11":"Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty","12":"Similar lines in 2 files\n==benchmark:26\n==validate:25\nhas_apex = False\ntry:\n    from apex import amp\n    has_apex = True\nexcept ImportError:\n    pass\n\nhas_native_amp = False\ntry:\n    if getattr(torch.cuda.amp, 'autocast') is not None:\n        has_native_amp = True\nexcept AttributeError:\n    pass\n\ntorch.backends.cudnn.benchmark = True\n_logger = logging.getLogger('validate')\n\n","13":"Similar lines in 2 files\n==benchmark:84\n==train:113\nparser.add_argument('--opt', default='sgd', type=str, metavar='OPTIMIZER',\n                    help='Optimizer (default: \"sgd\"')\nparser.add_argument('--opt-eps', default=None, type=float, metavar='EPSILON',\n                    help='Optimizer Epsilon (default: None, use opt default)')\nparser.add_argument('--opt-betas', default=None, type=float, nargs='+', metavar='BETA',\n                    help='Optimizer Betas (default: None, use opt default)')\nparser.add_argument('--momentum', type=float, default=0.9, metavar='M',\n                    help='Optimizer momentum (default: 0.9)')\nparser.add_argument('--weight-decay', type=float, default=0.0001,\n                    help='weight decay (default: 0.0001)')\nparser.add_argument('--clip-grad', type=float, default=None, metavar='NORM',\n                    help='Clip gradient norm (default: None, no clipping)')\nparser.add_argument('--clip-mode', type=str, default='norm',\n                    help='Gradient clipping mode. One of (\"norm\", \"value\", \"agc\")')\n\n\n# Learning rate schedule parameters","14":"Similar lines in 2 files\n==benchmark:470\n==validate:335\ndef write_results(results_file, results):\n    with open(results_file, mode='w') as cf:\n        dw = csv.DictWriter(cf, fieldnames=results[0].keys())\n        dw.writeheader()\n        for r in results:\n            dw.writerow(r)\n        cf.flush()\n\n\nif __name__ == '__main__':\n    main()","15":"Similar lines in 2 files\n==inference:45\n==validate:74\nparser.add_argument('--log-freq', default=10, type=int,\n                    metavar='N', help='batch logging frequency (default: 10)')\nparser.add_argument('--checkpoint', default='', type=str, metavar='PATH',\n                    help='path to latest checkpoint (default: none)')\nparser.add_argument('--pretrained', dest='pretrained', action='store_true',\n                    help='use pre-trained model')\nparser.add_argument('--num-gpu', type=int, default=1,\n                    help='Number of GPUS to use')\nparser.add_argument('--no-test-pool', dest='no_test_pool', action='store_true',\n                    help='disable test time pool')","16":"Similar lines in 2 files\n==benchmark:11\n==validate:13\nimport time\nimport logging\nimport torch\nimport torch.nn as nn\nimport torch.nn.parallel\nfrom collections import OrderedDict\nfrom contextlib import suppress","17":"Similar lines in 3 files\n==benchmark:33\n==train:47\n==validate:32\nhas_native_amp = False\ntry:\n    if getattr(torch.cuda.amp, 'autocast') is not None:\n        has_native_amp = True\nexcept AttributeError:\n    pass\n","18":"Similar lines in 2 files\n==inference:37\n==train:101\nparser.add_argument('--mean', type=float, nargs='+', default=None, metavar='MEAN',\n                    help='Override mean pixel value of dataset')\nparser.add_argument('--std', type=float, nargs='+', default=None, metavar='STD',\n                    help='Override std deviation of of dataset')\nparser.add_argument('--interpolation', default='', type=str, metavar='NAME',\n                    help='Image resize interpolation type (overrides model)')","19":"Similar lines in 2 files\n==benchmark:63\n==validate:54\nparser.add_argument('-b', '--batch-size', default=256, type=int,\n                    metavar='N', help='mini-batch size (default: 256)')\nparser.add_argument('--img-size', default=None, type=int,\n                    metavar='N', help='Input image dimension, uses model default if empty')\nparser.add_argument('--input-size', default=None, nargs=3, type=int,\n                    metavar='N N N', help='Input all image dimensions (d h w, e.g. --input-size 3 224 224), uses model default if empty')","20":"Similar lines in 2 files\n==train:534\n==validate:196\n        use_prefetcher=args.prefetcher,\n        interpolation=data_config['interpolation'],\n        mean=data_config['mean'],\n        std=data_config['std'],\n        num_workers=args.workers,","21":"Similar lines in 2 files\n==benchmark:424\n==validate:276\ndef main():\n    setup_default_logging()\n    args = parser.parse_args()\n    model_cfgs = []\n    model_names = []"},"number":{"0":"R1707","1":"R1707","2":"C1801","3":"W0622","4":"W0622","5":"R1732","6":"R1707","7":"W0401","8":"W0622","9":"W0622","10":"W0622","11":"C1801","12":"R0801","13":"R0801","14":"R0801","15":"R0801","16":"R0801","17":"R0801","18":"R0801","19":"R0801","20":"R0801","21":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint","15":"pylint","16":"pylint","17":"pylint","18":"pylint","19":"pylint","20":"pylint","21":"pylint"},"lines_amount":{"0":482,"1":482,"2":482,"3":128,"4":49,"5":49,"6":799,"7":799,"8":799,"9":799,"10":347,"11":347,"12":347,"13":347,"14":347,"15":347,"16":347,"17":347,"18":347,"19":347,"20":347,"21":347},"commit":{"0":"bd5694667625d510e3aa89e95397de97d0e7efe9","1":"bd5694667625d510e3aa89e95397de97d0e7efe9","2":"bd5694667625d510e3aa89e95397de97d0e7efe9","3":"bd5694667625d510e3aa89e95397de97d0e7efe9","4":"bd5694667625d510e3aa89e95397de97d0e7efe9","5":"bd5694667625d510e3aa89e95397de97d0e7efe9","6":"bd5694667625d510e3aa89e95397de97d0e7efe9","7":"bd5694667625d510e3aa89e95397de97d0e7efe9","8":"bd5694667625d510e3aa89e95397de97d0e7efe9","9":"bd5694667625d510e3aa89e95397de97d0e7efe9","10":"bd5694667625d510e3aa89e95397de97d0e7efe9","11":"bd5694667625d510e3aa89e95397de97d0e7efe9","12":"bd5694667625d510e3aa89e95397de97d0e7efe9","13":"bd5694667625d510e3aa89e95397de97d0e7efe9","14":"bd5694667625d510e3aa89e95397de97d0e7efe9","15":"bd5694667625d510e3aa89e95397de97d0e7efe9","16":"bd5694667625d510e3aa89e95397de97d0e7efe9","17":"bd5694667625d510e3aa89e95397de97d0e7efe9","18":"bd5694667625d510e3aa89e95397de97d0e7efe9","19":"bd5694667625d510e3aa89e95397de97d0e7efe9","20":"bd5694667625d510e3aa89e95397de97d0e7efe9","21":"bd5694667625d510e3aa89e95397de97d0e7efe9"},"repo":{"0":"rwightman\/pytorch-image-models","1":"rwightman\/pytorch-image-models","2":"rwightman\/pytorch-image-models","3":"rwightman\/pytorch-image-models","4":"rwightman\/pytorch-image-models","5":"rwightman\/pytorch-image-models","6":"rwightman\/pytorch-image-models","7":"rwightman\/pytorch-image-models","8":"rwightman\/pytorch-image-models","9":"rwightman\/pytorch-image-models","10":"rwightman\/pytorch-image-models","11":"rwightman\/pytorch-image-models","12":"rwightman\/pytorch-image-models","13":"rwightman\/pytorch-image-models","14":"rwightman\/pytorch-image-models","15":"rwightman\/pytorch-image-models","16":"rwightman\/pytorch-image-models","17":"rwightman\/pytorch-image-models","18":"rwightman\/pytorch-image-models","19":"rwightman\/pytorch-image-models","20":"rwightman\/pytorch-image-models","21":"rwightman\/pytorch-image-models"}}