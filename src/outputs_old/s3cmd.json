{"type":{"0":"W","1":"W","2":"W","3":"W","4":"W","5":"W","6":"C","7":"R","8":"C","9":"C","10":"W","11":"R","12":"R","13":"W","14":"W","15":"W","16":"W","17":"W","18":"W","19":"C","20":"R","21":"C","22":"C","23":"W","24":"R","25":"R","26":"R","27":"R","28":"R","29":"R","30":"R","31":"R","32":"R","33":"R","34":"R"},"module":{"0":"run-tests-minio","1":"run-tests-minio","2":"run-tests-minio","3":"run-tests-minio","4":"run-tests-minio","5":"run-tests-minio","6":"run-tests-minio","7":"run-tests-minio","8":"run-tests-minio","9":"run-tests-minio","10":"run-tests-minio","11":"run-tests-minio","12":"run-tests-minio","13":"run-tests","14":"run-tests","15":"run-tests","16":"run-tests","17":"run-tests","18":"run-tests","19":"run-tests","20":"run-tests","21":"run-tests","22":"run-tests","23":"run-tests","24":"run-tests","25":"run-tests","26":"setup","27":"setup","28":"setup","29":"setup","30":"setup","31":"setup","32":"setup","33":"setup","34":"setup"},"obj":{"0":"","1":"test","2":"test","3":"test","4":"test","5":"test","6":"test.compile_list","7":"test","8":"test","9":"test","10":"test_s3cmd","11":"","12":"","13":"","14":"test","15":"test","16":"test","17":"test","18":"test","19":"test.compile_list","20":"test","21":"test","22":"test","23":"test_s3cmd","24":"","25":"","26":"","27":"","28":"","29":"","30":"","31":"","32":"","33":"","34":""},"lnum":{"0":21,"1":151,"2":151,"3":151,"4":151,"5":151,"6":185,"7":201,"8":226,"9":231,"10":238,"11":444,"12":457,"13":21,"14":151,"15":151,"16":151,"17":151,"18":151,"19":185,"20":201,"21":226,"22":231,"23":238,"24":441,"25":454,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1},"col":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":11,"7":8,"8":4,"9":4,"10":0,"11":4,"12":4,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":11,"20":8,"21":4,"22":4,"23":0,"24":4,"25":4,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},"filename":{"0":"run-tests-minio.py","1":"run-tests-minio.py","2":"run-tests-minio.py","3":"run-tests-minio.py","4":"run-tests-minio.py","5":"run-tests-minio.py","6":"run-tests-minio.py","7":"run-tests-minio.py","8":"run-tests-minio.py","9":"run-tests-minio.py","10":"run-tests-minio.py","11":"run-tests-minio.py","12":"run-tests-minio.py","13":"run-tests.py","14":"run-tests.py","15":"run-tests.py","16":"run-tests.py","17":"run-tests.py","18":"run-tests.py","19":"run-tests.py","20":"run-tests.py","21":"run-tests.py","22":"run-tests.py","23":"run-tests.py","24":"run-tests.py","25":"run-tests.py","26":"setup.py","27":"setup.py","28":"setup.py","29":"setup.py","30":"setup.py","31":"setup.py","32":"setup.py","33":"setup.py","34":"setup.py"},"symbol":{"0":"wildcard-import","1":"dangerous-default-value","2":"dangerous-default-value","3":"dangerous-default-value","4":"dangerous-default-value","5":"dangerous-default-value","6":"singleton-comparison","7":"consider-using-with","8":"consider-using-enumerate","9":"consider-using-enumerate","10":"dangerous-default-value","11":"consider-using-with","12":"consider-using-with","13":"wildcard-import","14":"dangerous-default-value","15":"dangerous-default-value","16":"dangerous-default-value","17":"dangerous-default-value","18":"dangerous-default-value","19":"singleton-comparison","20":"consider-using-with","21":"consider-using-enumerate","22":"consider-using-enumerate","23":"dangerous-default-value","24":"consider-using-with","25":"consider-using-with","26":"duplicate-code","27":"duplicate-code","28":"duplicate-code","29":"duplicate-code","30":"duplicate-code","31":"duplicate-code","32":"duplicate-code","33":"duplicate-code","34":"duplicate-code"},"text":{"0":"Wildcard import S3.ExitCodes","1":"Dangerous default value [] as argument","2":"Dangerous default value [] as argument","3":"Dangerous default value [] as argument","4":"Dangerous default value [] as argument","5":"Dangerous default value [] as argument","6":"Comparison 'regexps == False' should be 'regexps is False' if checking for the singleton value False, or 'not regexps' if testing for falsiness","7":"Consider using 'with' for resource-allocating operations","8":"Consider using enumerate instead of iterating with range and len","9":"Consider using enumerate instead of iterating with range and len","10":"Dangerous default value [] as argument","11":"Consider using 'with' for resource-allocating operations","12":"Consider using 'with' for resource-allocating operations","13":"Wildcard import S3.ExitCodes","14":"Dangerous default value [] as argument","15":"Dangerous default value [] as argument","16":"Dangerous default value [] as argument","17":"Dangerous default value [] as argument","18":"Dangerous default value [] as argument","19":"Comparison 'regexps == False' should be 'regexps is False' if checking for the singleton value False, or 'not regexps' if testing for falsiness","20":"Consider using 'with' for resource-allocating operations","21":"Consider using enumerate instead of iterating with range and len","22":"Consider using enumerate instead of iterating with range and len","23":"Dangerous default value [] as argument","24":"Consider using 'with' for resource-allocating operations","25":"Consider using 'with' for resource-allocating operations","26":"Similar lines in 2 files\n==run-tests-minio:9\n==run-tests:9\nfrom __future__ import absolute_import, print_function\n\nimport sys\nimport os\nimport re\nimport time\nfrom subprocess import Popen, PIPE, STDOUT\nimport locale\nimport getpass\nimport S3.Exceptions\nimport S3.Config\nfrom S3.ExitCodes import *\n\ntry:\n    unicode\nexcept NameError:\n    # python 3 support\n    # In python 3, unicode -> str, and str -> bytes\n    unicode = str\n\ncount_pass = 0\ncount_fail = 0\ncount_skip = 0\n\ntest_counter = 0\nrun_tests = []\nexclude_tests = []\n\nverbose = False\n\nencoding = locale.getpreferredencoding()\nif not encoding:\n    print(\"Guessing current system encoding failed. Consider setting $LANG variable.\")\n    sys.exit(1)\nelse:\n    print(\"System encoding: \" + encoding)\n\ntry:\n    unicode\nexcept NameError:\n    # python 3 support\n    # In python 3, unicode -> str, and str -> bytes\n    unicode = str\n\ndef unicodise(string, encoding = \"utf-8\", errors = \"replace\"):\n    \"\"\"\n    Convert 'string' to Unicode or raise an exception.\n    Config can't use toolbox from Utils that is itself using Config\n    \"\"\"\n    if type(string) == unicode:\n        return string\n\n    try:\n        return unicode(string, encoding, errors)\n    except UnicodeDecodeError:\n        raise UnicodeDecodeError(\"Conversion to unicode failed: %r\" % string)\n\n# https:\/\/stackoverflow.com\/questions\/377017\/test-if-executable-exists-in-python\/377028#377028\ndef which(program):\n    def is_exe(fpath):\n        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n\n    fpath, fname = os.path.split(program)\n    if fpath:\n        if is_exe(program):\n            return program\n    else:\n        for path in os.environ[\"PATH\"].split(os.pathsep):\n            path = path.strip('\"')\n            exe_file = os.path.join(path, program)\n            if is_exe(exe_file):\n                return exe_file\n\n    return None\n\nif which('curl') is not None:\n    have_curl = True\nelse:\n    have_curl = False\n\nconfig_file = None\nif os.getenv(\"HOME\"):\n    config_file = os.path.join(unicodise(os.getenv(\"HOME\"), encoding),\n                               \".s3cfg\")\nelif os.name == \"nt\" and os.getenv(\"USERPROFILE\"):\n    config_file = os.path.join(\n        unicodise(os.getenv(\"USERPROFILE\"), encoding),\n        os.getenv(\"APPDATA\") and unicodise(os.getenv(\"APPDATA\"), encoding)\n        or 'Application Data',\n        \"s3cmd.ini\")\n\n\n## Unpack testsuite\/ directory\nif not os.path.isdir('testsuite') and os.path.isfile('testsuite.tar.gz'):\n    os.system(\"tar -xz -f testsuite.tar.gz\")\nif not os.path.isdir('testsuite'):\n    print(\"Something went wrong while unpacking testsuite.tar.gz\")\n    sys.exit(1)\n\nos.system(\"tar -xf testsuite\/checksum.tar -C testsuite\")\nif not os.path.isfile('testsuite\/checksum\/cksum33.txt'):\n    print(\"Something went wrong while unpacking testsuite\/checkum.tar\")\n    sys.exit(1)\n\n## Fix up permissions for permission-denied tests\nos.chmod(\"testsuite\/permission-tests\/permission-denied-dir\", 0o444)\nos.chmod(\"testsuite\/permission-tests\/permission-denied.txt\", 0o000)\n\n## Patterns for Unicode tests\npatterns = {}\npatterns['UTF-8'] = u\"\u016a\u0146\u0407\u040c\u0153\u0111\u0417\/\u263a unicode \u20ac rocks \u2122\"\npatterns['GBK'] = u\"12\u670831\u65e5\/1-\u7279\u8272\u689d\u76ee\"\n\nhave_encoding = os.path.isdir('testsuite\/encodings\/' + encoding)\nif not have_encoding and os.path.isfile('testsuite\/encodings\/%s.tar.gz' % encoding):\n    os.system(\"tar xvz -C testsuite\/encodings -f testsuite\/encodings\/%s.tar.gz\" % encoding)\n    have_encoding = os.path.isdir('testsuite\/encodings\/' + encoding)\n\nif have_encoding:\n    #enc_base_remote = \"%s\/xyz\/%s\/\" % (pbucket(1), encoding)\n    enc_pattern = patterns[encoding]\nelse:\n    print(encoding + \" specific files not found.\")\n\ndef unicodise(string):\n    if type(string) == unicode:\n        return string\n\n    return unicode(string, \"UTF-8\", \"replace\")\n\ndef deunicodise(string):\n    if type(string) != unicode:\n        return string\n\n    return string.encode(\"UTF-8\", \"replace\")\n\nif not os.path.isdir('testsuite\/crappy-file-name'):\n    os.system(\"tar xvz -C testsuite -f testsuite\/crappy-file-name.tar.gz\")\n    # TODO: also unpack if the tarball is newer than the directory timestamp\n    #       for instance when a new version was pulled from SVN.\n\ndef test(label, cmd_args = [], retcode = 0, must_find = [], must_not_find = [], must_find_re = [], must_not_find_re = [], stdin = None):\n    def command_output():\n        print(\"----\")\n        print(\" \".join([\" \" in arg and \"'%s'\" % arg or arg for arg in cmd_args]))\n        print(\"----\")\n        print(stdout)\n        print(\"----\")\n\n    def failure(message = \"\"):\n        global count_fail\n        if message:\n            message = u\"  (%r)\" % message\n        print(u\"\\x1b[31;1mFAIL%s\\x1b[0m\" % (message))\n        count_fail += 1\n        command_output()\n        #return 1\n        sys.exit(1)\n    def success(message = \"\"):\n        global count_pass\n        if message:\n            message = \"  (%r)\" % message\n        print(\"\\x1b[32;1mOK\\x1b[0m%s\" % (message))\n        count_pass += 1\n        if verbose:\n            command_output()\n        return 0\n    def skip(message = \"\"):\n        global count_skip\n        if message:\n            message = \"  (%r)\" % message\n        print(\"\\x1b[33;1mSKIP\\x1b[0m%s\" % (message))\n        count_skip += 1\n        return 0\n    def compile_list(_list, regexps = False):\n        if regexps == False:\n            _list = [re.escape(item) for item in _list]\n\n        return [re.compile(item, re.MULTILINE) for item in _list]\n\n    global test_counter\n    test_counter += 1\n    print((\"%3d  %s \" % (test_counter, label)).ljust(30, \".\"), end=' ')\n    sys.stdout.flush()\n\n    if run_tests.count(test_counter) == 0 or exclude_tests.count(test_counter) > 0:\n        return skip()\n\n    if not cmd_args:\n        return skip()\n\n    p = Popen(cmd_args, stdin = stdin, stdout = PIPE, stderr = STDOUT, universal_newlines = True, close_fds = True)\n    stdout, stderr = p.communicate()\n    if type(retcode) not in [list, tuple]: retcode = [retcode]\n    if p.returncode not in retcode:\n        return failure(\"retcode: %d, expected one of: %s\" % (p.returncode, retcode))\n\n    if type(must_find) not in [ list, tuple ]: must_find = [must_find]\n    if type(must_find_re) not in [ list, tuple ]: must_find_re = [must_find_re]\n    if type(must_not_find) not in [ list, tuple ]: must_not_find = [must_not_find]\n    if type(must_not_find_re) not in [ list, tuple ]: must_not_find_re = [must_not_find_re]\n\n    find_list = []\n    find_list.extend(compile_list(must_find))\n    find_list.extend(compile_list(must_find_re, regexps = True))\n    find_list_patterns = []\n    find_list_patterns.extend(must_find)\n    find_list_patterns.extend(must_find_re)\n\n    not_find_list = []\n    not_find_list.extend(compile_list(must_not_find))\n    not_find_list.extend(compile_list(must_not_find_re, regexps = True))\n    not_find_list_patterns = []\n    not_find_list_patterns.extend(must_not_find)\n    not_find_list_patterns.extend(must_not_find_re)\n\n    for index in range(len(find_list)):\n        stdout = unicodise(stdout)\n        match = find_list[index].search(stdout)\n        if not match:\n            return failure(\"pattern not found: %s\" % find_list_patterns[index])\n    for index in range(len(not_find_list)):\n        match = not_find_list[index].search(stdout)\n        if match:\n            return failure(\"pattern found: %s (match: %s)\" % (not_find_list_patterns[index], match.group(0)))\n\n    return success()\n\ndef test_s3cmd(label, cmd_args = [], **kwargs):\n    if not cmd_args[0].endswith(\"s3cmd\"):\n        cmd_args.insert(0, \"python\")\n        cmd_args.insert(1, \"s3cmd\")\n        if config_file:\n            cmd_args.insert(2, \"-c\")\n            cmd_args.insert(3, config_file)\n\n    return test(label, cmd_args, **kwargs)\n\ndef test_mkdir(label, dir_name):\n    if os.name in (\"posix\", \"nt\"):\n        cmd = ['mkdir', '-p']\n    else:\n        print(\"Unknown platform: %s\" % os.name)\n        sys.exit(1)\n    cmd.append(dir_name)\n    return test(label, cmd)\n\ndef test_rmdir(label, dir_name):\n    if os.path.isdir(dir_name):\n        if os.name == \"posix\":\n            cmd = ['rm', '-rf']\n        elif os.name == \"nt\":\n            cmd = ['rmdir', '\/s\/q']\n        else:\n            print(\"Unknown platform: %s\" % os.name)\n            sys.exit(1)\n        cmd.append(dir_name)\n        return test(label, cmd)\n    else:\n        return test(label, [])\n\ndef test_flushdir(label, dir_name):\n    test_rmdir(label + \"(rm)\", dir_name)\n    return test_mkdir(label + \"(mk)\", dir_name)\n\ndef test_copy(label, src_file, dst_file):\n    if os.name == \"posix\":\n        cmd = ['cp', '-f']\n    elif os.name == \"nt\":\n        cmd = ['copy']\n    else:\n        print(\"Unknown platform: %s\" % os.name)\n        sys.exit(1)\n    cmd.append(src_file)\n    cmd.append(dst_file)\n    return test(label, cmd)\n\ndef test_curl_HEAD(label, src_file, **kwargs):\n    cmd = ['curl', '--silent', '--head', '-include', '--location']\n    cmd.append(src_file)\n    return test(label, cmd, **kwargs)\n\nbucket_prefix = u\"%s-\" % getpass.getuser().lower()\n\nargv = sys.argv[1:]\nwhile argv:\n    arg = argv.pop(0)\n    if arg.startswith('--bucket-prefix='):\n        print(\"Usage: '--bucket-prefix PREFIX', not '--bucket-prefix=PREFIX'\")\n        sys.exit(0)\n    if arg in (\"-h\", \"--help\"):\n        print(\"%s A B K..O -N\" % sys.argv[0])\n        print(\"Run tests number A, B and K through to O, except for N\")\n        sys.exit(0)\n\n    if arg in (\"-c\", \"--config\"):\n        config_file = argv.pop(0)\n        continue\n    if arg in (\"-l\", \"--list\"):\n        exclude_tests = range(0, 999)\n        break\n    if arg in (\"-v\", \"--verbose\"):\n        verbose = True\n        continue\n    if arg in (\"-p\", \"--bucket-prefix\"):\n        try:\n            bucket_prefix = argv.pop(0)\n        except IndexError:\n            print(\"Bucket prefix option must explicitly supply a bucket name prefix\")\n            sys.exit(0)\n        continue\n    if \"..\" in arg:\n        range_idx = arg.find(\"..\")\n        range_start = arg[:range_idx] or 0\n        range_end = arg[range_idx+2:] or 999\n        run_tests.extend(range(int(range_start), int(range_end) + 1))\n    elif arg.startswith(\"-\"):\n        exclude_tests.append(int(arg[1:]))\n    else:\n        run_tests.append(int(arg))\n\nprint(\"Using bucket prefix: '%s'\" % bucket_prefix)\n\ncfg = S3.Config.Config(config_file)\n\nif not run_tests:\n    run_tests = range(0, 999)\n\n# helper functions for generating bucket names\ndef bucket(tail):\n        '''Test bucket name'''\n        label = 'autotest'\n        if str(tail) == '3':\n                label = 'autotest'\n        return '%ss3cmd-%s-%s' % (bucket_prefix, label, tail)\n\ndef pbucket(tail):\n        '''Like bucket(), but prepends \"s3:\/\/\" for you'''\n        return 's3:\/\/' + bucket(tail)\n\n## ====== Remove test buckets\ntest_s3cmd(\"Remove test buckets\", ['rb', '-r', '--force', pbucket(1), pbucket(2), pbucket(3)])\n\n## ====== verify they were removed\ntest_s3cmd(\"Verify no test buckets\", ['ls'],\n           must_not_find = [pbucket(1), pbucket(2), pbucket(3)])\n\n\n## ====== Create one bucket (EU)","27":"Similar lines in 2 files\n==run-tests-minio:407\n==run-tests:404\n          must_find = \"delete: '%s\/xyz\/cachetest\/content\/testfile'\" % pbucket(1),\n          must_not_find = \"dictionary changed size during iteration\",\n          retcode = EX_PARTIAL)\n\n## ====== Remove cache directory and file\ntest_rmdir(\"Remove cache dir\", \"testsuite\/cachetest\")\n\nif have_encoding:\n    ## ====== Sync UTF-8 \/ GBK \/ ... to S3\n    test_s3cmd(u\"Sync %s to S3\" % encoding, ['sync', 'testsuite\/encodings\/' + encoding, '%s\/xyz\/encodings\/' % pbucket(1), '--exclude', 'demo\/*', '--no-encrypt' ],\n        must_find = [ u\"'testsuite\/encodings\/%(encoding)s\/%(pattern)s' -> '%(pbucket)s\/xyz\/encodings\/%(encoding)s\/%(pattern)s'\" % { 'encoding' : encoding, 'pattern' : enc_pattern , 'pbucket' : pbucket(1)} ])\n\n\n## ====== List bucket content\ntest_s3cmd(\"List bucket content\", ['ls', '%s\/xyz\/' % pbucket(1) ],\n    must_find_re = [ u\"DIR +%s\/xyz\/binary\/$\" % pbucket(1) , u\"DIR +%s\/xyz\/etc\/$\" % pbucket(1) ],\n    must_not_find = [ u\"random-crap.md5\", u\"\/demo\" ])\n\n\n## ====== List bucket recursive\nmust_find = [ u\"%s\/xyz\/binary\/random-crap.md5\" % pbucket(1) ]\nif have_encoding:\n    must_find.append(u\"%(pbucket)s\/xyz\/encodings\/%(encoding)s\/%(pattern)s\" % { 'encoding' : encoding, 'pattern' : enc_pattern, 'pbucket' : pbucket(1) })\n\ntest_s3cmd(\"List bucket recursive\", ['ls', '--recursive', pbucket(1)],\n    must_find = must_find,\n    must_not_find = [ \"logo.png\" ])\n\n## ====== FIXME\ntest_s3cmd(\"Recursive put\", ['put', '--recursive', 'testsuite\/etc', '%s\/xyz\/' % pbucket(1) ])\n\n\n## ====== Clean up local destination dir\ntest_flushdir(\"Clean testsuite-out\/\", \"testsuite-out\")\n\n## ====== Put from stdin\nf = open('testsuite\/single-file\/single-file.txt', 'r')\ntest_s3cmd(\"Put from stdin\", ['put', '-', '%s\/single-file\/single-file.txt' % pbucket(1)],\n           must_find = [\"'<stdin>' -> '%s\/single-file\/single-file.txt'\" % pbucket(1)],\n           stdin = f)\nf.close()\n\n## ====== Multipart put\nos.system('mkdir -p testsuite-out')\nos.system('dd if=\/dev\/urandom of=testsuite-out\/urandom.bin bs=1M count=16 > \/dev\/null 2>&1')\ntest_s3cmd(\"Put multipart\", ['put', '--multipart-chunk-size-mb=5', 'testsuite-out\/urandom.bin', '%s\/urandom.bin' % pbucket(1)],\n           must_not_find = ['abortmp'])\n\n## ====== Multipart put from stdin\nf = open('testsuite-out\/urandom.bin', 'r')\ntest_s3cmd(\"Multipart large put from stdin\", ['put', '--multipart-chunk-size-mb=5', '-', '%s\/urandom2.bin' % pbucket(1)],\n           must_find = ['%s\/urandom2.bin' % pbucket(1)],\n           must_not_find = ['abortmp'],\n           stdin = f)\nf.close()\n\n## ====== Clean up local destination dir\ntest_flushdir(\"Clean testsuite-out\/\", \"testsuite-out\")\n\n## ====== Moving things without trailing '\/'\nos.system('dd if=\/dev\/urandom of=testsuite-out\/urandom1.bin bs=1k count=1 > \/dev\/null 2>&1')\nos.system('dd if=\/dev\/urandom of=testsuite-out\/urandom2.bin bs=1k count=1 > \/dev\/null 2>&1')\ntest_s3cmd(\"Put multiple files\", ['put', 'testsuite-out\/urandom1.bin', 'testsuite-out\/urandom2.bin', '%s\/' % pbucket(1)],\n           must_find = [\"%s\/urandom1.bin\" % pbucket(1), \"%s\/urandom2.bin\" % pbucket(1)])\n\ntest_s3cmd(\"Move without '\/'\", ['mv', '%s\/urandom1.bin' % pbucket(1), '%s\/urandom2.bin' % pbucket(1), '%s\/dir' % pbucket(1)],\n           retcode = 64,\n           must_find = ['Destination must be a directory'])\n\ntest_s3cmd(\"Move recursive w\/a '\/'\",\n           ['-r', 'mv', '%s\/dir1' % pbucket(1), '%s\/dir2' % pbucket(1)],\n           retcode = 64,\n           must_find = ['Destination must be a directory'])\n\n## ====== Moving multiple files into directory with trailing '\/'\nmust_find = [\"'%s\/urandom1.bin' -> '%s\/dir\/urandom1.bin'\" % (pbucket(1),pbucket(1)), \"'%s\/urandom2.bin' -> '%s\/dir\/urandom2.bin'\" % (pbucket(1),pbucket(1))]\nmust_not_find = [\"'%s\/urandom1.bin' -> '%s\/dir'\" % (pbucket(1),pbucket(1)), \"'%s\/urandom2.bin' -> '%s\/dir'\" % (pbucket(1),pbucket(1))]\ntest_s3cmd(\"Move multiple files\",\n           ['mv', '%s\/urandom1.bin' % pbucket(1), '%s\/urandom2.bin' % pbucket(1), '%s\/dir\/' % pbucket(1)],\n           must_find = must_find,\n           must_not_find = must_not_find)\n\n## ====== Clean up local destination dir\ntest_flushdir(\"Clean testsuite-out\/\", \"testsuite-out\")\n\n## ====== Sync from S3\nmust_find = [ \"'%s\/xyz\/binary\/random-crap.md5' -> 'testsuite-out\/xyz\/binary\/random-crap.md5'\" % pbucket(1) ]\nif have_encoding:\n    must_find.append(u\"'%(pbucket)s\/xyz\/encodings\/%(encoding)s\/%(pattern)s' -> 'testsuite-out\/xyz\/encodings\/%(encoding)s\/%(pattern)s' \" % { 'encoding' : encoding, 'pattern' : enc_pattern, 'pbucket' : pbucket(1) })\ntest_s3cmd(\"Sync from S3\", ['sync', '%s\/xyz' % pbucket(1), 'testsuite-out'],\n    must_find = must_find)\n\n## ====== Remove 'demo' directory\ntest_rmdir(\"Remove 'dir-test\/'\", \"testsuite-out\/xyz\/dir-test\/\")\n\n\n## ====== Create dir with name of a file\ntest_mkdir(\"Create file-dir dir\", \"testsuite-out\/xyz\/dir-test\/file-dir\")\n\n\n## ====== Skip dst dirs\ntest_s3cmd(\"Skip over dir\", ['sync', '%s\/xyz' % pbucket(1), 'testsuite-out'],\n           must_find = \"ERROR: Download of 'xyz\/dir-test\/file-dir' failed (Reason: testsuite-out\/xyz\/dir-test\/file-dir is a directory)\",\n           retcode = EX_PARTIAL)\n\n\n## ====== Clean up local destination dir\ntest_flushdir(\"Clean testsuite-out\/\", \"testsuite-out\")\n\n\n## ====== Put public, guess MIME\ntest_s3cmd(\"Put public, guess MIME\", ['put', '--guess-mime-type', '--acl-public', 'testsuite\/etc\/logo.png', '%s\/xyz\/etc\/logo.png' % pbucket(1)],\n    must_find = [ \"-> '%s\/xyz\/etc\/logo.png'\" % pbucket(1) ])\n\n\n## ====== Retrieve from URL","28":"Similar lines in 2 files\n==run-tests-minio:576\n==run-tests:565\n           must_find = [ \"cksum1.txt\" ],\n           retcode = EX_PARTIAL)\n\n\n## ====== Rename within S3\ntest_s3cmd(\"Rename within S3\", ['mv', '%s\/xyz\/etc\/logo.png' % pbucket(1), '%s\/xyz\/etc2\/Logo.PNG' % pbucket(1)],\n    must_find = [ \"move: '%s\/xyz\/etc\/logo.png' -> '%s\/xyz\/etc2\/Logo.PNG'\" % (pbucket(1), pbucket(1))])\n\n\n## ====== Rename (NoSuchKey)\ntest_s3cmd(\"Rename (NoSuchKey)\", ['mv', '%s\/xyz\/etc\/logo.png' % pbucket(1), '%s\/xyz\/etc2\/Logo.PNG' % pbucket(1)],\n    retcode = EX_NOTFOUND,\n    must_find_re = [ 'Key not found' ],\n    must_not_find = [ \"move: '%s\/xyz\/etc\/logo.png' -> '%s\/xyz\/etc2\/Logo.PNG'\" % (pbucket(1), pbucket(1)) ])\n\n## ====== Sync more from S3 (invalid src)\ntest_s3cmd(\"Sync more from S3 (invalid src)\", ['sync', '--delete-removed', '%s\/xyz\/DOESNOTEXIST' % pbucket(1), 'testsuite-out'],\n    must_not_find = [ \"delete: 'testsuite-out\/logo.png'\" ])\n\n## ====== Sync more from S3\ntest_s3cmd(\"Sync more from S3\", ['sync', '--delete-removed', '%s\/xyz' % pbucket(1), 'testsuite-out'],\n    must_find = [ \"'%s\/xyz\/etc2\/Logo.PNG' -> 'testsuite-out\/xyz\/etc2\/Logo.PNG'\" % pbucket(1),\n                  \"'%s\/xyz\/demo\/some-file.xml' -> 'testsuite-out\/xyz\/demo\/some-file.xml'\" % pbucket(1) ],\n    must_not_find_re = [ \"not-deleted.*etc\/logo.png\", \"delete: 'testsuite-out\/logo.png'\" ])\n\n\n## ====== Make dst dir for get\ntest_rmdir(\"Remove dst dir for get\", \"testsuite-out\")\n\n\n## ====== Get multiple files\ntest_s3cmd(\"Get multiple files\", ['get', '%s\/xyz\/etc2\/Logo.PNG' % pbucket(1), '%s\/xyz\/etc\/AtomicClockRadio.ttf' % pbucket(1), 'testsuite-out'],\n    retcode = EX_USAGE,\n    must_find = [ 'Destination must be a directory or stdout when downloading multiple sources.' ])\n\n## ====== put\/get non-ASCII filenames\ntest_s3cmd(\"Put unicode filenames\", ['put', u'testsuite\/encodings\/UTF-8\/\u016a\u0146\u0407\u040c\u0153\u0111\u0417\/\u017d\u016f\u017eo',  u'%s\/xyz\/encodings\/UTF-8\/\u016a\u0146\u0407\u040c\u0153\u0111\u0417\/\u017d\u016f\u017eo' % pbucket(1)],\n           retcode = 0,\n           must_find = [ '->' ])\n\n\n## ====== Make dst dir for get\ntest_mkdir(\"Make dst dir for get\", \"testsuite-out\")\n\n\n## ====== put\/get non-ASCII filenames\ntest_s3cmd(\"Get unicode filenames\", ['get', u'%s\/xyz\/encodings\/UTF-8\/\u016a\u0146\u0407\u040c\u0153\u0111\u0417\/\u017d\u016f\u017eo' % pbucket(1), 'testsuite-out'],\n           retcode = 0,\n           must_find = [ '->' ])\n\n\n## ====== Get multiple files\ntest_s3cmd(\"Get multiple files\", ['get', '%s\/xyz\/etc2\/Logo.PNG' % pbucket(1), '%s\/xyz\/etc\/AtomicClockRadio.ttf' % pbucket(1), 'testsuite-out'],\n    must_find = [ u\"-> 'testsuite-out\/Logo.PNG'\",\n                  u\"-> 'testsuite-out\/AtomicClockRadio.ttf'\" ])\n\n## ====== Upload files differing in capitalisation\ntest_s3cmd(\"blah.txt \/ Blah.txt\", ['put', '-r', 'testsuite\/blahBlah', pbucket(1)],\n    must_find = [ '%s\/blahBlah\/Blah.txt' % pbucket(1), '%s\/blahBlah\/blah.txt' % pbucket(1)])\n\n## ====== Copy between buckets\ntest_s3cmd(\"Copy between buckets\", ['cp', '%s\/xyz\/etc2\/Logo.PNG' % pbucket(1), '%s\/xyz\/etc2\/logo.png' % pbucket(3)],\n    must_find = [ \"remote copy: '%s\/xyz\/etc2\/Logo.PNG' -> '%s\/xyz\/etc2\/logo.png'\" % (pbucket(1), pbucket(3)) ])\n\n## ====== Recursive copy\ntest_s3cmd(\"Recursive copy, set ACL\", ['cp', '-r', '--acl-public', '%s\/xyz\/' % pbucket(1), '%s\/copy\/' % pbucket(2), '--exclude', 'demo\/dir?\/*.txt', '--exclude', 'non-printables*'],\n    must_find = [ \"remote copy: '%s\/xyz\/etc2\/Logo.PNG' -> '%s\/copy\/etc2\/Logo.PNG'\" % (pbucket(1), pbucket(2)),\n                  \"remote copy: '%s\/xyz\/blahBlah\/Blah.txt' -> '%s\/copy\/blahBlah\/Blah.txt'\" % (pbucket(1), pbucket(2)),\n                  \"remote copy: '%s\/xyz\/blahBlah\/blah.txt' -> '%s\/copy\/blahBlah\/blah.txt'\" % (pbucket(1), pbucket(2)) ],\n    must_not_find = [ \"demo\/dir1\/file1-1.txt\" ])\n\n## ====== Verify ACL and MIME type","29":"Similar lines in 2 files\n==run-tests-minio:710\n==run-tests:700\n    must_find = [\"remote copy: 'etc2\/Logo.PNG' -> 'etc\/linked.png'\"],\n           # Don't want to recursively copy linked directories!\n           must_not_find_re = [\"etc\/more\/linked-dir\/more\/give-me-more.txt\",\n                               \"etc\/brokenlink.png\"],\n           retcode = EX_PARTIAL)\n\n## ====== Multi source move\ntest_s3cmd(\"Multi-source move\", ['mv', '-r', '%s\/copy\/blahBlah\/Blah.txt' % pbucket(2), '%s\/copy\/etc\/' % pbucket(2), '%s\/moved\/' % pbucket(2)],\n    must_find = [ \"move: '%s\/copy\/blahBlah\/Blah.txt' -> '%s\/moved\/Blah.txt'\" % (pbucket(2), pbucket(2)),\n                  \"move: '%s\/copy\/etc\/AtomicClockRadio.ttf' -> '%s\/moved\/AtomicClockRadio.ttf'\" % (pbucket(2), pbucket(2)),\n                  \"move: '%s\/copy\/etc\/TypeRa.ttf' -> '%s\/moved\/TypeRa.ttf'\" % (pbucket(2), pbucket(2)) ],\n    must_not_find = [ \"blah.txt\" ])\n\n## ====== Verify move\ntest_s3cmd(\"Verify move\", ['ls', '-r', pbucket(2)],\n    must_find = [ \"%s\/moved\/Blah.txt\" % pbucket(2),\n                  \"%s\/moved\/AtomicClockRadio.ttf\" % pbucket(2),\n                  \"%s\/moved\/TypeRa.ttf\" % pbucket(2),\n                  \"%s\/copy\/blahBlah\/blah.txt\" % pbucket(2) ],\n    must_not_find = [ \"%s\/copy\/blahBlah\/Blah.txt\" % pbucket(2),\n                      \"%s\/copy\/etc\/AtomicClockRadio.ttf\" % pbucket(2),\n                      \"%s\/copy\/etc\/TypeRa.ttf\" % pbucket(2) ])\n\n## ====== List all\ntest_s3cmd(\"List all\", ['la'],\n           must_find = [ \"%s\/urandom.bin\" % pbucket(1)])\n\n## ====== Simple delete\ntest_s3cmd(\"Simple delete\", ['del', '%s\/xyz\/etc2\/Logo.PNG' % pbucket(1)],\n    must_find = [ \"delete: '%s\/xyz\/etc2\/Logo.PNG'\" % pbucket(1) ])\n\n## ====== Simple delete with rm\ntest_s3cmd(\"Simple delete with rm\", ['rm', '%s\/xyz\/test_rm\/TypeRa.ttf' % pbucket(1)],\n    must_find = [ \"delete: '%s\/xyz\/test_rm\/TypeRa.ttf'\" % pbucket(1) ])\n\n## ====== Create expiration rule with days and prefix","30":"Similar lines in 2 files\n==run-tests-minio:798\n==run-tests:777\ntest_s3cmd(\"Recursive delete maximum exceeded\", ['del', '--recursive', '--max-delete=1', '--exclude', 'Atomic*', '%s\/xyz\/etc' % pbucket(1)],\n    must_not_find = [ \"delete: '%s\/xyz\/etc\/TypeRa.ttf'\" % pbucket(1) ])\n\n## ====== Recursive delete\ntest_s3cmd(\"Recursive delete\", ['del', '--recursive', '--exclude', 'Atomic*', '%s\/xyz\/etc' % pbucket(1)],\n    must_find = [ \"delete: '%s\/xyz\/etc\/TypeRa.ttf'\" % pbucket(1) ],\n    must_find_re = [ \"delete: '.*\/etc\/logo.png'\" ],\n    must_not_find = [ \"AtomicClockRadio.ttf\" ])\n\n## ====== Recursive delete with rm\ntest_s3cmd(\"Recursive delete with rm\", ['rm', '--recursive', '--exclude', 'Atomic*', '%s\/xyz\/test_rm' % pbucket(1)],\n    must_find = [ \"delete: '%s\/xyz\/test_rm\/more\/give-me-more.txt'\" % pbucket(1) ],\n    must_find_re = [ \"delete: '.*\/test_rm\/logo.png'\" ],\n    must_not_find = [ \"AtomicClockRadio.ttf\" ])\n\n## ====== Recursive delete all\ntest_s3cmd(\"Recursive delete all\", ['del', '--recursive', '--force', pbucket(1)],\n    must_find_re = [ \"delete: '.*binary\/random-crap'\" ])\n\n## ====== Remove empty bucket\ntest_s3cmd(\"Remove empty bucket\", ['rb', pbucket(1)],\n    must_find = [ \"Bucket '%s\/' removed\" % pbucket(1) ])\n\n## ====== Remove remaining buckets\ntest_s3cmd(\"Remove remaining buckets\", ['rb', '--recursive', pbucket(2), pbucket(3)],\n    must_find = [ \"Bucket '%s\/' removed\" % pbucket(2),\n              \"Bucket '%s\/' removed\" % pbucket(3) ])\n\n# vim:et:ts=4:sts=4:ai","31":"Similar lines in 2 files\n==run-tests-minio:362\n==run-tests:359\n    must_find = \"Bucket '%s\/' created\" % pbucket(1))\n\n\n\n## ====== Create multiple buckets\ntest_s3cmd(\"Create multiple buckets\", ['mb', pbucket(2), pbucket(3)],\n    must_find = [ \"Bucket '%s\/' created\" % pbucket(2), \"Bucket '%s\/' created\" % pbucket(3)])\n\n\n## ====== Invalid bucket name\ntest_s3cmd(\"Invalid bucket name\", [\"mb\", \"--bucket-location=EU\", pbucket('EU')],\n    retcode = EX_USAGE,\n    must_find = \"ERROR: Parameter problem: Bucket name '%s' contains disallowed character\" % bucket('EU'),\n    must_not_find_re = \"Bucket.*created\")\n\n\n## ====== Buckets list\ntest_s3cmd(\"Buckets list\", [\"ls\"],\n    must_find = [ pbucket(1), pbucket(2), pbucket(3) ], must_not_find_re = pbucket('EU'))\n\n## ====== Directory for cache\ntest_flushdir(\"Create cache dir\", \"testsuite\/cachetest\")\n\n## ====== Sync to S3","32":"Similar lines in 2 files\n==run-tests-minio:682\n==run-tests:672\ntest_s3cmd(\"sign string\", ['sign', 's3cmd'], must_find_re = [\"Signature:\"])\ntest_s3cmd(\"signurl time\", ['signurl', '%s\/copy\/etc2\/Logo.PNG' % pbucket(2), str(int(time.time()) + 60)], must_find_re = [\"http:\/\/\"])\ntest_s3cmd(\"signurl time offset\", ['signurl', '%s\/copy\/etc2\/Logo.PNG' % pbucket(2), '+60'], must_find_re = [\"https?:\/\/\"])\ntest_s3cmd(\"signurl content disposition and type\", ['signurl', '%s\/copy\/etc2\/Logo.PNG' % pbucket(2), '+60', '--content-disposition=inline; filename=video.mp4', '--content-type=video\/mp4'], must_find_re = [ 'response-content-disposition', 'response-content-type' ] )\n\n## ====== Rename within S3\ntest_s3cmd(\"Rename within S3\", ['mv', '%s\/copy\/etc2\/Logo.PNG' % pbucket(2), '%s\/copy\/etc\/logo.png' % pbucket(2)],\n    must_find = [ \"move: '%s\/copy\/etc2\/Logo.PNG' -> '%s\/copy\/etc\/logo.png'\" % (pbucket(2), pbucket(2))])\n\n## ====== Sync between buckets\ntest_s3cmd(\"Sync remote2remote\", ['sync', '%s\/xyz\/' % pbucket(1), '%s\/copy\/' % pbucket(2), '--delete-removed', '--exclude', 'non-printables*'],\n    must_find = [ \"remote copy: '%s\/xyz\/demo\/dir1\/file1-1.txt' -> '%s\/copy\/demo\/dir1\/file1-1.txt'\" % (pbucket(1), pbucket(2)),\n                  \"remote copy: 'etc\/logo.png' -> 'etc2\/Logo.PNG'\",\n                  \"delete: '%s\/copy\/etc\/logo.png'\" % pbucket(2) ],\n    must_not_find = [ \"blah.txt\" ])\n\n## ====== Don't Put symbolic link","33":"Similar lines in 2 files\n==run-tests-minio:389\n==run-tests:386\n           ],\n           must_not_find_re = [\"demo\/\", \"^(?!WARNING: Skipping).*\\.png$\", \"permission-denied-dir\"],\n           retcode = EX_PARTIAL)\n\n## ====== Create new file and sync with caching enabled\ntest_mkdir(\"Create cache dir\", \"testsuite\/cachetest\/content\")\nwith open(\"testsuite\/cachetest\/content\/testfile\", \"w\"):\n    pass\n","34":"Similar lines in 2 files\n==run-tests-minio:558\n==run-tests:549\n           must_find = [ \"'testsuite\/demo\/some-file.xml' -> '%s\/xyz\/demo\/some-file.xml' \" % pbucket(1) ],\n           must_not_find = [ \"'testsuite\/etc\/linked.png' -> '%s\/xyz\/etc\/linked.png'\" % pbucket(1) ],\n           retcode = EX_PARTIAL)\n\n\n## ====== Don't check MD5 sum on Sync\ntest_copy(\"Change file cksum1.txt\", \"testsuite\/checksum\/cksum2.txt\", \"testsuite\/checksum\/cksum1.txt\")\ntest_copy(\"Change file cksum33.txt\", \"testsuite\/checksum\/cksum2.txt\", \"testsuite\/checksum\/cksum33.txt\")"},"number":{"0":"W0401","1":"W0102","2":"W0102","3":"W0102","4":"W0102","5":"W0102","6":"C0121","7":"R1732","8":"C0200","9":"C0200","10":"W0102","11":"R1732","12":"R1732","13":"W0401","14":"W0102","15":"W0102","16":"W0102","17":"W0102","18":"W0102","19":"C0121","20":"R1732","21":"C0200","22":"C0200","23":"W0102","24":"R1732","25":"R1732","26":"R0801","27":"R0801","28":"R0801","29":"R0801","30":"R0801","31":"R0801","32":"R0801","33":"R0801","34":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint","15":"pylint","16":"pylint","17":"pylint","18":"pylint","19":"pylint","20":"pylint","21":"pylint","22":"pylint","23":"pylint","24":"pylint","25":"pylint","26":"pylint","27":"pylint","28":"pylint","29":"pylint","30":"pylint","31":"pylint","32":"pylint","33":"pylint","34":"pylint"},"lines_amount":{"0":828,"1":828,"2":828,"3":828,"4":828,"5":828,"6":828,"7":828,"8":828,"9":828,"10":828,"11":828,"12":828,"13":807,"14":807,"15":807,"16":807,"17":807,"18":807,"19":807,"20":807,"21":807,"22":807,"23":807,"24":807,"25":807,"26":123,"27":123,"28":123,"29":123,"30":123,"31":123,"32":123,"33":123,"34":123},"commit":{"0":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","1":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","2":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","3":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","4":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","5":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","6":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","7":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","8":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","9":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","10":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","11":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","12":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","13":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","14":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","15":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","16":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","17":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","18":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","19":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","20":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","21":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","22":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","23":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","24":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","25":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","26":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","27":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","28":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","29":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","30":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","31":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","32":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","33":"5db139e241fd7a4ec37be543690ee653cf1ca0d2","34":"5db139e241fd7a4ec37be543690ee653cf1ca0d2"},"repo":{"0":"s3tools\/s3cmd","1":"s3tools\/s3cmd","2":"s3tools\/s3cmd","3":"s3tools\/s3cmd","4":"s3tools\/s3cmd","5":"s3tools\/s3cmd","6":"s3tools\/s3cmd","7":"s3tools\/s3cmd","8":"s3tools\/s3cmd","9":"s3tools\/s3cmd","10":"s3tools\/s3cmd","11":"s3tools\/s3cmd","12":"s3tools\/s3cmd","13":"s3tools\/s3cmd","14":"s3tools\/s3cmd","15":"s3tools\/s3cmd","16":"s3tools\/s3cmd","17":"s3tools\/s3cmd","18":"s3tools\/s3cmd","19":"s3tools\/s3cmd","20":"s3tools\/s3cmd","21":"s3tools\/s3cmd","22":"s3tools\/s3cmd","23":"s3tools\/s3cmd","24":"s3tools\/s3cmd","25":"s3tools\/s3cmd","26":"s3tools\/s3cmd","27":"s3tools\/s3cmd","28":"s3tools\/s3cmd","29":"s3tools\/s3cmd","30":"s3tools\/s3cmd","31":"s3tools\/s3cmd","32":"s3tools\/s3cmd","33":"s3tools\/s3cmd","34":"s3tools\/s3cmd"}}