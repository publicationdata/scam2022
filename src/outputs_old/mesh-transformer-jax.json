{"type":{"0":"W","1":"W","2":"C","3":"W","4":"R","5":"W","6":"W","7":"R","8":"R","9":"R","10":"R","11":"R","12":"R","13":"R","14":"R","15":"R","16":"R","17":"R","18":"R","19":"R","20":"R","21":"R","22":"R","23":"R","24":"R"},"module":{"0":"device_sample","1":"device_serve","2":"device_serve","3":"device_train","4":"eval_harness","5":"ray_tpu","6":"slim_model","7":"tfrecord_loader","8":"to_hf_weights","9":"train","10":"train","11":"train","12":"train","13":"train","14":"train","15":"train","16":"train","17":"train","18":"train","19":"train","20":"train","21":"train","22":"train","23":"train","24":"train"},"obj":{"0":"","1":"","2":"","3":"","4":"","5":"create_tpu","6":"","7":"TFRecordLoader.__init__","8":"","9":"","10":"","11":"","12":"","13":"","14":"","15":"","16":"","17":"","18":"","19":"","20":"","21":"","22":"","23":"","24":""},"lnum":{"0":14,"1":16,"2":151,"3":17,"4":25,"5":25,"6":12,"7":19,"8":485,"9":39,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"col":{"0":0,"1":0,"2":23,"3":0,"4":23,"5":8,"6":0,"7":21,"8":23,"9":23,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"filename":{"0":"device_sample.py","1":"device_serve.py","2":"device_serve.py","3":"device_train.py","4":"eval_harness.py","5":"ray_tpu.py","6":"slim_model.py","7":"tfrecord_loader.py","8":"to_hf_weights.py","9":"train.py","10":"train.py","11":"train.py","12":"train.py","13":"train.py","14":"train.py","15":"train.py","16":"train.py","17":"train.py","18":"train.py","19":"train.py","20":"train.py","21":"train.py","22":"train.py","23":"train.py","24":"train.py"},"symbol":{"0":"redefined-builtin","1":"redefined-builtin","2":"len-as-condition","3":"redefined-builtin","4":"consider-using-with","5":"redefined-builtin","6":"redefined-builtin","7":"consider-using-with","8":"consider-using-with","9":"consider-using-with","10":"duplicate-code","11":"duplicate-code","12":"duplicate-code","13":"duplicate-code","14":"duplicate-code","15":"duplicate-code","16":"duplicate-code","17":"duplicate-code","18":"duplicate-code","19":"duplicate-code","20":"duplicate-code","21":"duplicate-code","22":"duplicate-code","23":"duplicate-code","24":"duplicate-code"},"text":{"0":"Redefining built-in 'open'","1":"Redefining built-in 'open'","2":"Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty","3":"Redefining built-in 'open'","4":"Consider using 'with' for resource-allocating operations","5":"Redefining built-in 'type'","6":"Redefining built-in 'open'","7":"Consider using 'with' for resource-allocating operations","8":"Consider using 'with' for resource-allocating operations","9":"Consider using 'with' for resource-allocating operations","10":"Similar lines in 2 files\n==device_sample:28\n==device_serve:80\n    args = parse_args()\n    params = json.load(open(args.config))\n\n    gradient_accumulation_steps = params.get(\"gradient_accumulation_steps\", 1)\n    per_replica_batch = params[\"per_replica_batch\"]\n    cores_per_replica = params[\"cores_per_replica\"]\n\n    assert cores_per_replica <= 8\n\n    bucket = params[\"bucket\"]\n    model_dir = params[\"model_dir\"]\n    layers = params[\"layers\"]\n    d_model = params[\"d_model\"]\n    n_heads = params[\"n_heads\"]\n    n_vocab = params[\"n_vocab\"]\n    seq = params[\"seq\"]\n    norm = params[\"norm\"]\n\n    params[\"sampler\"] = nucleaus_sample\n    opt = optax.chain(\n        optax.scale(1 \/ gradient_accumulation_steps),\n        clip_by_global_norm(1),\n        optax.scale_by_adam(),\n        optax.additive_weight_decay(0),\n        optax.scale(-1),\n        optax.scale_by_schedule(util.gpt3_schedule(0, 1, 0, 0))\n    )\n\n    params[\"optimizer\"] = opt\n\n    start = time.time()\n    print(f\"jax devices: {jax.device_count()}\")\n    print(f\"jax runtime initialized in {time.time() - start:.06}s\")\n\n    mesh_shape = (jax.device_count() \/\/ cores_per_replica, cores_per_replica)\n    devices = np.array(jax.devices()).reshape(mesh_shape)\n\n    with open(f\"gs:\/\/{bucket}\/{model_dir}\/meta.json\", \"r\") as f:\n        meta = json.load(f)\n\n    ckpt_step = meta[\"checkpoints\"][-1]\n    print(f\"using checkpoint {ckpt_step}\")\n","11":"Similar lines in 2 files\n==device_sample:72\n==device_serve:124\n    with jax.experimental.maps.mesh(devices, ('dp', 'mp')):\n        network = CausalTransformer(params)\n\n        start = time.time()\n        network.state = read_ckpt(network.state, f\"gs:\/\/{bucket}\/{model_dir}\/step_{ckpt_step}\/\", devices.shape[1])\n        print(f\"network loaded in {time.time() - start:.06}s\")\n\n        local_shards = max(jax.local_device_count() \/\/ mesh_shape[1], 1)\n        del network.state[\"opt_state\"]\n        network.state = network.move_xmap(network.state, np.zeros(local_shards))\n\n        tokenizer = transformers.GPT2TokenizerFast.from_pretrained('gpt2')\n\n        while True:","12":"Similar lines in 2 files\n==eval_harness:30\n==train:50\n    gradient_accumulation_steps = params.get(\"gradient_accumulation_steps\", 1)\n    per_replica_batch = params[\"per_replica_batch\"]\n    tpu_size = params[\"tpu_size\"]\n    cores_per_replica = params[\"cores_per_replica\"]\n\n    bucket = params[\"bucket\"]\n    model_dir = params[\"model_dir\"]\n    layers = params[\"layers\"]\n    d_model = params[\"d_model\"]\n    n_heads = params[\"n_heads\"]\n    n_vocab = params[\"n_vocab\"]\n    seq = params[\"seq\"]\n    norm = params[\"norm\"]","13":"Similar lines in 2 files\n==device_sample:4\n==device_serve:6\nimport jax\nimport numpy as np\nimport optax\n\nfrom mesh_transformer import util\nfrom mesh_transformer.checkpoint import read_ckpt\nfrom mesh_transformer.sampling import nucleaus_sample\nfrom mesh_transformer.transformer_shard import CausalTransformer\nimport transformers\nfrom smart_open import open\n\nfrom mesh_transformer.util import clip_by_global_norm\n","14":"Similar lines in 3 files\n==device_sample:58\n==device_serve:110\n==slim_model:48\n    start = time.time()\n    print(f\"jax devices: {jax.device_count()}\")\n    print(f\"jax runtime initialized in {time.time() - start:.06}s\")\n\n    mesh_shape = (jax.device_count() \/\/ cores_per_replica, cores_per_replica)\n    devices = np.array(jax.devices()).reshape(mesh_shape)\n\n    with open(f\"gs:\/\/{bucket}\/{model_dir}\/meta.json\", \"r\") as f:\n        meta = json.load(f)\n","15":"Similar lines in 2 files\n==device_sample:21\n==eval_harness:16\n    parser.add_argument(\"--config\", type=str, default=None, help=\"Config file location\")\n\n    args = parser.parse_args()\n    return args\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    params = json.load(open(args.config))\n","16":"Similar lines in 2 files\n==device_sample:18\n==device_serve:68\ndef parse_args():\n    # Parse command line arguments\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", type=str, default=None, help=\"Config file location\")\n\n    args = parser.parse_args()\n    return args\n\n\nif __name__ == \"__main__\":","17":"Similar lines in 2 files\n==eval_harness:9\n==train:15\ndef parse_args():\n    # Parse command line arguments\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--tpu\", type=str, help=\"Name of TPU to train on.\")\n    parser.add_argument(\"--tpu_region\", type=str, help=\"Region of TPU to train on.\")\n    parser.add_argument(\"--preemptible\", action=\"store_true\")\n\n    parser.add_argument(\"--config\", type=str, default=None, help=\"Config file location\")\n","18":"Similar lines in 3 files\n==device_sample:37\n==device_serve:89\n==train:55\n    bucket = params[\"bucket\"]\n    model_dir = params[\"model_dir\"]\n    layers = params[\"layers\"]\n    d_model = params[\"d_model\"]\n    n_heads = params[\"n_heads\"]\n    n_vocab = params[\"n_vocab\"]\n    seq = params[\"seq\"]\n    norm = params[\"norm\"]\n","19":"Similar lines in 2 files\n==device_sample:0\n==slim_model:0\nimport argparse\nimport json\nimport time\n\nimport jax\nimport numpy as np\nimport optax\n\nfrom mesh_transformer import util","20":"Similar lines in 3 files\n==device_sample:37\n==device_serve:89\n==eval_harness:35\n    bucket = params[\"bucket\"]\n    model_dir = params[\"model_dir\"]\n    layers = params[\"layers\"]\n    d_model = params[\"d_model\"]\n    n_heads = params[\"n_heads\"]\n    n_vocab = params[\"n_vocab\"]\n    seq = params[\"seq\"]\n    norm = params[\"norm\"]","21":"Similar lines in 3 files\n==device_sample:0\n==device_train:0\n==slim_model:0\nimport argparse\nimport json\nimport time\n\nimport jax\nimport numpy as np\nimport optax\n","22":"Similar lines in 3 files\n==device_sample:72\n==device_serve:124\n==slim_model:64\n    with jax.experimental.maps.mesh(devices, ('dp', 'mp')):\n        network = CausalTransformer(params)\n\n        start = time.time()\n        network.state = read_ckpt(network.state, f\"gs:\/\/{bucket}\/{model_dir}\/step_{ckpt_step}\/\", devices.shape[1])\n        print(f\"network loaded in {time.time() - start:.06}s\")\n","23":"Similar lines in 3 files\n==device_sample:49\n==device_serve:101\n==slim_model:41\n        clip_by_global_norm(1),\n        optax.scale_by_adam(),\n        optax.additive_weight_decay(0),\n        optax.scale(-1),\n        optax.scale_by_schedule(util.gpt3_schedule(0, 1, 0, 0))\n    )\n","24":"Similar lines in 3 files\n==device_sample:23\n==eval_harness:18\n==slim_model:23\n    args = parser.parse_args()\n    return args\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    params = json.load(open(args.config))"},"number":{"0":"W0622","1":"W0622","2":"C1801","3":"W0622","4":"R1732","5":"W0622","6":"W0622","7":"R1732","8":"R1732","9":"R1732","10":"R0801","11":"R0801","12":"R0801","13":"R0801","14":"R0801","15":"R0801","16":"R0801","17":"R0801","18":"R0801","19":"R0801","20":"R0801","21":"R0801","22":"R0801","23":"R0801","24":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint","15":"pylint","16":"pylint","17":"pylint","18":"pylint","19":"pylint","20":"pylint","21":"pylint","22":"pylint","23":"pylint","24":"pylint"},"lines_amount":{"0":106,"1":195,"2":195,"3":400,"4":75,"5":166,"6":83,"7":158,"8":493,"9":170,"10":170,"11":170,"12":170,"13":170,"14":170,"15":170,"16":170,"17":170,"18":170,"19":170,"20":170,"21":170,"22":170,"23":170,"24":170},"commit":{"0":"592f6ffe6f230139eeb728a377211a95a99e4168","1":"592f6ffe6f230139eeb728a377211a95a99e4168","2":"592f6ffe6f230139eeb728a377211a95a99e4168","3":"592f6ffe6f230139eeb728a377211a95a99e4168","4":"592f6ffe6f230139eeb728a377211a95a99e4168","5":"592f6ffe6f230139eeb728a377211a95a99e4168","6":"592f6ffe6f230139eeb728a377211a95a99e4168","7":"592f6ffe6f230139eeb728a377211a95a99e4168","8":"592f6ffe6f230139eeb728a377211a95a99e4168","9":"592f6ffe6f230139eeb728a377211a95a99e4168","10":"592f6ffe6f230139eeb728a377211a95a99e4168","11":"592f6ffe6f230139eeb728a377211a95a99e4168","12":"592f6ffe6f230139eeb728a377211a95a99e4168","13":"592f6ffe6f230139eeb728a377211a95a99e4168","14":"592f6ffe6f230139eeb728a377211a95a99e4168","15":"592f6ffe6f230139eeb728a377211a95a99e4168","16":"592f6ffe6f230139eeb728a377211a95a99e4168","17":"592f6ffe6f230139eeb728a377211a95a99e4168","18":"592f6ffe6f230139eeb728a377211a95a99e4168","19":"592f6ffe6f230139eeb728a377211a95a99e4168","20":"592f6ffe6f230139eeb728a377211a95a99e4168","21":"592f6ffe6f230139eeb728a377211a95a99e4168","22":"592f6ffe6f230139eeb728a377211a95a99e4168","23":"592f6ffe6f230139eeb728a377211a95a99e4168","24":"592f6ffe6f230139eeb728a377211a95a99e4168"},"repo":{"0":"kingoflolz\/mesh-transformer-jax","1":"kingoflolz\/mesh-transformer-jax","2":"kingoflolz\/mesh-transformer-jax","3":"kingoflolz\/mesh-transformer-jax","4":"kingoflolz\/mesh-transformer-jax","5":"kingoflolz\/mesh-transformer-jax","6":"kingoflolz\/mesh-transformer-jax","7":"kingoflolz\/mesh-transformer-jax","8":"kingoflolz\/mesh-transformer-jax","9":"kingoflolz\/mesh-transformer-jax","10":"kingoflolz\/mesh-transformer-jax","11":"kingoflolz\/mesh-transformer-jax","12":"kingoflolz\/mesh-transformer-jax","13":"kingoflolz\/mesh-transformer-jax","14":"kingoflolz\/mesh-transformer-jax","15":"kingoflolz\/mesh-transformer-jax","16":"kingoflolz\/mesh-transformer-jax","17":"kingoflolz\/mesh-transformer-jax","18":"kingoflolz\/mesh-transformer-jax","19":"kingoflolz\/mesh-transformer-jax","20":"kingoflolz\/mesh-transformer-jax","21":"kingoflolz\/mesh-transformer-jax","22":"kingoflolz\/mesh-transformer-jax","23":"kingoflolz\/mesh-transformer-jax","24":"kingoflolz\/mesh-transformer-jax"}}