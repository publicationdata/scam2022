{"type":{"0":"W","1":"W","2":"W","3":"C","4":"C","5":"C","6":"C","7":"W","8":"W","9":"W","10":"R","11":"R","12":"R","13":"R","14":"R","15":"R","16":"R","17":"R"},"module":{"0":"demo_with_ade20k_ssn","1":"download_models","2":"photo_gif","3":"photo_wct","4":"photo_wct","5":"photo_wct","6":"photo_wct","7":"photo_wct","8":"photo_wct","9":"photo_wct","10":"smooth_filter","11":"smooth_filter","12":"smooth_filter","13":"smooth_filter","14":"smooth_filter","15":"smooth_filter","16":"smooth_filter","17":"smooth_filter"},"obj":{"0":"segment_this_img","1":"download_file_from_google_drive","2":"GIFSmoothing.forward","3":"PhotoWCT.__compute_label_info","4":"PhotoWCT.__compute_label_info","5":"PhotoWCT.__feature_wct","6":"PhotoWCT.__feature_wct","7":"PhotoWCT.forward","8":"PhotoWCT.__compute_label_info","9":"PhotoWCT.__compute_label_info","10":"","11":"","12":"","13":"","14":"","15":"","16":"","17":""},"lnum":{"0":99,"1":4,"2":14,"3":57,"4":57,"5":76,"6":76,"7":170,"8":60,"9":61,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"col":{"0":4,"1":36,"2":0,"3":11,"4":37,"5":11,"6":37,"7":0,"8":8,"9":8,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"filename":{"0":"demo_with_ade20k_ssn.py","1":"download_models.py","2":"photo_gif.py","3":"photo_wct.py","4":"photo_wct.py","5":"photo_wct.py","6":"photo_wct.py","7":"photo_wct.py","8":"photo_wct.py","9":"photo_wct.py","10":"smooth_filter.py","11":"smooth_filter.py","12":"smooth_filter.py","13":"smooth_filter.py","14":"smooth_filter.py","15":"smooth_filter.py","16":"smooth_filter.py","17":"smooth_filter.py"},"symbol":{"0":"redefined-builtin","1":"redefined-builtin","2":"redefined-builtin","3":"singleton-comparison","4":"singleton-comparison","5":"singleton-comparison","6":"singleton-comparison","7":"redefined-builtin","8":"attribute-defined-outside-init","9":"attribute-defined-outside-init","10":"duplicate-code","11":"duplicate-code","12":"duplicate-code","13":"duplicate-code","14":"duplicate-code","15":"duplicate-code","16":"duplicate-code","17":"duplicate-code"},"text":{"0":"Redefining built-in 'input'","1":"Redefining built-in 'id'","2":"Redefining built-in 'input'","3":"Comparison 'cont_seg.size == False' should be 'cont_seg.size is False' if checking for the singleton value False, or 'not cont_seg.size' if testing for falsiness","4":"Comparison 'styl_seg.size == False' should be 'styl_seg.size is False' if checking for the singleton value False, or 'not styl_seg.size' if testing for falsiness","5":"Comparison 'cont_seg.size == False' should be 'cont_seg.size is False' if checking for the singleton value False, or 'not cont_seg.size' if testing for falsiness","6":"Comparison 'styl_seg.size == False' should be 'styl_seg.size is False' if checking for the singleton value False, or 'not styl_seg.size' if testing for falsiness","7":"Redefining built-in 'input'","8":"Attribute 'label_set' defined outside __init__","9":"Attribute 'label_indicator' defined outside __init__","10":"Similar lines in 2 files\n==process_stylization:105\n==process_stylization_ade20k_ssn:180\n            utils.save_image(stylized_img.data.cpu().float(), output_image_path, nrow=1, padding=0)\n\n            with Timer(\"Elapsed time in propagation: %f\"):\n                out_img = smoothing_module.process(output_image_path, content_image_path)\n            out_img.save(output_image_path)\n\n            if not cuda:\n                print(\"NotImplemented: The CPU version of smooth filter has not been implemented currently.\")\n                return\n\n            if no_post is False:\n                with Timer(\"Elapsed time in post processing: %f\"):\n                    out_img = smooth_filter(output_image_path, content_image_path, f_radius=15, f_edge=1e-1)\n            out_img.save(output_image_path)\n        else:\n            with Timer(\"Elapsed time in stylization: %f\"):\n                stylized_img = stylization_module.transform(cont_img, styl_img, cont_seg, styl_seg)\n            if ch != new_ch or cw != new_cw:","11":"Similar lines in 2 files\n==process_stylization:77\n==process_stylization_ade20k_ssn:143\n        except:\n            cont_seg = []\n            styl_seg = []\n\n        cont_img = transforms.ToTensor()(cont_img).unsqueeze(0)\n        styl_img = transforms.ToTensor()(styl_img).unsqueeze(0)\n\n        if cuda:\n            cont_img = cont_img.cuda(0)\n            styl_img = styl_img.cuda(0)\n            stylization_module.cuda(0)\n\n        # cont_img = Variable(cont_img, volatile=True)\n        # styl_img = Variable(styl_img, volatile=True)\n\n        cont_seg = np.asarray(cont_seg)\n        styl_seg = np.asarray(styl_seg)","12":"Similar lines in 2 files\n==process_stylization:125\n==process_stylization_ade20k_ssn:200\n            grid = utils.make_grid(stylized_img.data, nrow=1, padding=0)\n            ndarr = grid.mul(255).clamp(0, 255).byte().permute(1, 2, 0).cpu().numpy()\n            out_img = Image.fromarray(ndarr)\n\n            with Timer(\"Elapsed time in propagation: %f\"):\n                out_img = smoothing_module.process(out_img, cont_pilimg)\n\n            if no_post is False:\n                with Timer(\"Elapsed time in post processing: %f\"):\n                    out_img = smooth_filter(out_img, cont_pilimg, f_radius=15, f_edge=1e-1)\n            out_img.save(output_image_path)","13":"Similar lines in 2 files\n==demo:27\n==demo_with_ade20k_ssn:72\nif args.fast:\n    from photo_gif import GIFSmoothing\n    p_pro = GIFSmoothing(r=35, eps=0.001)\nelse:\n    from photo_smooth import Propagator\n    p_pro = Propagator()\nif args.cuda:\n    p_wct.cuda(0)\n","14":"Similar lines in 2 files\n==process_stylization:62\n==process_stylization_ade20k_ssn:127\n    with torch.no_grad():\n        cont_img = Image.open(content_image_path).convert('RGB')\n        styl_img = Image.open(style_image_path).convert('RGB')\n\n        new_cw, new_ch = memory_limit_image_resize(cont_img)\n        new_sw, new_sh = memory_limit_image_resize(styl_img)\n        cont_pilimg = cont_img.copy()","15":"Similar lines in 2 files\n==demo:37\n==demo_with_ade20k_ssn:121\n    stylization_module=p_wct,\n    smoothing_module=p_pro,\n    content_image_path=args.content_image_path,\n    style_image_path=args.style_image_path,\n    content_seg_path=args.content_seg_path,\n    style_seg_path=args.style_seg_path,\n    output_image_path=args.output_image_path,","16":"Similar lines in 2 files\n==process_stylization:6\n==process_stylization_ade20k_ssn:7\nimport numpy as np\nfrom PIL import Image\nfrom torch.autograd import Variable\nimport torchvision.transforms as transforms\nimport torchvision.utils as utils\nimport torch.nn as nn","17":"Similar lines in 2 files\n==process_stylization:69\n==process_stylization_ade20k_ssn:135\n        cw = cont_pilimg.width\n        ch = cont_pilimg.height\n        try:\n            cont_seg = Image.open(content_seg_path)\n            styl_seg = Image.open(style_seg_path)"},"number":{"0":"W0622","1":"W0622","2":"W0622","3":"C0121","4":"C0121","5":"C0121","6":"C0121","7":"W0622","8":"W0201","9":"W0201","10":"R0801","11":"R0801","12":"R0801","13":"R0801","14":"R0801","15":"R0801","16":"R0801","17":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint","15":"pylint","16":"pylint","17":"pylint"},"lines_amount":{"0":135,"1":35,"2":47,"3":171,"4":171,"5":171,"6":171,"7":171,"8":171,"9":171,"10":406,"11":406,"12":406,"13":406,"14":406,"15":406,"16":406,"17":406},"commit":{"0":"af0c8fecce58aa71f76488546231214f6684be02","1":"af0c8fecce58aa71f76488546231214f6684be02","2":"af0c8fecce58aa71f76488546231214f6684be02","3":"af0c8fecce58aa71f76488546231214f6684be02","4":"af0c8fecce58aa71f76488546231214f6684be02","5":"af0c8fecce58aa71f76488546231214f6684be02","6":"af0c8fecce58aa71f76488546231214f6684be02","7":"af0c8fecce58aa71f76488546231214f6684be02","8":"af0c8fecce58aa71f76488546231214f6684be02","9":"af0c8fecce58aa71f76488546231214f6684be02","10":"af0c8fecce58aa71f76488546231214f6684be02","11":"af0c8fecce58aa71f76488546231214f6684be02","12":"af0c8fecce58aa71f76488546231214f6684be02","13":"af0c8fecce58aa71f76488546231214f6684be02","14":"af0c8fecce58aa71f76488546231214f6684be02","15":"af0c8fecce58aa71f76488546231214f6684be02","16":"af0c8fecce58aa71f76488546231214f6684be02","17":"af0c8fecce58aa71f76488546231214f6684be02"},"repo":{"0":"NVIDIA\/FastPhotoStyle","1":"NVIDIA\/FastPhotoStyle","2":"NVIDIA\/FastPhotoStyle","3":"NVIDIA\/FastPhotoStyle","4":"NVIDIA\/FastPhotoStyle","5":"NVIDIA\/FastPhotoStyle","6":"NVIDIA\/FastPhotoStyle","7":"NVIDIA\/FastPhotoStyle","8":"NVIDIA\/FastPhotoStyle","9":"NVIDIA\/FastPhotoStyle","10":"NVIDIA\/FastPhotoStyle","11":"NVIDIA\/FastPhotoStyle","12":"NVIDIA\/FastPhotoStyle","13":"NVIDIA\/FastPhotoStyle","14":"NVIDIA\/FastPhotoStyle","15":"NVIDIA\/FastPhotoStyle","16":"NVIDIA\/FastPhotoStyle","17":"NVIDIA\/FastPhotoStyle"}}