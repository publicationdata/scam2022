{"type":{"0":"R","1":"C","2":"W","3":"R","4":"R","5":"R","6":"R","7":"R","8":"R","9":"R"},"module":{"0":"test","1":"test","2":"train","3":"train","4":"train","5":"train","6":"train","7":"train","8":"train","9":"train"},"obj":{"0":"","1":"","2":"","3":"","4":"","5":"","6":"","7":"","8":"","9":""},"lnum":{"0":53,"1":64,"2":174,"3":223,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1},"col":{"0":7,"1":0,"2":12,"3":15,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"filename":{"0":"test.py","1":"test.py","2":"train.py","3":"train.py","4":"train.py","5":"train.py","6":"train.py","7":"train.py","8":"train.py","9":"train.py"},"symbol":{"0":"consider-using-with","1":"consider-using-enumerate","2":"redefined-builtin","3":"consider-using-with","4":"duplicate-code","5":"duplicate-code","6":"duplicate-code","7":"duplicate-code","8":"duplicate-code","9":"duplicate-code"},"text":{"0":"Consider using 'with' for resource-allocating operations","1":"Consider using enumerate instead of iterating with range and len","2":"Redefining built-in 'id'","3":"Consider using 'with' for resource-allocating operations","4":"Similar lines in 2 files\n==test:83\n==train:253\n            target.write(\"%s, %f, %f, %f, %f, %f\"%(file_name, accuracy, prec, rec, f1, iou))\n            for item in class_accuracies:\n                target.write(\", %f\"%(item))\n            target.write(\"\\n\")\n\n            scores_list.append(accuracy)\n            class_scores_list.append(class_accuracies)\n            precision_list.append(prec)\n            recall_list.append(rec)\n            f1_list.append(f1)\n            iou_list.append(iou)\n\n            gt = helpers.colour_code_segmentation(gt, label_values)\n","5":"Similar lines in 2 files\n==test:18\n==train:75\nclass_names_list, label_values = helpers.get_label_info(os.path.join(args.dataset, \"class_dict.csv\"))\nclass_names_string = \"\"\nfor class_name in class_names_list:\n    if not class_name == class_names_list[-1]:\n        class_names_string = class_names_string + class_name + \", \"\n    else:\n        class_names_string = class_names_string + class_name\n\nnum_classes = len(label_values)\n","6":"Similar lines in 2 files\n==predict:0\n==test:0\nimport os,time,cv2, sys, math\nimport tensorflow as tf\nimport argparse\nimport numpy as np\n\nfrom utils import utils, helpers\nfrom builders import model_builder\n\nparser = argparse.ArgumentParser()","7":"Similar lines in 2 files\n==predict:30\n==test:29\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\nsess=tf.Session(config=config)\n\nnet_input = tf.placeholder(tf.float32,shape=[None,None,None,3])\nnet_output = tf.placeholder(tf.float32,shape=[None,None,None,num_classes])\n","8":"Similar lines in 2 files\n==predict:10\n==test:9\nparser.add_argument('--checkpoint_path', type=str, default=None, required=True, help='The path to the latest checkpoint weights for your model.')\nparser.add_argument('--crop_height', type=int, default=512, help='Height of cropped input image to network')\nparser.add_argument('--crop_width', type=int, default=512, help='Width of cropped input image to network')\nparser.add_argument('--model', type=str, default=None, required=True, help='The model you are using')\nparser.add_argument('--dataset', type=str, default=\"CamVid\", required=False, help='The dataset you are using')\nargs = parser.parse_args()\n","9":"Similar lines in 2 files\n==test:54\n==train:226\nscores_list = []\nclass_scores_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\niou_list = []"},"number":{"0":"R1732","1":"C0200","2":"W0622","3":"R1732","4":"R0801","5":"R0801","6":"R0801","7":"R0801","8":"R0801","9":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint"},"lines_amount":{"0":120,"1":120,"2":340,"3":340,"4":340,"5":340,"6":340,"7":340,"8":340,"9":340},"commit":{"0":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","1":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","2":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","3":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","4":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","5":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","6":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","7":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","8":"f04c94c2077a957bca0e8509b8ed2861769c4ba6","9":"f04c94c2077a957bca0e8509b8ed2861769c4ba6"},"repo":{"0":"GeorgeSeif\/Semantic-Segmentation-Suite","1":"GeorgeSeif\/Semantic-Segmentation-Suite","2":"GeorgeSeif\/Semantic-Segmentation-Suite","3":"GeorgeSeif\/Semantic-Segmentation-Suite","4":"GeorgeSeif\/Semantic-Segmentation-Suite","5":"GeorgeSeif\/Semantic-Segmentation-Suite","6":"GeorgeSeif\/Semantic-Segmentation-Suite","7":"GeorgeSeif\/Semantic-Segmentation-Suite","8":"GeorgeSeif\/Semantic-Segmentation-Suite","9":"GeorgeSeif\/Semantic-Segmentation-Suite"}}