{"type":{"0":"R","1":"R","2":"R"},"module":{"0":"pretrained_networks","1":"run_training","2":"run_training"},"obj":{"0":"load_networks","1":"","2":""},"lnum":{"0":72,"1":1,"2":1},"col":{"0":17,"1":0,"2":0},"filename":{"0":"pretrained_networks.py","1":"run_training.py","2":"run_training.py"},"symbol":{"0":"consider-using-with","1":"duplicate-code","2":"duplicate-code"},"text":{"0":"Consider using 'with' for resource-allocating operations","1":"Similar lines in 2 files\n==run_generator:89\n==run_projector:72\ndef _parse_num_range(s):\n    '''Accept either a comma separated list of numbers 'a,b,c' or a range 'a-c' and return as a list of ints.'''\n\n    range_re = re.compile(r'^(\\d+)-(\\d+)$')\n    m = range_re.match(s)\n    if m:\n        return list(range(int(m.group(1)), int(m.group(2))+1))\n    vals = s.split(',')\n    return [int(x) for x in vals]\n\n#----------------------------------------------------------------------------\n\n_examples = '''examples:\n\n  # Project generated images","2":"Similar lines in 2 files\n==run_metrics:30\n==run_training:123\ndef _str_to_bool(v):\n    if isinstance(v, bool):\n        return v\n    if v.lower() in ('yes', 'true', 't', 'y', '1'):\n        return True\n    elif v.lower() in ('no', 'false', 'f', 'n', '0'):\n        return False\n    else:\n        raise argparse.ArgumentTypeError('Boolean value expected.')\n"},"number":{"0":"R1732","1":"R0801","2":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint"},"lines_amount":{"0":81,"1":196,"2":196},"commit":{"0":"81ae61d7753c6a7b5a38c29aa81aed15adb19c2f","1":"81ae61d7753c6a7b5a38c29aa81aed15adb19c2f","2":"81ae61d7753c6a7b5a38c29aa81aed15adb19c2f"},"repo":{"0":"NVlabs\/stylegan2","1":"NVlabs\/stylegan2","2":"NVlabs\/stylegan2"},"stargazers":{"0":8497,"1":8497,"2":8497}}