{"type":{"0":"C","1":"C","2":"W","3":"R","4":"R","5":"W","6":"C","7":"C","8":"R","9":"R","10":"C","11":"C","12":"C","13":"C","14":"C","15":"R","16":"R","17":"R","18":"W","19":"W","20":"R","21":"W","22":"R","23":"C","24":"R","25":"W","26":"W","27":"W","28":"W","29":"W","30":"W","31":"W","32":"W","33":"W","34":"C","35":"C","36":"C","37":"R","38":"C","39":"C","40":"C","41":"C","42":"R","43":"R","44":"W","45":"R","46":"C","47":"C","48":"C","49":"C","50":"C","51":"C","52":"C","53":"R","54":"R","55":"C","56":"R","57":"R","58":"R","59":"R","60":"R","61":"R","62":"R","63":"R","64":"R","65":"R","66":"R","67":"R","68":"R"},"module":{"0":"bilateral_filtering","1":"bilateral_filtering","2":"boostmonodepth_utils","3":"main","4":"mesh","5":"mesh","6":"mesh","7":"mesh","8":"mesh","9":"mesh","10":"mesh","11":"mesh","12":"mesh","13":"mesh","14":"mesh","15":"mesh","16":"mesh","17":"mesh","18":"mesh","19":"mesh","20":"mesh_tools","21":"mesh_tools","22":"mesh_tools","23":"mesh_tools","24":"mesh_tools","25":"networks","26":"networks","27":"networks","28":"networks","29":"networks","30":"networks","31":"networks","32":"networks","33":"networks","34":"utils","35":"utils","36":"utils","37":"utils","38":"utils","39":"utils","40":"utils","41":"utils","42":"utils","43":"utils","44":"utils","45":"utils","46":"utils","47":"utils","48":"utils","49":"utils","50":"utils","51":"utils","52":"utils","53":"utils","54":"utils","55":"utils","56":"utils","57":"utils","58":"utils","59":"utils","60":"utils","61":"utils","62":"utils","63":"utils","64":"utils","65":"utils","66":"utils","67":"utils","68":"utils"},"obj":{"0":"vis_depth_discontinuity","1":"bilateral_filter","2":"clean_folder","3":"","4":"","5":"generate_face.out_fmt","6":"group_edges","7":"group_edges","8":"combine_end_node","9":"remove_dangling","10":"context_and_holes","11":"context_and_holes","12":"context_and_holes","13":"context_and_holes","14":"context_and_holes","15":"context_and_holes","16":"DL_inpaint_edge","17":"read_ply","18":"Canvas_view.translate","19":"Canvas_view.rotate","20":"extrapolate","21":"dilate_valid_size","22":"size_operation","23":"incomplete_node","24":"revise_map_by_nodes","25":"PartialConv.forward","26":"PCBActiv.forward","27":"Inpaint_Depth_Net.add_border","28":"Inpaint_Depth_Net.forward_3P","29":"Inpaint_Depth_Net.forward","30":"Inpaint_Edge_Net.add_border","31":"Inpaint_Edge_Net.forward_3P","32":"Inpaint_Color_Net.forward_3P","33":"Inpaint_Color_Net.forward","34":"clean_far_edge_new","35":"clean_far_edge_new","36":"clean_far_edge_new","37":"clean_far_edge_new","38":"plan_path_e2e","39":"plan_path","40":"plan_path","41":"plan_path","42":"create_placeholder","43":"clean_far_edge","44":"dilate_valid_size","45":"depth_resize","46":"refine_color_around_edge","47":"refine_color_around_edge","48":"refine_color_around_edge","49":"refine_color_around_edge","50":"refine_color_around_edge","51":"refine_color_around_edge","52":"refine_color_around_edge","53":"refine_color_around_edge","54":"find_anchors","55":"find_largest_rect","56":"","57":"","58":"","59":"","60":"","61":"","62":"","63":"","64":"","65":"","66":"","67":"","68":""},"lnum":{"0":53,"1":113,"2":47,"3":29,"4":239,"5":200,"6":453,"7":527,"8":536,"9":733,"10":1016,"11":1022,"12":1079,"13":1097,"14":1160,"15":904,"16":1387,"17":2070,"18":2147,"19":2150,"20":81,"21":450,"22":460,"23":700,"24":893,"25":79,"26":126,"27":158,"28":180,"29":196,"30":285,"31":303,"32":373,"33":388,"34":225,"35":276,"36":308,"37":114,"38":382,"39":490,"40":522,"41":525,"42":638,"43":665,"44":897,"45":975,"46":1118,"47":1119,"48":1135,"49":1136,"50":1155,"51":1155,"52":1197,"53":1064,"54":1393,"55":1406,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1},"col":{"0":7,"1":7,"2":0,"3":19,"4":0,"5":16,"6":7,"7":7,"8":0,"9":0,"10":28,"11":30,"12":27,"13":31,"14":36,"15":0,"16":0,"17":13,"18":4,"19":4,"20":0,"21":0,"22":11,"23":15,"24":11,"25":22,"26":22,"27":25,"28":12,"29":8,"30":25,"31":12,"32":12,"33":22,"34":16,"35":16,"36":27,"37":0,"38":8,"39":8,"40":45,"41":19,"42":15,"43":0,"44":0,"45":7,"46":23,"47":24,"48":23,"49":24,"50":19,"51":65,"52":11,"53":0,"54":0,"55":51,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0},"filename":{"0":"bilateral_filtering.py","1":"bilateral_filtering.py","2":"boostmonodepth_utils.py","3":"main.py","4":"mesh.py","5":"mesh.py","6":"mesh.py","7":"mesh.py","8":"mesh.py","9":"mesh.py","10":"mesh.py","11":"mesh.py","12":"mesh.py","13":"mesh.py","14":"mesh.py","15":"mesh.py","16":"mesh.py","17":"mesh.py","18":"mesh.py","19":"mesh.py","20":"mesh_tools.py","21":"mesh_tools.py","22":"mesh_tools.py","23":"mesh_tools.py","24":"mesh_tools.py","25":"networks.py","26":"networks.py","27":"networks.py","28":"networks.py","29":"networks.py","30":"networks.py","31":"networks.py","32":"networks.py","33":"networks.py","34":"utils.py","35":"utils.py","36":"utils.py","37":"utils.py","38":"utils.py","39":"utils.py","40":"utils.py","41":"utils.py","42":"utils.py","43":"utils.py","44":"utils.py","45":"utils.py","46":"utils.py","47":"utils.py","48":"utils.py","49":"utils.py","50":"utils.py","51":"utils.py","52":"utils.py","53":"utils.py","54":"utils.py","55":"utils.py","56":"utils.py","57":"utils.py","58":"utils.py","59":"utils.py","60":"utils.py","61":"utils.py","62":"utils.py","63":"utils.py","64":"utils.py","65":"utils.py","66":"utils.py","67":"utils.py","68":"utils.py"},"symbol":{"0":"singleton-comparison","1":"singleton-comparison","2":"dangerous-default-value","3":"consider-using-with","4":"trailing-comma-tuple","5":"redefined-builtin","6":"singleton-comparison","7":"singleton-comparison","8":"too-many-branches","9":"too-many-branches","10":"singleton-comparison","11":"singleton-comparison","12":"singleton-comparison","13":"singleton-comparison","14":"singleton-comparison","15":"too-many-branches","16":"too-many-branches","17":"consider-using-with","18":"dangerous-default-value","19":"dangerous-default-value","20":"too-many-branches","21":"dangerous-default-value","22":"consider-using-in","23":"singleton-comparison","24":"consider-using-in","25":"redefined-builtin","26":"redefined-builtin","27":"redefined-builtin","28":"redefined-builtin","29":"redefined-builtin","30":"redefined-builtin","31":"redefined-builtin","32":"redefined-builtin","33":"redefined-builtin","34":"consider-using-enumerate","35":"consider-using-enumerate","36":"singleton-comparison","37":"too-many-branches","38":"consider-using-enumerate","39":"consider-using-enumerate","40":"singleton-comparison","41":"singleton-comparison","42":"consider-using-in","43":"too-many-branches","44":"dangerous-default-value","45":"literal-comparison","46":"singleton-comparison","47":"singleton-comparison","48":"singleton-comparison","49":"singleton-comparison","50":"singleton-comparison","51":"singleton-comparison","52":"singleton-comparison","53":"too-many-branches","54":"inconsistent-return-statements","55":"singleton-comparison","56":"duplicate-code","57":"duplicate-code","58":"duplicate-code","59":"duplicate-code","60":"duplicate-code","61":"duplicate-code","62":"duplicate-code","63":"duplicate-code","64":"duplicate-code","65":"duplicate-code","66":"duplicate-code","67":"duplicate-code","68":"duplicate-code"},"text":{"0":"Comparison 'label == False' should be 'label is False' if checking for the singleton value False, or 'not label' if testing for falsiness","1":"Comparison 'window_size == False' should be 'window_size is False' if checking for the singleton value False, or 'not window_size' if testing for falsiness","2":"Dangerous default value [] as argument","3":"Consider using 'with' for resource-allocating operations","4":"Disallow trailing comma tuple","5":"Redefining built-in 'input'","6":"Comparison 'spdb == True' should be 'spdb is True' if checking for the singleton value True, or 'spdb' if testing for truthiness","7":"Comparison 'spdb == True' should be 'spdb is True' if checking for the singleton value True, or 'spdb' if testing for truthiness","8":"Too many branches (16\/12)","9":"Too many branches (19\/12)","10":"Comparison 'mask_map == True' should be 'mask_map is True' if checking for the singleton value True, or 'bool(mask_map)' if testing for truthiness","11":"Comparison 'mask_map == True' should be 'mask_map is True' if checking for the singleton value True, or 'bool(mask_map)' if testing for truthiness","12":"Comparison 'connect_map[ne[0], ne[1]] == True' should be 'connect_map[ne[0], ne[1]] is True' if checking for the singleton value True, or 'connect_map[ne[0], ne[1]]' if testing for truthiness","13":"Comparison 'np.any(context_map[max(ne[0] - 1, 0):min(ne[0] + 2, mesh.graph['H']), max(ne[1] - 1, 0):min(ne[1] + 2, mesh.graph['W'])]) == True' should be 'np.any(context_map[max(ne[0] - 1, 0):min(ne[0] + 2, mesh.graph['H']), max(ne[1] - 1, 0):min(ne[1] + 2, mesh.graph['W'])]) is True' if checking for the singleton value True, or 'np.any(context_map[max(ne[0] - 1, 0):min(ne[0] + 2, mesh.graph['H']), max(ne[1] - 1, 0):min(ne[1] + 2, mesh.graph['W'])])' if testing for truthiness","14":"Comparison 'mask_map[mne[0], mne[1]] == True' should be 'mask_map[mne[0], mne[1]] is True' if checking for the singleton value True, or 'bool(mask_map[mne[0], mne[1]])' if testing for truthiness","15":"Too many branches (68\/12)","16":"Too many branches (26\/12)","17":"Consider using 'with' for resource-allocating operations","18":"Dangerous default value [] as argument","19":"Dangerous default value [] as argument","20":"Too many branches (21\/12)","21":"Dangerous default value [] as argument","22":"Consider merging these comparisons with \"in\" to \"operation in ('+', '-')\"","23":"Comparison 'connect_all_flag == True' should be 'connect_all_flag is True' if checking for the singleton value True, or 'connect_all_flag' if testing for truthiness","24":"Consider merging these comparisons with \"in\" to \"operation in ('+', '-')\"","25":"Redefining built-in 'input'","26":"Redefining built-in 'input'","27":"Redefining built-in 'input'","28":"Redefining built-in 'input'","29":"Redefining built-in 'input'","30":"Redefining built-in 'input'","31":"Redefining built-in 'input'","32":"Redefining built-in 'input'","33":"Redefining built-in 'input'","34":"Consider using enumerate instead of iterating with range and len","35":"Consider using enumerate instead of iterating with range and len","36":"Comparison 'np.all([fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes]) != True' should be 'np.all([fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes]) is not True' if checking for the singleton value True, or 'not np.all([fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes])' if testing for falsiness","37":"Too many branches (18\/12)","38":"Consider using enumerate instead of iterating with range and len","39":"Consider using enumerate instead of iterating with range and len","40":"Comparison 'np.all([fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes]) != True' should be 'np.all([fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes]) is not True' if checking for the singleton value True, or 'not np.all([fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes])' if testing for falsiness","41":"Comparison 'np.all([my_fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes]) != True' should be 'np.all([my_fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes]) is not True' if checking for the singleton value True, or 'not np.all([my_fpath_map[nlne[0], nlne[1]] == -1 for nlne in new_loc_nes])' if testing for falsiness","42":"Consider merging these comparisons with \"in\" to 'unknown_id not in (near_id, self_edge_id)'","43":"Too many branches (16\/12)","44":"Dangerous default value [] as argument","45":"Comparison to literal","46":"Comparison 'far_maps[ne_node[0], ne_node[1]] == False' should be 'far_maps[ne_node[0], ne_node[1]] is False' if checking for the singleton value False, or 'not far_maps[ne_node[0], ne_node[1]]' if testing for falsiness","47":"Comparison 'near_maps[ne_node[0], ne_node[1]] == False' should be 'near_maps[ne_node[0], ne_node[1]] is False' if checking for the singleton value False, or 'not near_maps[ne_node[0], ne_node[1]]' if testing for falsiness","48":"Comparison 'far_maps[ne_node[0], ne_node[1]] == False' should be 'far_maps[ne_node[0], ne_node[1]] is False' if checking for the singleton value False, or 'not far_maps[ne_node[0], ne_node[1]]' if testing for falsiness","49":"Comparison 'near_maps[ne_node[0], ne_node[1]] == False' should be 'near_maps[ne_node[0], ne_node[1]] is False' if checking for the singleton value False, or 'not near_maps[ne_node[0], ne_node[1]]' if testing for falsiness","50":"Comparison 'far_maps[ne_node[0], ne_node[1]] == False' should be 'far_maps[ne_node[0], ne_node[1]] is False' if checking for the singleton value False, or 'not far_maps[ne_node[0], ne_node[1]]' if testing for falsiness","51":"Comparison 'near_maps[ne_node[0], ne_node[1]] == False' should be 'near_maps[ne_node[0], ne_node[1]] is False' if checking for the singleton value False, or 'not near_maps[ne_node[0], ne_node[1]]' if testing for falsiness","52":"Comparison 'spdb == True' should be 'spdb is True' if checking for the singleton value True, or 'spdb' if testing for truthiness","53":"Too many branches (20\/12)","54":"Either all return statements in a function should return an expression, or none of them should.","55":"Comparison 'valid == False' should be 'valid is False' if checking for the singleton value False, or 'not valid' if testing for falsiness","56":"Similar lines in 2 files\n==mesh_tools:440\n==utils:887\ndef get_valid_size(imap):\n    x_max = np.where(imap.sum(1).squeeze() > 0)[0].max() + 1\n    x_min = np.where(imap.sum(1).squeeze() > 0)[0].min()\n    y_max = np.where(imap.sum(0).squeeze() > 0)[0].max() + 1\n    y_min = np.where(imap.sum(0).squeeze() > 0)[0].min()\n    size_dict = {'x_max':x_max, 'y_max':y_max, 'x_min':x_min, 'y_min':y_min}\n\n    return size_dict\n\ndef dilate_valid_size(isize_dict, imap, dilate=[0, 0]):\n    osize_dict = copy.deepcopy(isize_dict)\n    osize_dict['x_min'] = max(0, osize_dict['x_min'] - dilate[0])\n    osize_dict['x_max'] = min(imap.shape[0], osize_dict['x_max'] + dilate[0])\n    osize_dict['y_min'] = max(0, osize_dict['y_min'] - dilate[0])\n    osize_dict['y_max'] = min(imap.shape[1], osize_dict['y_max'] + dilate[1])\n\n    return osize_dict\n","57":"Similar lines in 2 files\n==mesh:940\n==mesh_tools:58\n                context_ccs[edge_id].add(far_node)\n                if mesh_nodes[far_node].get('edge_id') is not None:\n                    if edge_group.get(mesh_nodes[far_node]['edge_id']) is None:\n                        edge_group[mesh_nodes[far_node]['edge_id']] = set()\n                    edge_group[mesh_nodes[far_node]['edge_id']].add(far_node)\n        if len(edge_cc) > 2:\n            for edge_key in [*edge_group.keys()]:\n                if len(edge_group[edge_key]) == 1:\n                    context_ccs[edge_id].remove([*edge_group[edge_key]][0])","58":"Similar lines in 2 files\n==mesh:1468\n==mesh_tools:731\n                depth_edge_output = depth_edge_model.forward_3P(tensor_edge_dict['mask'],\n                                                                tensor_edge_dict['context'],\n                                                                tensor_edge_dict['rgb'],\n                                                                tensor_edge_dict['disp'],\n                                                                tensor_edge_dict['edge'],\n                                                                unit_length=128,\n                                                                cuda=device)\n                depth_edge_output = depth_edge_output.cpu()","59":"Similar lines in 2 files\n==mesh_tools:1067\n==utils:905\ndef crop_maps_by_size(size, *imaps):\n    omaps = []\n    for imap in imaps:\n        omaps.append(imap[size['x_min']:size['x_max'], size['y_min']:size['y_max']].copy())\n\n    return omaps\n","60":"Similar lines in 2 files\n==mesh_tools:256\n==utils:253\n                dmask = mask + 0\n                did = 0\n                while True:\n                    did += 1\n                    dmask = cv2.dilate(dmask, np.ones((3, 3)), iterations=1)\n                    if did > 3:\n                        break","61":"Similar lines in 2 files\n==mesh_tools:243\n==utils:242\n            pnodes = sorted(pnodes,\n                            key=lambda x: np.hypot((x[0] - ends[0][0]), (x[1] - ends[0][1])),\n                            reverse=True)[0]\n            npath = [*netx.shortest_path(sub_mesh, (ends[0][0], ends[0][1]), pnodes, weight='length')]\n            for np_node in npath:\n                npath_map[np_node[0], np_node[1]] = edge_id\n            fpath = []","62":"Similar lines in 2 files\n==mesh_tools:223\n==utils:140\n    ccs = [*netx.connected_components(mesh)]\n    end_pts = []\n    for cc in ccs:\n        end_pts.append(set())\n        for node in cc:\n            if mesh.nodes[node].get('cnt') is not None:\n                end_pts[-1].add((node[0], node[1], mesh.nodes[node]['depth']))","63":"Similar lines in 2 files\n==mesh:1477\n==mesh_tools:740\n    else:\n        tensor_edge_dict['output'] = tensor_edge_dict['edge']\n        depth_edge_output = tensor_edge_dict['edge'] + 0\n    patch_edge_dict['output'] = tensor_edge_dict['output'].squeeze().data.cpu().numpy()\n    edge_dict['output'] = np.zeros((mesh.graph['H'], mesh.graph['W']))\n    edge_dict['output'][union_size['x_min']:union_size['x_max'], union_size['y_min']:union_size['y_max']] = \\\n        patch_edge_dict['output']","64":"Similar lines in 2 files\n==mesh:931\n==mesh_tools:51\n            continue\n        edge_group = {}\n        for edge_node in edge_cc:\n            far_nodes = mesh_nodes[edge_node].get('far')\n            if far_nodes is None:\n                continue\n            for far_node in far_nodes:","65":"Similar lines in 2 files\n==mesh_tools:265\n==utils:262\n                    if len(ffnode) > 0:\n                        fnode = ffnode[0]\n                        break\n                if len(ffnode) == 0:\n                    continue\n                fpath.append((fnode[0], fnode[1]))","66":"Similar lines in 2 files\n==mesh:0\n==mesh_tools:0\nimport os\nimport numpy as np\ntry:\n    import cynetworkx as netx\nexcept ImportError:\n    import networkx as netx","67":"Similar lines in 3 files\n==mesh:1454\n==mesh:1569\n==mesh_tools:722\n        patch_edge_dict = dict()\n        patch_edge_dict['mask'], patch_edge_dict['context'], patch_edge_dict['rgb'], \\\n            patch_edge_dict['disp'], patch_edge_dict['edge'] = \\\n            crop_maps_by_size(union_size, edge_dict['mask'], edge_dict['context'],\n                                edge_dict['rgb'], edge_dict['disp'], edge_dict['edge'])","68":"Similar lines in 2 files\n==bilateral_filtering:53\n==utils:1320\n    disp = 1.\/depth\n    u_diff = (disp[1:, :] - disp[:-1, :])[:-1, 1:-1]\n    b_diff = (disp[:-1, :] - disp[1:, :])[1:, 1:-1]\n    l_diff = (disp[:, 1:] - disp[:, :-1])[1:-1, :-1]\n    r_diff = (disp[:, :-1] - disp[:, 1:])[1:-1, 1:]"},"number":{"0":"C0121","1":"C0121","2":"W0102","3":"R1732","4":"R1707","5":"W0622","6":"C0121","7":"C0121","8":"R0912","9":"R0912","10":"C0121","11":"C0121","12":"C0121","13":"C0121","14":"C0121","15":"R0912","16":"R0912","17":"R1732","18":"W0102","19":"W0102","20":"R0912","21":"W0102","22":"R1714","23":"C0121","24":"R1714","25":"W0622","26":"W0622","27":"W0622","28":"W0622","29":"W0622","30":"W0622","31":"W0622","32":"W0622","33":"W0622","34":"C0200","35":"C0200","36":"C0121","37":"R0912","38":"C0200","39":"C0200","40":"C0121","41":"C0121","42":"R1714","43":"R0912","44":"W0102","45":"R0123","46":"C0121","47":"C0121","48":"C0121","49":"C0121","50":"C0121","51":"C0121","52":"C0121","53":"R0912","54":"R1710","55":"C0121","56":"R0801","57":"R0801","58":"R0801","59":"R0801","60":"R0801","61":"R0801","62":"R0801","63":"R0801","64":"R0801","65":"R0801","66":"R0801","67":"R0801","68":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint","15":"pylint","16":"pylint","17":"pylint","18":"pylint","19":"pylint","20":"pylint","21":"pylint","22":"pylint","23":"pylint","24":"pylint","25":"pylint","26":"pylint","27":"pylint","28":"pylint","29":"pylint","30":"pylint","31":"pylint","32":"pylint","33":"pylint","34":"pylint","35":"pylint","36":"pylint","37":"pylint","38":"pylint","39":"pylint","40":"pylint","41":"pylint","42":"pylint","43":"pylint","44":"pylint","45":"pylint","46":"pylint","47":"pylint","48":"pylint","49":"pylint","50":"pylint","51":"pylint","52":"pylint","53":"pylint","54":"pylint","55":"pylint","56":"pylint","57":"pylint","58":"pylint","59":"pylint","60":"pylint","61":"pylint","62":"pylint","63":"pylint","64":"pylint","65":"pylint","66":"pylint","67":"pylint","68":"pylint"},"lines_amount":{"0":216,"1":216,"2":69,"3":142,"4":2297,"5":2297,"6":2297,"7":2297,"8":2297,"9":2297,"10":2297,"11":2297,"12":2297,"13":2297,"14":2297,"15":2297,"16":2297,"17":2297,"18":2297,"19":2297,"20":1084,"21":1084,"22":1084,"23":1084,"24":1084,"25":502,"26":502,"27":502,"28":502,"29":502,"30":502,"31":502,"32":502,"33":502,"34":1417,"35":1417,"36":1417,"37":1417,"38":1417,"39":1417,"40":1417,"41":1417,"42":1417,"43":1417,"44":1417,"45":1417,"46":1417,"47":1417,"48":1417,"49":1417,"50":1417,"51":1417,"52":1417,"53":1417,"54":1417,"55":1417,"56":1417,"57":1417,"58":1417,"59":1417,"60":1417,"61":1417,"62":1417,"63":1417,"64":1417,"65":1417,"66":1417,"67":1417,"68":1417},"commit":{"0":"de0446740a3726f3de76c32e78b43bd985d987f9","1":"de0446740a3726f3de76c32e78b43bd985d987f9","2":"de0446740a3726f3de76c32e78b43bd985d987f9","3":"de0446740a3726f3de76c32e78b43bd985d987f9","4":"de0446740a3726f3de76c32e78b43bd985d987f9","5":"de0446740a3726f3de76c32e78b43bd985d987f9","6":"de0446740a3726f3de76c32e78b43bd985d987f9","7":"de0446740a3726f3de76c32e78b43bd985d987f9","8":"de0446740a3726f3de76c32e78b43bd985d987f9","9":"de0446740a3726f3de76c32e78b43bd985d987f9","10":"de0446740a3726f3de76c32e78b43bd985d987f9","11":"de0446740a3726f3de76c32e78b43bd985d987f9","12":"de0446740a3726f3de76c32e78b43bd985d987f9","13":"de0446740a3726f3de76c32e78b43bd985d987f9","14":"de0446740a3726f3de76c32e78b43bd985d987f9","15":"de0446740a3726f3de76c32e78b43bd985d987f9","16":"de0446740a3726f3de76c32e78b43bd985d987f9","17":"de0446740a3726f3de76c32e78b43bd985d987f9","18":"de0446740a3726f3de76c32e78b43bd985d987f9","19":"de0446740a3726f3de76c32e78b43bd985d987f9","20":"de0446740a3726f3de76c32e78b43bd985d987f9","21":"de0446740a3726f3de76c32e78b43bd985d987f9","22":"de0446740a3726f3de76c32e78b43bd985d987f9","23":"de0446740a3726f3de76c32e78b43bd985d987f9","24":"de0446740a3726f3de76c32e78b43bd985d987f9","25":"de0446740a3726f3de76c32e78b43bd985d987f9","26":"de0446740a3726f3de76c32e78b43bd985d987f9","27":"de0446740a3726f3de76c32e78b43bd985d987f9","28":"de0446740a3726f3de76c32e78b43bd985d987f9","29":"de0446740a3726f3de76c32e78b43bd985d987f9","30":"de0446740a3726f3de76c32e78b43bd985d987f9","31":"de0446740a3726f3de76c32e78b43bd985d987f9","32":"de0446740a3726f3de76c32e78b43bd985d987f9","33":"de0446740a3726f3de76c32e78b43bd985d987f9","34":"de0446740a3726f3de76c32e78b43bd985d987f9","35":"de0446740a3726f3de76c32e78b43bd985d987f9","36":"de0446740a3726f3de76c32e78b43bd985d987f9","37":"de0446740a3726f3de76c32e78b43bd985d987f9","38":"de0446740a3726f3de76c32e78b43bd985d987f9","39":"de0446740a3726f3de76c32e78b43bd985d987f9","40":"de0446740a3726f3de76c32e78b43bd985d987f9","41":"de0446740a3726f3de76c32e78b43bd985d987f9","42":"de0446740a3726f3de76c32e78b43bd985d987f9","43":"de0446740a3726f3de76c32e78b43bd985d987f9","44":"de0446740a3726f3de76c32e78b43bd985d987f9","45":"de0446740a3726f3de76c32e78b43bd985d987f9","46":"de0446740a3726f3de76c32e78b43bd985d987f9","47":"de0446740a3726f3de76c32e78b43bd985d987f9","48":"de0446740a3726f3de76c32e78b43bd985d987f9","49":"de0446740a3726f3de76c32e78b43bd985d987f9","50":"de0446740a3726f3de76c32e78b43bd985d987f9","51":"de0446740a3726f3de76c32e78b43bd985d987f9","52":"de0446740a3726f3de76c32e78b43bd985d987f9","53":"de0446740a3726f3de76c32e78b43bd985d987f9","54":"de0446740a3726f3de76c32e78b43bd985d987f9","55":"de0446740a3726f3de76c32e78b43bd985d987f9","56":"de0446740a3726f3de76c32e78b43bd985d987f9","57":"de0446740a3726f3de76c32e78b43bd985d987f9","58":"de0446740a3726f3de76c32e78b43bd985d987f9","59":"de0446740a3726f3de76c32e78b43bd985d987f9","60":"de0446740a3726f3de76c32e78b43bd985d987f9","61":"de0446740a3726f3de76c32e78b43bd985d987f9","62":"de0446740a3726f3de76c32e78b43bd985d987f9","63":"de0446740a3726f3de76c32e78b43bd985d987f9","64":"de0446740a3726f3de76c32e78b43bd985d987f9","65":"de0446740a3726f3de76c32e78b43bd985d987f9","66":"de0446740a3726f3de76c32e78b43bd985d987f9","67":"de0446740a3726f3de76c32e78b43bd985d987f9","68":"de0446740a3726f3de76c32e78b43bd985d987f9"},"repo":{"0":"vt-vl-lab\/3d-photo-inpainting","1":"vt-vl-lab\/3d-photo-inpainting","2":"vt-vl-lab\/3d-photo-inpainting","3":"vt-vl-lab\/3d-photo-inpainting","4":"vt-vl-lab\/3d-photo-inpainting","5":"vt-vl-lab\/3d-photo-inpainting","6":"vt-vl-lab\/3d-photo-inpainting","7":"vt-vl-lab\/3d-photo-inpainting","8":"vt-vl-lab\/3d-photo-inpainting","9":"vt-vl-lab\/3d-photo-inpainting","10":"vt-vl-lab\/3d-photo-inpainting","11":"vt-vl-lab\/3d-photo-inpainting","12":"vt-vl-lab\/3d-photo-inpainting","13":"vt-vl-lab\/3d-photo-inpainting","14":"vt-vl-lab\/3d-photo-inpainting","15":"vt-vl-lab\/3d-photo-inpainting","16":"vt-vl-lab\/3d-photo-inpainting","17":"vt-vl-lab\/3d-photo-inpainting","18":"vt-vl-lab\/3d-photo-inpainting","19":"vt-vl-lab\/3d-photo-inpainting","20":"vt-vl-lab\/3d-photo-inpainting","21":"vt-vl-lab\/3d-photo-inpainting","22":"vt-vl-lab\/3d-photo-inpainting","23":"vt-vl-lab\/3d-photo-inpainting","24":"vt-vl-lab\/3d-photo-inpainting","25":"vt-vl-lab\/3d-photo-inpainting","26":"vt-vl-lab\/3d-photo-inpainting","27":"vt-vl-lab\/3d-photo-inpainting","28":"vt-vl-lab\/3d-photo-inpainting","29":"vt-vl-lab\/3d-photo-inpainting","30":"vt-vl-lab\/3d-photo-inpainting","31":"vt-vl-lab\/3d-photo-inpainting","32":"vt-vl-lab\/3d-photo-inpainting","33":"vt-vl-lab\/3d-photo-inpainting","34":"vt-vl-lab\/3d-photo-inpainting","35":"vt-vl-lab\/3d-photo-inpainting","36":"vt-vl-lab\/3d-photo-inpainting","37":"vt-vl-lab\/3d-photo-inpainting","38":"vt-vl-lab\/3d-photo-inpainting","39":"vt-vl-lab\/3d-photo-inpainting","40":"vt-vl-lab\/3d-photo-inpainting","41":"vt-vl-lab\/3d-photo-inpainting","42":"vt-vl-lab\/3d-photo-inpainting","43":"vt-vl-lab\/3d-photo-inpainting","44":"vt-vl-lab\/3d-photo-inpainting","45":"vt-vl-lab\/3d-photo-inpainting","46":"vt-vl-lab\/3d-photo-inpainting","47":"vt-vl-lab\/3d-photo-inpainting","48":"vt-vl-lab\/3d-photo-inpainting","49":"vt-vl-lab\/3d-photo-inpainting","50":"vt-vl-lab\/3d-photo-inpainting","51":"vt-vl-lab\/3d-photo-inpainting","52":"vt-vl-lab\/3d-photo-inpainting","53":"vt-vl-lab\/3d-photo-inpainting","54":"vt-vl-lab\/3d-photo-inpainting","55":"vt-vl-lab\/3d-photo-inpainting","56":"vt-vl-lab\/3d-photo-inpainting","57":"vt-vl-lab\/3d-photo-inpainting","58":"vt-vl-lab\/3d-photo-inpainting","59":"vt-vl-lab\/3d-photo-inpainting","60":"vt-vl-lab\/3d-photo-inpainting","61":"vt-vl-lab\/3d-photo-inpainting","62":"vt-vl-lab\/3d-photo-inpainting","63":"vt-vl-lab\/3d-photo-inpainting","64":"vt-vl-lab\/3d-photo-inpainting","65":"vt-vl-lab\/3d-photo-inpainting","66":"vt-vl-lab\/3d-photo-inpainting","67":"vt-vl-lab\/3d-photo-inpainting","68":"vt-vl-lab\/3d-photo-inpainting"},"stargazers":{"0":5454,"1":5454,"2":5454,"3":5454,"4":5454,"5":5454,"6":5454,"7":5454,"8":5454,"9":5454,"10":5454,"11":5454,"12":5454,"13":5454,"14":5454,"15":5454,"16":5454,"17":5454,"18":5454,"19":5454,"20":5454,"21":5454,"22":5454,"23":5454,"24":5454,"25":5454,"26":5454,"27":5454,"28":5454,"29":5454,"30":5454,"31":5454,"32":5454,"33":5454,"34":5454,"35":5454,"36":5454,"37":5454,"38":5454,"39":5454,"40":5454,"41":5454,"42":5454,"43":5454,"44":5454,"45":5454,"46":5454,"47":5454,"48":5454,"49":5454,"50":5454,"51":5454,"52":5454,"53":5454,"54":5454,"55":5454,"56":5454,"57":5454,"58":5454,"59":5454,"60":5454,"61":5454,"62":5454,"63":5454,"64":5454,"65":5454,"66":5454,"67":5454,"68":5454}}