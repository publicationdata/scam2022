{"type":{"0":"W","1":"W","2":"R","3":"W","4":"W","5":"W","6":"W","7":"W","8":"W","9":"C","10":"W","11":"W","12":"R","13":"W","14":"R"},"module":{"0":"fbchisellldb","1":"fbchisellldb","2":"fbchisellldb","3":"fbchisellldb","4":"fbchisellldbbase","5":"fbchisellldbbase","6":"fbchisellldbinputhelpers","7":"fbchisellldbobjcruntimehelpers","8":"fbchisellldbviewhelpers","9":"fbchisellldbviewhelpers","10":"fbchisellldb","11":"fbchisellldb","12":"fbchisellldb","13":"fbchisellldb","14":"fbchisellldb"},"obj":{"0":"__lldb_init_module","1":"makeRunCommand.runCommand","2":"validateArgsForCommand","3":"helpForCommand","4":"FBCommandArgument.__init__","5":"FBCommandArgument.__init__","6":"FBInputHandler.handleInput","7":"object_getClass","8":"setViewHidden","9":"upwardsRecursiveDescription","10":"__lldb_init_module","11":"makeRunCommand.runCommand","12":"validateArgsForCommand","13":"helpForCommand","14":""},"lnum":{"0":15,"1":72,"2":105,"3":148,"4":16,"5":16,"6":34,"7":20,"8":16,"9":138,"10":15,"11":72,"12":105,"13":148,"14":1},"col":{"0":33,"1":29,"2":0,"3":4,"4":41,"5":50,"6":53,"7":20,"8":18,"9":7,"10":33,"11":29,"12":0,"13":4,"14":0},"filename":{"0":"fbchisellldb.py","1":"fbchisellldb.py","2":"fbchisellldb.py","3":"fbchisellldb.py","4":"fbchisellldbbase.py","5":"fbchisellldbbase.py","6":"fbchisellldbinputhelpers.py","7":"fbchisellldbobjcruntimehelpers.py","8":"fbchisellldbviewhelpers.py","9":"fbchisellldbviewhelpers.py","10":"fblldb.py","11":"fblldb.py","12":"fblldb.py","13":"fblldb.py","14":"fblldb.py"},"symbol":{"0":"redefined-builtin","1":"redefined-builtin","2":"inconsistent-return-statements","3":"redefined-builtin","4":"redefined-builtin","5":"redefined-builtin","6":"redefined-builtin","7":"redefined-builtin","8":"redefined-builtin","9":"len-as-condition","10":"redefined-builtin","11":"redefined-builtin","12":"inconsistent-return-statements","13":"redefined-builtin","14":"duplicate-code"},"text":{"0":"Redefining built-in 'dict'","1":"Redefining built-in 'input'","2":"Either all return statements in a function should return an expression, or none of them should.","3":"Redefining built-in 'help'","4":"Redefining built-in 'type'","5":"Redefining built-in 'help'","6":"Redefining built-in 'bytes'","7":"Redefining built-in 'object'","8":"Redefining built-in 'object'","9":"Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty","10":"Redefining built-in 'dict'","11":"Redefining built-in 'input'","12":"Either all return statements in a function should return an expression, or none of them should.","13":"Redefining built-in 'help'","14":"Similar lines in 2 files\n==fbchisellldb:7\n==fbchisellldb:7\nimport imp\nimport os\nfrom optparse import OptionParser\n\nimport lldb\n\n\ndef __lldb_init_module(debugger, dict):\n    filePath = os.path.realpath(__file__)\n    lldbHelperDir = os.path.dirname(filePath)\n\n    commandsDirectory = os.path.join(lldbHelperDir, \"commands\")\n    loadCommandsInDirectory(commandsDirectory)\n\n\ndef loadCommandsInDirectory(commandsDirectory):\n    for file in os.listdir(commandsDirectory):\n        fileName, fileExtension = os.path.splitext(file)\n        if fileExtension == \".py\":\n            module = imp.load_source(fileName, os.path.join(commandsDirectory, file))\n\n            if hasattr(module, \"lldbinit\"):\n                module.lldbinit()\n\n            if hasattr(module, \"lldbcommands\"):\n                module._loadedFunctions = {}\n                for command in module.lldbcommands():\n                    loadCommand(\n                        module, command, commandsDirectory, fileName, fileExtension\n                    )\n\n\ndef loadCommand(module, command, directory, filename, extension):\n    func = makeRunCommand(command, os.path.join(directory, filename + extension))\n    name = command.name()\n    helpText = (\n        command.description().strip().splitlines()[0]\n    )  # first line of description\n\n    key = filename + \"_\" + name\n\n    module._loadedFunctions[key] = func\n\n    functionName = \"__\" + key\n\n    lldb.debugger.HandleCommand(\n        \"script \"\n        + functionName\n        + \" = sys.modules['\"\n        + module.__name__\n        + \"']._loadedFunctions['\"\n        + key\n        + \"']\"\n    )\n    lldb.debugger.HandleCommand(\n        'command script add --help \"{help}\" --function {function} {name}'.format(\n            help=helpText.replace('\"', '\\\\\"'),  # escape quotes\n            function=functionName,\n            name=name,\n        )\n    )\n\n\ndef makeRunCommand(command, filename):\n    def runCommand(debugger, input, exe_ctx, result, _):\n        command.result = result\n        command.context = exe_ctx\n        splitInput = command.lex(input)\n\n        # OptionParser will throw in the case where you want just one\n        # big long argument and no options and you enter something\n        # that starts with '-' in the argument. e.g.:\n        #     somecommand -[SomeClass someSelector:]\n        # This solves that problem by prepending a '--' so that\n        # OptionParser does the right thing.\n        options = command.options()\n        if len(options) == 0:\n            if \"--\" not in splitInput:\n                splitInput.insert(0, \"--\")\n\n        parser = optionParserForCommand(command)\n        (options, args) = parser.parse_args(splitInput)\n\n        # When there are more args than the command has declared, assume\n        # the initial args form an expression and combine them into a single arg.\n        if len(args) > len(command.args()):\n            overhead = len(args) - len(command.args())\n            head = args[: overhead + 1]  # Take N+1 and reduce to 1.\n            args = [\" \".join(head)] + args[-overhead:]\n\n        if validateArgsForCommand(args, command):\n            command.run(args, options)\n\n    runCommand.__doc__ = helpForCommand(command, filename)\n    return runCommand\n\n\ndef validateArgsForCommand(args, command):\n    if len(args) < len(command.args()):\n        defaultArgs = [arg.default for arg in command.args()]\n        defaultArgsToAppend = defaultArgs[len(args) :]\n\n        index = len(args)\n        for defaultArg in defaultArgsToAppend:\n            if not defaultArg:\n                arg = command.args()[index]\n                print(\"Whoops! You are missing the <\" + arg.argName + \"> argument.\")\n                print(\"\\nUsage: \" + usageForCommand(command))\n                return\n            index += 1\n\n        args.extend(defaultArgsToAppend)\n    return True\n\n\ndef optionParserForCommand(command):\n    parser = OptionParser()\n\n    for argument in command.options():\n        if argument.boolean:\n            parser.add_option(\n                argument.shortName,\n                argument.longName,\n                dest=argument.argName,\n                help=argument.help,\n                action=(\"store_false\" if argument.default else \"store_true\"),\n            )\n        else:\n            parser.add_option(\n                argument.shortName,\n                argument.longName,\n                dest=argument.argName,\n                help=argument.help,\n                default=argument.default,\n            )\n\n    return parser\n\n\ndef helpForCommand(command, filename):\n    help = command.description()\n\n    argSyntax = \"\"\n    optionSyntax = \"\"\n\n    if command.args():\n        help += \"\\n\\nArguments:\"\n        for arg in command.args():\n            help += \"\\n  <\" + arg.argName + \">; \"\n            if arg.argType:\n                help += \"Type: \" + arg.argType + \"; \"\n            help += arg.help\n            argSyntax += \" <\" + arg.argName + \">\"\n\n    if command.options():\n        help += \"\\n\\nOptions:\"\n        for option in command.options():\n\n            if option.longName and option.shortName:\n                optionFlag = option.longName + \"\/\" + option.shortName\n            elif option.longName:\n                optionFlag = option.longName\n            else:\n                optionFlag = option.shortName\n\n            help += \"\\n  \" + optionFlag + \" \"\n\n            if not option.boolean:\n                help += \"<\" + option.argName + \">; Type: \" + option.argType\n\n            help += \"; \" + option.help\n\n            optionSyntax += \" [{name}{arg}]\".format(\n                name=(option.longName or option.shortName),\n                arg=(\"\" if option.boolean else (\"=\" + option.argName)),\n            )\n\n    help += \"\\n\\nSyntax: \" + command.name() + optionSyntax + argSyntax\n\n    help += \"\\n\\nThis command is implemented as %s in %s.\" % (\n        command.__class__.__name__,\n        filename,\n    )\n\n    return help\n\n\ndef usageForCommand(command):\n    usage = command.name()\n    for arg in command.args():\n        if arg.default:\n            usage += \" [\" + arg.argName + \"]\"\n        else:\n            usage += \" \" + arg.argName\n\n    return usage"},"number":{"0":"W0622","1":"W0622","2":"R1710","3":"W0622","4":"W0622","5":"W0622","6":"W0622","7":"W0622","8":"W0622","9":"C1801","10":"W0622","11":"W0622","12":"R1710","13":"W0622","14":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint"},"lines_amount":{"0":204,"1":204,"2":204,"3":204,"4":242,"5":242,"6":41,"7":125,"8":155,"9":155,"10":204,"11":204,"12":204,"13":204,"14":204},"commit":{"0":"498764646e72db6f35b3fabc5e017fea311bf0d1","1":"498764646e72db6f35b3fabc5e017fea311bf0d1","2":"498764646e72db6f35b3fabc5e017fea311bf0d1","3":"498764646e72db6f35b3fabc5e017fea311bf0d1","4":"498764646e72db6f35b3fabc5e017fea311bf0d1","5":"498764646e72db6f35b3fabc5e017fea311bf0d1","6":"498764646e72db6f35b3fabc5e017fea311bf0d1","7":"498764646e72db6f35b3fabc5e017fea311bf0d1","8":"498764646e72db6f35b3fabc5e017fea311bf0d1","9":"498764646e72db6f35b3fabc5e017fea311bf0d1","10":"498764646e72db6f35b3fabc5e017fea311bf0d1","11":"498764646e72db6f35b3fabc5e017fea311bf0d1","12":"498764646e72db6f35b3fabc5e017fea311bf0d1","13":"498764646e72db6f35b3fabc5e017fea311bf0d1","14":"498764646e72db6f35b3fabc5e017fea311bf0d1"},"repo":{"0":"facebook\/chisel","1":"facebook\/chisel","2":"facebook\/chisel","3":"facebook\/chisel","4":"facebook\/chisel","5":"facebook\/chisel","6":"facebook\/chisel","7":"facebook\/chisel","8":"facebook\/chisel","9":"facebook\/chisel","10":"facebook\/chisel","11":"facebook\/chisel","12":"facebook\/chisel","13":"facebook\/chisel","14":"facebook\/chisel"},"stargazers":{"0":8668,"1":8668,"2":8668,"3":8668,"4":8668,"5":8668,"6":8668,"7":8668,"8":8668,"9":8668,"10":8668,"11":8668,"12":8668,"13":8668,"14":8668}}