{"type":{"0":"W","1":"R","2":"W","3":"W","4":"R","5":"R","6":"R","7":"R","8":"R","9":"R","10":"R","11":"R","12":"R","13":"R","14":"R"},"module":{"0":"get-poetry","1":"get-poetry","2":"install-poetry","3":"install-poetry","4":"install-poetry","5":"install-poetry","6":"install-poetry","7":"install-poetry","8":"install-poetry","9":"install-poetry","10":"install-poetry","11":"install-poetry","12":"install-poetry","13":"install-poetry","14":"install-poetry"},"obj":{"0":"","1":"Installer.update_path","2":"_get_win_folder_from_registry","3":"_get_win_folder_from_registry","4":"Installer._overwrite","5":"Installer._get","6":"","7":"","8":"","9":"","10":"","11":"","12":"","13":"","14":""},"lnum":{"0":50,"1":737,"2":181,"3":181,"4":747,"5":758,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1},"col":{"0":4,"1":4,"2":4,"3":9,"4":4,"5":21,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"filename":{"0":"get-poetry.py","1":"get-poetry.py","2":"install-poetry.py","3":"install-poetry.py","4":"install-poetry.py","5":"install-poetry.py","6":"install-poetry.py","7":"install-poetry.py","8":"install-poetry.py","9":"install-poetry.py","10":"install-poetry.py","11":"install-poetry.py","12":"install-poetry.py","13":"install-poetry.py","14":"install-poetry.py"},"symbol":{"0":"redefined-builtin","1":"inconsistent-return-statements","2":"redefined-builtin","3":"redefined-builtin","4":"inconsistent-return-statements","5":"consider-using-with","6":"duplicate-code","7":"duplicate-code","8":"duplicate-code","9":"duplicate-code","10":"duplicate-code","11":"duplicate-code","12":"duplicate-code","13":"duplicate-code","14":"duplicate-code"},"text":{"0":"Redefining built-in 'input'","1":"Either all return statements in a function should return an expression, or none of them should.","2":"Redefining built-in 'dir'","3":"Redefining built-in 'type'","4":"Either all return statements in a function should return an expression, or none of them should.","5":"Consider using 'with' for resource-allocating operations","6":"Similar lines in 2 files\n==get-poetry:71\n==install-poetry:39\nFOREGROUND_COLORS = {\n    \"black\": 30,\n    \"red\": 31,\n    \"green\": 32,\n    \"yellow\": 33,\n    \"blue\": 34,\n    \"magenta\": 35,\n    \"cyan\": 36,\n    \"white\": 37,\n}\n\nBACKGROUND_COLORS = {\n    \"black\": 40,\n    \"red\": 41,\n    \"green\": 42,\n    \"yellow\": 43,\n    \"blue\": 44,\n    \"magenta\": 45,\n    \"cyan\": 46,\n    \"white\": 47,\n}\n\nOPTIONS = {\"bold\": 1, \"underscore\": 4, \"blink\": 5, \"reverse\": 7, \"conceal\": 8}\n\n\ndef style(fg, bg, options):\n    codes = []\n\n    if fg:\n        codes.append(FOREGROUND_COLORS[fg])\n\n    if bg:\n        codes.append(BACKGROUND_COLORS[bg])\n\n    if options:\n        if not isinstance(options, (list, tuple)):\n            options = [options]\n\n        for option in options:\n            codes.append(OPTIONS[option])\n\n    return \"\\033[{}m\".format(\";\".join(map(str, codes)))\n\n\nSTYLES = {","7":"Similar lines in 2 files\n==get-poetry:125\n==install-poetry:95\n        return (\n            os.getenv(\"ANSICON\") is not None\n            or \"ON\" == os.getenv(\"ConEmuANSI\")\n            or \"xterm\" == os.getenv(\"Term\")\n        )\n\n    if not hasattr(sys.stdout, \"fileno\"):\n        return False\n\n    try:\n        return os.isatty(sys.stdout.fileno())\n    except UnsupportedOperation:\n        return False\n\n\ndef is_interactive():\n    if not hasattr(sys.stdin, \"fileno\"):\n        return False\n\n    try:\n        return os.isatty(sys.stdin.fileno())\n    except UnsupportedOperation:\n        return False\n\n\ndef colorize(style, text):\n    if not is_decorated():\n        return text\n\n    return \"{}{}\\033[0m\".format(STYLES[style], text)\n\n","8":"Similar lines in 2 files\n==get-poetry:1022\n==install-poetry:754\n    def _get(self, url):\n        request = Request(url, headers={\"User-Agent\": \"Python Poetry\"})\n\n        with closing(urlopen(request)) as r:\n            return r.read()\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Installs the latest (or given) version of poetry\"\n    )\n    parser.add_argument(\n        \"-p\",\n        \"--preview\",\n        help=\"install preview version\",\n        dest=\"preview\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\"--version\", help=\"install named version\", dest=\"version\")\n    parser.add_argument(\n        \"-f\",\n        \"--force\",\n        help=\"install on top of existing version\",\n        dest=\"force\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(","9":"Similar lines in 2 files\n==get-poetry:1054\n==install-poetry:779\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\n        \"-y\",\n        \"--yes\",\n        help=\"accept all prompts\",\n        dest=\"accept_all\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\n        \"--uninstall\",\n        help=\"uninstall poetry\",\n        dest=\"uninstall\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(","10":"Similar lines in 2 files\n==get-poetry:414\n==install-poetry:693\n        metadata = json.loads(self._get(self.METADATA_URL).decode())\n\n        def _compare_versions(x, y):\n            mx = self.VERSION_REGEX.match(x)\n            my = self.VERSION_REGEX.match(y)\n\n            vx = tuple(int(p) for p in mx.groups()[:3]) + (mx.group(5),)\n            vy = tuple(int(p) for p in my.groups()[:3]) + (my.group(5),)\n\n            if vx < vy:\n                return -1\n            elif vx > vy:\n                return 1\n\n            return 0\n","11":"Similar lines in 2 files\n==get-poetry:157\n==install-poetry:221\n@contextmanager\ndef temporary_directory(*args, **kwargs):\n    try:\n        from tempfile import TemporaryDirectory\n    except ImportError:\n        name = tempfile.mkdtemp(*args, **kwargs)\n\n        yield name\n\n        shutil.rmtree(name)\n    else:\n        with TemporaryDirectory(*args, **kwargs) as name:\n            yield name\n\n","12":"Similar lines in 2 files\n==get-poetry:438\n==install-poetry:719\n            return None, None\n\n        version = self._version\n        if not version:\n            for release in reversed(releases):\n                m = self.VERSION_REGEX.match(release)\n                if m.group(5) and not self.allows_prereleases():\n                    continue\n\n                version = release\n\n                break\n","13":"Similar lines in 2 files\n==get-poetry:314\n==install-poetry:368\n    METADATA_URL = \"https:\/\/pypi.org\/pypi\/poetry\/json\"\n    VERSION_REGEX = re.compile(\n        r\"v?(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:\\.(\\d+))?\"\n        \"(\"\n        \"[._-]?\"\n        r\"(?:(stable|beta|b|rc|RC|alpha|a|patch|pl|p)((?:[.-]?\\d+)*)?)?\"\n        \"([.-]?dev)?\"\n        \")?\"\n        r\"(?:\\+[^\\s]+)?\"\n    )\n","14":"Similar lines in 2 files\n==get-poetry:1103\n==install-poetry:827\n    )\n\n    if args.uninstall or string_to_bool(os.getenv(\"POETRY_UNINSTALL\", \"0\")):\n        return installer.uninstall()\n\n    return installer.run()\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())"},"number":{"0":"W0622","1":"R1710","2":"W0622","3":"W0622","4":"R1710","5":"R1732","6":"R0801","7":"R0801","8":"R0801","9":"R0801","10":"R0801","11":"R0801","12":"R0801","13":"R0801","14":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint"},"lines_amount":{"0":1114,"1":1114,"2":838,"3":838,"4":838,"5":838,"6":838,"7":838,"8":838,"9":838,"10":838,"11":838,"12":838,"13":838,"14":838},"commit":{"0":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","1":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","2":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","3":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","4":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","5":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","6":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","7":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","8":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","9":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","10":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","11":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","12":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","13":"46ea187a9918ed836cb1ccbca6cebc39a5320c20","14":"46ea187a9918ed836cb1ccbca6cebc39a5320c20"},"repo":{"0":"python-poetry\/poetry","1":"python-poetry\/poetry","2":"python-poetry\/poetry","3":"python-poetry\/poetry","4":"python-poetry\/poetry","5":"python-poetry\/poetry","6":"python-poetry\/poetry","7":"python-poetry\/poetry","8":"python-poetry\/poetry","9":"python-poetry\/poetry","10":"python-poetry\/poetry","11":"python-poetry\/poetry","12":"python-poetry\/poetry","13":"python-poetry\/poetry","14":"python-poetry\/poetry"},"stargazers":{"0":16645,"1":16645,"2":16645,"3":16645,"4":16645,"5":16645,"6":16645,"7":16645,"8":16645,"9":16645,"10":16645,"11":16645,"12":16645,"13":16645,"14":16645}}