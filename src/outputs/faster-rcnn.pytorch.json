{"type":{"0":"W","1":"W","2":"W","3":"R","4":"R","5":"R","6":"R","7":"R","8":"R","9":"R","10":"R","11":"R","12":"R","13":"R","14":"R","15":"R","16":"R","17":"R","18":"R","19":"R","20":"R"},"module":{"0":"trainval_net","1":"trainval_net","2":"trainval_net","3":"trainval_net","4":"trainval_net","5":"trainval_net","6":"trainval_net","7":"trainval_net","8":"trainval_net","9":"trainval_net","10":"trainval_net","11":"trainval_net","12":"trainval_net","13":"trainval_net","14":"trainval_net","15":"trainval_net","16":"trainval_net","17":"trainval_net","18":"trainval_net","19":"trainval_net","20":"trainval_net"},"obj":{"0":"sampler.__iter__","1":"sampler.__iter__","2":"sampler.__iter__","3":"","4":"","5":"","6":"","7":"","8":"","9":"","10":"","11":"","12":"","13":"","14":"","15":"","16":"","17":"","18":"","19":"","20":""},"lnum":{"0":136,"1":138,"2":141,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1},"col":{"0":4,"1":4,"2":6,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"filename":{"0":"trainval_net.py","1":"trainval_net.py","2":"trainval_net.py","3":"trainval_net.py","4":"trainval_net.py","5":"trainval_net.py","6":"trainval_net.py","7":"trainval_net.py","8":"trainval_net.py","9":"trainval_net.py","10":"trainval_net.py","11":"trainval_net.py","12":"trainval_net.py","13":"trainval_net.py","14":"trainval_net.py","15":"trainval_net.py","16":"trainval_net.py","17":"trainval_net.py","18":"trainval_net.py","19":"trainval_net.py","20":"trainval_net.py"},"symbol":{"0":"attribute-defined-outside-init","1":"attribute-defined-outside-init","2":"attribute-defined-outside-init","3":"duplicate-code","4":"duplicate-code","5":"duplicate-code","6":"duplicate-code","7":"duplicate-code","8":"duplicate-code","9":"duplicate-code","10":"duplicate-code","11":"duplicate-code","12":"duplicate-code","13":"duplicate-code","14":"duplicate-code","15":"duplicate-code","16":"duplicate-code","17":"duplicate-code","18":"duplicate-code","19":"duplicate-code","20":"duplicate-code"},"text":{"0":"Attribute 'rand_num' defined outside __init__","1":"Attribute 'rand_num_view' defined outside __init__","2":"Attribute 'rand_num_view' defined outside __init__","3":"Similar lines in 2 files\n==demo:39\n==test_net:36\ntry:\n    xrange          # Python 2\nexcept NameError:\n    xrange = range  # Python 3\n\n\ndef parse_args():\n  \"\"\"\n  Parse input arguments\n  \"\"\"\n  parser = argparse.ArgumentParser(description='Train a Fast R-CNN network')\n  parser.add_argument('--dataset', dest='dataset',\n                      help='training dataset',\n                      default='pascal_voc', type=str)\n  parser.add_argument('--cfg', dest='cfg_file',\n                      help='optional config file',\n                      default='cfgs\/vgg16.yml', type=str)\n  parser.add_argument('--net', dest='net',\n                      help='vgg16, res50, res101, res152',\n                      default='res101', type=str)\n  parser.add_argument('--set', dest='set_cfgs',\n                      help='set config keys', default=None,\n                      nargs=argparse.REMAINDER)\n  parser.add_argument('--load_dir', dest='load_dir',","4":"Similar lines in 2 files\n==test_net:174\n==trainval_net:214\n  im_data = torch.FloatTensor(1)\n  im_info = torch.FloatTensor(1)\n  num_boxes = torch.LongTensor(1)\n  gt_boxes = torch.FloatTensor(1)\n\n  # ship to cuda\n  if args.cuda:\n    im_data = im_data.cuda()\n    im_info = im_info.cuda()\n    num_boxes = num_boxes.cuda()\n    gt_boxes = gt_boxes.cuda()\n\n  # make variable\n  im_data = Variable(im_data)\n  im_info = Variable(im_info)\n  num_boxes = Variable(num_boxes)\n  gt_boxes = Variable(gt_boxes)\n\n  if args.cuda:\n    cfg.CUDA = True\n","5":"Similar lines in 2 files\n==demo:71\n==test_net:68\n  parser.add_argument('--mGPUs', dest='mGPUs',\n                      help='whether use multiple GPUs',\n                      action='store_true')\n  parser.add_argument('--cag', dest='class_agnostic',\n                      help='whether perform class_agnostic bbox regression',\n                      action='store_true')\n  parser.add_argument('--parallel_type', dest='parallel_type',\n                      help='which part of model to parallel, 0: all, 1: model before roi pooling',\n                      default=0, type=int)\n  parser.add_argument('--checksession', dest='checksession',\n                      help='checksession to load model',\n                      default=1, type=int)\n  parser.add_argument('--checkepoch', dest='checkepoch',\n                      help='checkepoch to load network',\n                      default=1, type=int)\n  parser.add_argument('--checkpoint', dest='checkpoint',\n                      help='checkpoint to load network',\n                      default=10021, type=int)","6":"Similar lines in 2 files\n==demo:290\n==test_net:236\n      rois, cls_prob, bbox_pred, \\\n      rpn_loss_cls, rpn_loss_box, \\\n      RCNN_loss_cls, RCNN_loss_bbox, \\\n      rois_label = fasterRCNN(im_data, im_info, gt_boxes, num_boxes)\n\n      scores = cls_prob.data\n      boxes = rois.data[:, :, 1:5]\n\n      if cfg.TEST.BBOX_REG:\n          # Apply bounding-box regression deltas\n          box_deltas = bbox_pred.data\n          if cfg.TRAIN.BBOX_NORMALIZE_TARGETS_PRECOMPUTED:\n          # Optionally normalize targets by a precomputed mean and stdev\n            if args.class_agnostic:","7":"Similar lines in 2 files\n==test_net:5\n==trainval_net:5\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport _init_paths\nimport os\nimport sys\nimport numpy as np\nimport argparse\nimport pprint\nimport pdb\nimport time\n","8":"Similar lines in 2 files\n==demo:338\n==test_net:276\n          inds = torch.nonzero(scores[:,j]>thresh).view(-1)\n          # if there is det\n          if inds.numel() > 0:\n            cls_scores = scores[:,j][inds]\n            _, order = torch.sort(cls_scores, 0, True)\n            if args.class_agnostic:\n              cls_boxes = pred_boxes[inds, :]\n            else:\n              cls_boxes = pred_boxes[inds][:, j * 4:(j + 1) * 4]\n\n            cls_dets = torch.cat((cls_boxes, cls_scores.unsqueeze(1)), 1)\n            # cls_dets = torch.cat((cls_boxes, cls_scores), 1)\n            cls_dets = cls_dets[order]","9":"Similar lines in 3 files\n==demo:5\n==test_net:5\n==trainval_net:5\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport _init_paths\nimport os\nimport sys\nimport numpy as np\nimport argparse\nimport pprint\nimport pdb\nimport time","10":"Similar lines in 2 files\n==test_net:128\n==trainval_net:177\n  args.cfg_file = \"cfgs\/{}_ls.yml\".format(args.net) if args.large_scale else \"cfgs\/{}.yml\".format(args.net)\n\n  if args.cfg_file is not None:\n    cfg_from_file(args.cfg_file)\n  if args.set_cfgs is not None:\n    cfg_from_list(args.set_cfgs)\n\n  print('Using config:')\n  pprint.pprint(cfg)","11":"Similar lines in 2 files\n==test_net:62\n==trainval_net:65\n  parser.add_argument('--cuda', dest='cuda',\n                      help='whether use CUDA',\n                      action='store_true')\n  parser.add_argument('--ls', dest='large_scale',\n                      help='whether use large imag scale',\n                      action='store_true')\n  parser.add_argument('--mGPUs', dest='mGPUs',\n                      help='whether use multiple GPUs',\n                      action='store_true')","12":"Similar lines in 3 files\n==demo:45\n==test_net:42\n==trainval_net:35\ndef parse_args():\n  \"\"\"\n  Parse input arguments\n  \"\"\"\n  parser = argparse.ArgumentParser(description='Train a Fast R-CNN network')\n  parser.add_argument('--dataset', dest='dataset',\n                      help='training dataset',\n                      default='pascal_voc', type=str)","13":"Similar lines in 2 files\n==demo:321\n==test_net:258\n          pred_boxes = bbox_transform_inv(boxes, box_deltas, 1)\n          pred_boxes = clip_boxes(pred_boxes, im_info.data, 1)\n      else:\n          # Simply repeat the boxes, once for each class\n          _ = torch.from_numpy(np.tile(boxes, (1, scores.shape[1])))\n          pred_boxes = _.cuda() if args.cuda > 0 else _\n","14":"Similar lines in 2 files\n==demo:183\n==test_net:159\n  else:\n    print(\"network is not defined\")\n    pdb.set_trace()\n\n  fasterRCNN.create_architecture()\n\n  print(\"load checkpoint %s\" % (load_name))","15":"Similar lines in 2 files\n==demo:99\n==test_net:89\n  args = parser.parse_args()\n  return args\n\nlr = cfg.TRAIN.LEARNING_RATE\nmomentum = cfg.TRAIN.MOMENTUM\nweight_decay = cfg.TRAIN.WEIGHT_DECAY\n","16":"Similar lines in 2 files\n==demo:27\n==test_net:25\nfrom roi_data_layer.roidb import combined_roidb\nfrom roi_data_layer.roibatchLoader import roibatchLoader\nfrom model.utils.config import cfg, cfg_from_file, cfg_from_list, get_output_dir\nfrom model.rpn.bbox_transform import clip_boxes\nfrom model.nms.nms_wrapper import nms\nfrom model.rpn.bbox_transform import bbox_transform_inv\nfrom model.utils.net_utils import save_net, load_net, vis_detections","17":"Similar lines in 2 files\n==test_net:229\n==trainval_net:309\n      data = next(data_iter)\n      im_data.data.resize_(data[0].size()).copy_(data[0])\n      im_info.data.resize_(data[1].size()).copy_(data[1])\n      gt_boxes.data.resize_(data[2].size()).copy_(data[2])\n      num_boxes.data.resize_(data[3].size()).copy_(data[3])\n","18":"Similar lines in 2 files\n==demo:19\n==trainval_net:18\nimport torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.optim as optim\n\nimport torchvision.transforms as transforms","19":"Similar lines in 2 files\n==demo:330\n==test_net:267\n      scores = scores.squeeze()\n      pred_boxes = pred_boxes.squeeze()\n      det_toc = time.time()\n      detect_time = det_toc - det_tic\n      misc_tic = time.time()\n      if vis:","20":"Similar lines in 2 files\n==demo:161\n==test_net:144\n  input_dir = args.load_dir + \"\/\" + args.net + \"\/\" + args.dataset\n  if not os.path.exists(input_dir):\n    raise Exception('There is no input directory for loading network from ' + input_dir)\n  load_name = os.path.join(input_dir,\n    'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))\n"},"number":{"0":"W0201","1":"W0201","2":"W0201","3":"R0801","4":"R0801","5":"R0801","6":"R0801","7":"R0801","8":"R0801","9":"R0801","10":"R0801","11":"R0801","12":"R0801","13":"R0801","14":"R0801","15":"R0801","16":"R0801","17":"R0801","18":"R0801","19":"R0801","20":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint","12":"pylint","13":"pylint","14":"pylint","15":"pylint","16":"pylint","17":"pylint","18":"pylint","19":"pylint","20":"pylint"},"lines_amount":{"0":385,"1":385,"2":385,"3":385,"4":385,"5":385,"6":385,"7":385,"8":385,"9":385,"10":385,"11":385,"12":385,"13":385,"14":385,"15":385,"16":385,"17":385,"18":385,"19":385,"20":385},"commit":{"0":"f9d984d27b48a067b29792932bcb5321a39c1f09","1":"f9d984d27b48a067b29792932bcb5321a39c1f09","2":"f9d984d27b48a067b29792932bcb5321a39c1f09","3":"f9d984d27b48a067b29792932bcb5321a39c1f09","4":"f9d984d27b48a067b29792932bcb5321a39c1f09","5":"f9d984d27b48a067b29792932bcb5321a39c1f09","6":"f9d984d27b48a067b29792932bcb5321a39c1f09","7":"f9d984d27b48a067b29792932bcb5321a39c1f09","8":"f9d984d27b48a067b29792932bcb5321a39c1f09","9":"f9d984d27b48a067b29792932bcb5321a39c1f09","10":"f9d984d27b48a067b29792932bcb5321a39c1f09","11":"f9d984d27b48a067b29792932bcb5321a39c1f09","12":"f9d984d27b48a067b29792932bcb5321a39c1f09","13":"f9d984d27b48a067b29792932bcb5321a39c1f09","14":"f9d984d27b48a067b29792932bcb5321a39c1f09","15":"f9d984d27b48a067b29792932bcb5321a39c1f09","16":"f9d984d27b48a067b29792932bcb5321a39c1f09","17":"f9d984d27b48a067b29792932bcb5321a39c1f09","18":"f9d984d27b48a067b29792932bcb5321a39c1f09","19":"f9d984d27b48a067b29792932bcb5321a39c1f09","20":"f9d984d27b48a067b29792932bcb5321a39c1f09"},"repo":{"0":"jwyang\/faster-rcnn.pytorch","1":"jwyang\/faster-rcnn.pytorch","2":"jwyang\/faster-rcnn.pytorch","3":"jwyang\/faster-rcnn.pytorch","4":"jwyang\/faster-rcnn.pytorch","5":"jwyang\/faster-rcnn.pytorch","6":"jwyang\/faster-rcnn.pytorch","7":"jwyang\/faster-rcnn.pytorch","8":"jwyang\/faster-rcnn.pytorch","9":"jwyang\/faster-rcnn.pytorch","10":"jwyang\/faster-rcnn.pytorch","11":"jwyang\/faster-rcnn.pytorch","12":"jwyang\/faster-rcnn.pytorch","13":"jwyang\/faster-rcnn.pytorch","14":"jwyang\/faster-rcnn.pytorch","15":"jwyang\/faster-rcnn.pytorch","16":"jwyang\/faster-rcnn.pytorch","17":"jwyang\/faster-rcnn.pytorch","18":"jwyang\/faster-rcnn.pytorch","19":"jwyang\/faster-rcnn.pytorch","20":"jwyang\/faster-rcnn.pytorch"},"stargazers":{"0":6513,"1":6513,"2":6513,"3":6513,"4":6513,"5":6513,"6":6513,"7":6513,"8":6513,"9":6513,"10":6513,"11":6513,"12":6513,"13":6513,"14":6513,"15":6513,"16":6513,"17":6513,"18":6513,"19":6513,"20":6513}}