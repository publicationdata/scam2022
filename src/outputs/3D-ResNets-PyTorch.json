{"type":{"0":"R","1":"W","2":"W","3":"W","4":"W","5":"W","6":"W","7":"W","8":"W","9":"R","10":"R","11":"R"},"module":{"0":"main","1":"spatial_transforms","2":"spatial_transforms","3":"spatial_transforms","4":"spatial_transforms","5":"spatial_transforms","6":"spatial_transforms","7":"utils","8":"utils","9":"validation","10":"validation","11":"validation"},"obj":{"0":"json_serial","1":"CornerCrop.__init__","2":"MultiScaleCornerCrop.__init__","3":"RandomResizedCrop.__call__","4":"RandomResizedCrop.__call__","5":"ColorJitter.__call__","6":"ColorJitter.__call__","7":"AverageMeter.update","8":"AverageMeter.update","9":"","10":"","11":""},"lnum":{"0":35,"1":60,"2":133,"3":178,"4":179,"5":196,"6":198,"7":23,"8":26,"9":1,"10":1,"11":1},"col":{"0":0,"1":4,"2":4,"3":12,"4":12,"5":12,"6":12,"7":8,"8":8,"9":0,"10":0,"11":0},"filename":{"0":"main.py","1":"spatial_transforms.py","2":"spatial_transforms.py","3":"spatial_transforms.py","4":"spatial_transforms.py","5":"spatial_transforms.py","6":"spatial_transforms.py","7":"utils.py","8":"utils.py","9":"validation.py","10":"validation.py","11":"validation.py"},"symbol":{"0":"inconsistent-return-statements","1":"dangerous-default-value","2":"dangerous-default-value","3":"attribute-defined-outside-init","4":"attribute-defined-outside-init","5":"attribute-defined-outside-init","6":"attribute-defined-outside-init","7":"attribute-defined-outside-init","8":"attribute-defined-outside-init","9":"duplicate-code","10":"duplicate-code","11":"duplicate-code"},"text":{"0":"Either all return statements in a function should return an expression, or none of them should.","1":"Dangerous default value [] as argument","2":"Dangerous default value [] as argument","3":"Attribute 'random_crop' defined outside __init__","4":"Attribute 'randomize' defined outside __init__","5":"Attribute 'transform' defined outside __init__","6":"Attribute 'randomize' defined outside __init__","7":"Attribute 'val' defined outside __init__","8":"Attribute 'avg' defined outside __init__","9":"Similar lines in 2 files\n==training:65\n==validation:50\n                      i + 1,\n                      len(data_loader),\n                      batch_time=batch_time,\n                      data_time=data_time,\n                      loss=losses,\n                      acc=accuracies))\n\n    if distributed:\n        loss_sum = torch.tensor([losses.sum],\n                                dtype=torch.float32,\n                                device=device)\n        loss_count = torch.tensor([losses.count],\n                                  dtype=torch.float32,\n                                  device=device)\n        acc_sum = torch.tensor([accuracies.sum],\n                               dtype=torch.float32,\n                               device=device)\n        acc_count = torch.tensor([accuracies.count],\n                                 dtype=torch.float32,\n                                 device=device)\n\n        dist.all_reduce(loss_sum, op=dist.ReduceOp.SUM)\n        dist.all_reduce(loss_count, op=dist.ReduceOp.SUM)\n        dist.all_reduce(acc_sum, op=dist.ReduceOp.SUM)\n        dist.all_reduce(acc_count, op=dist.ReduceOp.SUM)\n\n        losses.avg = loss_sum.item() \/ loss_count.item()\n        accuracies.avg = acc_sum.item() \/ acc_count.item()\n","10":"Similar lines in 2 files\n==training:32\n==validation:30\n        for i, (inputs, targets) in enumerate(data_loader):\n            data_time.update(time.time() - end_time)\n\n            targets = targets.to(device, non_blocking=True)\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            acc = calculate_accuracy(outputs, targets)\n\n            losses.update(loss.item(), inputs.size(0))\n            accuracies.update(acc, inputs.size(0))\n","11":"Similar lines in 2 files\n==training:26\n==validation:22\n    batch_time = AverageMeter()\n    data_time = AverageMeter()\n    losses = AverageMeter()\n    accuracies = AverageMeter()\n\n    end_time = time.time()"},"number":{"0":"R1710","1":"W0102","2":"W0102","3":"W0201","4":"W0201","5":"W0201","6":"W0201","7":"W0201","8":"W0201","9":"R0801","10":"R0801","11":"R0801"},"linter":{"0":"pylint","1":"pylint","2":"pylint","3":"pylint","4":"pylint","5":"pylint","6":"pylint","7":"pylint","8":"pylint","9":"pylint","10":"pylint","11":"pylint"},"lines_amount":{"0":428,"1":215,"2":215,"3":215,"4":215,"5":215,"6":215,"7":97,"8":97,"9":88,"10":88,"11":88},"commit":{"0":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","1":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","2":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","3":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","4":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","5":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","6":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","7":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","8":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","9":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","10":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49","11":"540a0ea1abaee379fa3651d4d5afbd2d667a1f49"},"repo":{"0":"kenshohara\/3D-ResNets-PyTorch","1":"kenshohara\/3D-ResNets-PyTorch","2":"kenshohara\/3D-ResNets-PyTorch","3":"kenshohara\/3D-ResNets-PyTorch","4":"kenshohara\/3D-ResNets-PyTorch","5":"kenshohara\/3D-ResNets-PyTorch","6":"kenshohara\/3D-ResNets-PyTorch","7":"kenshohara\/3D-ResNets-PyTorch","8":"kenshohara\/3D-ResNets-PyTorch","9":"kenshohara\/3D-ResNets-PyTorch","10":"kenshohara\/3D-ResNets-PyTorch","11":"kenshohara\/3D-ResNets-PyTorch"},"stargazers":{"0":3074,"1":3074,"2":3074,"3":3074,"4":3074,"5":3074,"6":3074,"7":3074,"8":3074,"9":3074,"10":3074,"11":3074}}